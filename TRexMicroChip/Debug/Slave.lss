
Slave.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000000a  00800100  000007c6  0000085a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000007c6  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000026  0080010a  0080010a  00000864  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000864  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000894  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000f0  00000000  00000000  000008d4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000e74  00000000  00000000  000009c4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000917  00000000  00000000  00001838  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000a51  00000000  00000000  0000214f  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000003cc  00000000  00000000  00002ba0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000065c  00000000  00000000  00002f6c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000818  00000000  00000000  000035c8  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000e0  00000000  00000000  00003de0  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	60 c0       	rjmp	.+192    	; 0xc6 <__bad_interrupt>
   6:	00 00       	nop
   8:	5e c0       	rjmp	.+188    	; 0xc6 <__bad_interrupt>
   a:	00 00       	nop
   c:	5c c0       	rjmp	.+184    	; 0xc6 <__bad_interrupt>
   e:	00 00       	nop
  10:	5a c0       	rjmp	.+180    	; 0xc6 <__bad_interrupt>
  12:	00 00       	nop
  14:	58 c0       	rjmp	.+176    	; 0xc6 <__bad_interrupt>
  16:	00 00       	nop
  18:	56 c0       	rjmp	.+172    	; 0xc6 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	54 c0       	rjmp	.+168    	; 0xc6 <__bad_interrupt>
  1e:	00 00       	nop
  20:	52 c0       	rjmp	.+164    	; 0xc6 <__bad_interrupt>
  22:	00 00       	nop
  24:	50 c0       	rjmp	.+160    	; 0xc6 <__bad_interrupt>
  26:	00 00       	nop
  28:	4e c0       	rjmp	.+156    	; 0xc6 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	4c c0       	rjmp	.+152    	; 0xc6 <__bad_interrupt>
  2e:	00 00       	nop
  30:	4a c0       	rjmp	.+148    	; 0xc6 <__bad_interrupt>
  32:	00 00       	nop
  34:	b9 c0       	rjmp	.+370    	; 0x1a8 <__vector_13>
  36:	00 00       	nop
  38:	46 c0       	rjmp	.+140    	; 0xc6 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	44 c0       	rjmp	.+136    	; 0xc6 <__bad_interrupt>
  3e:	00 00       	nop
  40:	42 c0       	rjmp	.+132    	; 0xc6 <__bad_interrupt>
  42:	00 00       	nop
  44:	40 c0       	rjmp	.+128    	; 0xc6 <__bad_interrupt>
  46:	00 00       	nop
  48:	3e c0       	rjmp	.+124    	; 0xc6 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	3c c0       	rjmp	.+120    	; 0xc6 <__bad_interrupt>
  4e:	00 00       	nop
  50:	3a c0       	rjmp	.+116    	; 0xc6 <__bad_interrupt>
  52:	00 00       	nop
  54:	38 c0       	rjmp	.+112    	; 0xc6 <__bad_interrupt>
  56:	00 00       	nop
  58:	36 c0       	rjmp	.+108    	; 0xc6 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	34 c0       	rjmp	.+104    	; 0xc6 <__bad_interrupt>
  5e:	00 00       	nop
  60:	32 c0       	rjmp	.+100    	; 0xc6 <__bad_interrupt>
  62:	00 00       	nop
  64:	30 c0       	rjmp	.+96     	; 0xc6 <__bad_interrupt>
  66:	00 00       	nop
  68:	2e c0       	rjmp	.+92     	; 0xc6 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	2c c0       	rjmp	.+88     	; 0xc6 <__bad_interrupt>
  6e:	00 00       	nop
  70:	2a c0       	rjmp	.+84     	; 0xc6 <__bad_interrupt>
  72:	00 00       	nop
  74:	28 c0       	rjmp	.+80     	; 0xc6 <__bad_interrupt>
  76:	00 00       	nop
  78:	26 c0       	rjmp	.+76     	; 0xc6 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	24 c0       	rjmp	.+72     	; 0xc6 <__bad_interrupt>
  7e:	00 00       	nop
  80:	22 c0       	rjmp	.+68     	; 0xc6 <__bad_interrupt>
  82:	00 00       	nop
  84:	20 c0       	rjmp	.+64     	; 0xc6 <__bad_interrupt>
  86:	00 00       	nop
  88:	1e c0       	rjmp	.+60     	; 0xc6 <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e4       	ldi	r29, 0x40	; 64
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	e6 ec       	ldi	r30, 0xC6	; 198
  a0:	f7 e0       	ldi	r31, 0x07	; 7
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	aa 30       	cpi	r26, 0x0A	; 10
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
  b2:	21 e0       	ldi	r18, 0x01	; 1
  b4:	aa e0       	ldi	r26, 0x0A	; 10
  b6:	b1 e0       	ldi	r27, 0x01	; 1
  b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
  ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
  bc:	a0 33       	cpi	r26, 0x30	; 48
  be:	b2 07       	cpc	r27, r18
  c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
  c2:	c8 d1       	rcall	.+912    	; 0x454 <main>
  c4:	7e c3       	rjmp	.+1788   	; 0x7c2 <_exit>

000000c6 <__bad_interrupt>:
  c6:	9c cf       	rjmp	.-200    	; 0x0 <__vectors>

000000c8 <TimerSet>:
	while(!(SPSR & (1<<SPIF))) { // wait for transmission to complete
		;
	}
	// set SS high
	SetBit(PORTB, DD_SS, 0);
}
  c8:	cf 93       	push	r28
  ca:	df 93       	push	r29
  cc:	00 d0       	rcall	.+0      	; 0xce <TimerSet+0x6>
  ce:	00 d0       	rcall	.+0      	; 0xd0 <TimerSet+0x8>
  d0:	cd b7       	in	r28, 0x3d	; 61
  d2:	de b7       	in	r29, 0x3e	; 62
  d4:	69 83       	std	Y+1, r22	; 0x01
  d6:	7a 83       	std	Y+2, r23	; 0x02
  d8:	8b 83       	std	Y+3, r24	; 0x03
  da:	9c 83       	std	Y+4, r25	; 0x04
  dc:	89 81       	ldd	r24, Y+1	; 0x01
  de:	9a 81       	ldd	r25, Y+2	; 0x02
  e0:	ab 81       	ldd	r26, Y+3	; 0x03
  e2:	bc 81       	ldd	r27, Y+4	; 0x04
  e4:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
  e8:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__data_start+0x1>
  ec:	a0 93 02 01 	sts	0x0102, r26	; 0x800102 <__data_start+0x2>
  f0:	b0 93 03 01 	sts	0x0103, r27	; 0x800103 <__data_start+0x3>
  f4:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
  f8:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
  fc:	a0 91 02 01 	lds	r26, 0x0102	; 0x800102 <__data_start+0x2>
 100:	b0 91 03 01 	lds	r27, 0x0103	; 0x800103 <__data_start+0x3>
 104:	80 93 0b 01 	sts	0x010B, r24	; 0x80010b <_avr_timer_cntcurr>
 108:	90 93 0c 01 	sts	0x010C, r25	; 0x80010c <_avr_timer_cntcurr+0x1>
 10c:	a0 93 0d 01 	sts	0x010D, r26	; 0x80010d <_avr_timer_cntcurr+0x2>
 110:	b0 93 0e 01 	sts	0x010E, r27	; 0x80010e <_avr_timer_cntcurr+0x3>
 114:	00 00       	nop
 116:	0f 90       	pop	r0
 118:	0f 90       	pop	r0
 11a:	0f 90       	pop	r0
 11c:	0f 90       	pop	r0
 11e:	df 91       	pop	r29
 120:	cf 91       	pop	r28
 122:	08 95       	ret

00000124 <TimerOn>:
 124:	cf 93       	push	r28
 126:	df 93       	push	r29
 128:	cd b7       	in	r28, 0x3d	; 61
 12a:	de b7       	in	r29, 0x3e	; 62
 12c:	81 e8       	ldi	r24, 0x81	; 129
 12e:	90 e0       	ldi	r25, 0x00	; 0
 130:	2b e0       	ldi	r18, 0x0B	; 11
 132:	fc 01       	movw	r30, r24
 134:	20 83       	st	Z, r18
 136:	88 e8       	ldi	r24, 0x88	; 136
 138:	90 e0       	ldi	r25, 0x00	; 0
 13a:	2d e7       	ldi	r18, 0x7D	; 125
 13c:	30 e0       	ldi	r19, 0x00	; 0
 13e:	fc 01       	movw	r30, r24
 140:	31 83       	std	Z+1, r19	; 0x01
 142:	20 83       	st	Z, r18
 144:	8f e6       	ldi	r24, 0x6F	; 111
 146:	90 e0       	ldi	r25, 0x00	; 0
 148:	22 e0       	ldi	r18, 0x02	; 2
 14a:	fc 01       	movw	r30, r24
 14c:	20 83       	st	Z, r18
 14e:	84 e8       	ldi	r24, 0x84	; 132
 150:	90 e0       	ldi	r25, 0x00	; 0
 152:	fc 01       	movw	r30, r24
 154:	11 82       	std	Z+1, r1	; 0x01
 156:	10 82       	st	Z, r1
 158:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 15c:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
 160:	a0 91 02 01 	lds	r26, 0x0102	; 0x800102 <__data_start+0x2>
 164:	b0 91 03 01 	lds	r27, 0x0103	; 0x800103 <__data_start+0x3>
 168:	80 93 0b 01 	sts	0x010B, r24	; 0x80010b <_avr_timer_cntcurr>
 16c:	90 93 0c 01 	sts	0x010C, r25	; 0x80010c <_avr_timer_cntcurr+0x1>
 170:	a0 93 0d 01 	sts	0x010D, r26	; 0x80010d <_avr_timer_cntcurr+0x2>
 174:	b0 93 0e 01 	sts	0x010E, r27	; 0x80010e <_avr_timer_cntcurr+0x3>
 178:	8f e5       	ldi	r24, 0x5F	; 95
 17a:	90 e0       	ldi	r25, 0x00	; 0
 17c:	2f e5       	ldi	r18, 0x5F	; 95
 17e:	30 e0       	ldi	r19, 0x00	; 0
 180:	f9 01       	movw	r30, r18
 182:	20 81       	ld	r18, Z
 184:	20 68       	ori	r18, 0x80	; 128
 186:	fc 01       	movw	r30, r24
 188:	20 83       	st	Z, r18
 18a:	00 00       	nop
 18c:	df 91       	pop	r29
 18e:	cf 91       	pop	r28
 190:	08 95       	ret

00000192 <TimerISR>:
 192:	cf 93       	push	r28
 194:	df 93       	push	r29
 196:	cd b7       	in	r28, 0x3d	; 61
 198:	de b7       	in	r29, 0x3e	; 62
 19a:	81 e0       	ldi	r24, 0x01	; 1
 19c:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <__data_end>
 1a0:	00 00       	nop
 1a2:	df 91       	pop	r29
 1a4:	cf 91       	pop	r28
 1a6:	08 95       	ret

000001a8 <__vector_13>:
 1a8:	1f 92       	push	r1
 1aa:	0f 92       	push	r0
 1ac:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
 1b0:	0f 92       	push	r0
 1b2:	11 24       	eor	r1, r1
 1b4:	00 90 5b 00 	lds	r0, 0x005B	; 0x80005b <__TEXT_REGION_LENGTH__+0x7e005b>
 1b8:	0f 92       	push	r0
 1ba:	2f 93       	push	r18
 1bc:	3f 93       	push	r19
 1be:	4f 93       	push	r20
 1c0:	5f 93       	push	r21
 1c2:	6f 93       	push	r22
 1c4:	7f 93       	push	r23
 1c6:	8f 93       	push	r24
 1c8:	9f 93       	push	r25
 1ca:	af 93       	push	r26
 1cc:	bf 93       	push	r27
 1ce:	ef 93       	push	r30
 1d0:	ff 93       	push	r31
 1d2:	cf 93       	push	r28
 1d4:	df 93       	push	r29
 1d6:	cd b7       	in	r28, 0x3d	; 61
 1d8:	de b7       	in	r29, 0x3e	; 62
 1da:	80 91 0b 01 	lds	r24, 0x010B	; 0x80010b <_avr_timer_cntcurr>
 1de:	90 91 0c 01 	lds	r25, 0x010C	; 0x80010c <_avr_timer_cntcurr+0x1>
 1e2:	a0 91 0d 01 	lds	r26, 0x010D	; 0x80010d <_avr_timer_cntcurr+0x2>
 1e6:	b0 91 0e 01 	lds	r27, 0x010E	; 0x80010e <_avr_timer_cntcurr+0x3>
 1ea:	01 97       	sbiw	r24, 0x01	; 1
 1ec:	a1 09       	sbc	r26, r1
 1ee:	b1 09       	sbc	r27, r1
 1f0:	80 93 0b 01 	sts	0x010B, r24	; 0x80010b <_avr_timer_cntcurr>
 1f4:	90 93 0c 01 	sts	0x010C, r25	; 0x80010c <_avr_timer_cntcurr+0x1>
 1f8:	a0 93 0d 01 	sts	0x010D, r26	; 0x80010d <_avr_timer_cntcurr+0x2>
 1fc:	b0 93 0e 01 	sts	0x010E, r27	; 0x80010e <_avr_timer_cntcurr+0x3>
 200:	80 91 0b 01 	lds	r24, 0x010B	; 0x80010b <_avr_timer_cntcurr>
 204:	90 91 0c 01 	lds	r25, 0x010C	; 0x80010c <_avr_timer_cntcurr+0x1>
 208:	a0 91 0d 01 	lds	r26, 0x010D	; 0x80010d <_avr_timer_cntcurr+0x2>
 20c:	b0 91 0e 01 	lds	r27, 0x010E	; 0x80010e <_avr_timer_cntcurr+0x3>
 210:	89 2b       	or	r24, r25
 212:	8a 2b       	or	r24, r26
 214:	8b 2b       	or	r24, r27
 216:	89 f4       	brne	.+34     	; 0x23a <__vector_13+0x92>
 218:	bc df       	rcall	.-136    	; 0x192 <TimerISR>
 21a:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 21e:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
 222:	a0 91 02 01 	lds	r26, 0x0102	; 0x800102 <__data_start+0x2>
 226:	b0 91 03 01 	lds	r27, 0x0103	; 0x800103 <__data_start+0x3>
 22a:	80 93 0b 01 	sts	0x010B, r24	; 0x80010b <_avr_timer_cntcurr>
 22e:	90 93 0c 01 	sts	0x010C, r25	; 0x80010c <_avr_timer_cntcurr+0x1>
 232:	a0 93 0d 01 	sts	0x010D, r26	; 0x80010d <_avr_timer_cntcurr+0x2>
 236:	b0 93 0e 01 	sts	0x010E, r27	; 0x80010e <_avr_timer_cntcurr+0x3>
 23a:	00 00       	nop
 23c:	df 91       	pop	r29
 23e:	cf 91       	pop	r28
 240:	ff 91       	pop	r31
 242:	ef 91       	pop	r30
 244:	bf 91       	pop	r27
 246:	af 91       	pop	r26
 248:	9f 91       	pop	r25
 24a:	8f 91       	pop	r24
 24c:	7f 91       	pop	r23
 24e:	6f 91       	pop	r22
 250:	5f 91       	pop	r21
 252:	4f 91       	pop	r20
 254:	3f 91       	pop	r19
 256:	2f 91       	pop	r18
 258:	0f 90       	pop	r0
 25a:	00 92 5b 00 	sts	0x005B, r0	; 0x80005b <__TEXT_REGION_LENGTH__+0x7e005b>
 25e:	0f 90       	pop	r0
 260:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
 264:	0f 90       	pop	r0
 266:	1f 90       	pop	r1
 268:	18 95       	reti

0000026a <findGCD>:
 26a:	cf 93       	push	r28
 26c:	df 93       	push	r29
 26e:	cd b7       	in	r28, 0x3d	; 61
 270:	de b7       	in	r29, 0x3e	; 62
 272:	2c 97       	sbiw	r28, 0x0c	; 12
 274:	0f b6       	in	r0, 0x3f	; 63
 276:	f8 94       	cli
 278:	de bf       	out	0x3e, r29	; 62
 27a:	0f be       	out	0x3f, r0	; 63
 27c:	cd bf       	out	0x3d, r28	; 61
 27e:	6d 83       	std	Y+5, r22	; 0x05
 280:	7e 83       	std	Y+6, r23	; 0x06
 282:	8f 83       	std	Y+7, r24	; 0x07
 284:	98 87       	std	Y+8, r25	; 0x08
 286:	29 87       	std	Y+9, r18	; 0x09
 288:	3a 87       	std	Y+10, r19	; 0x0a
 28a:	4b 87       	std	Y+11, r20	; 0x0b
 28c:	5c 87       	std	Y+12, r21	; 0x0c
 28e:	8d 81       	ldd	r24, Y+5	; 0x05
 290:	9e 81       	ldd	r25, Y+6	; 0x06
 292:	af 81       	ldd	r26, Y+7	; 0x07
 294:	b8 85       	ldd	r27, Y+8	; 0x08
 296:	29 85       	ldd	r18, Y+9	; 0x09
 298:	3a 85       	ldd	r19, Y+10	; 0x0a
 29a:	4b 85       	ldd	r20, Y+11	; 0x0b
 29c:	5c 85       	ldd	r21, Y+12	; 0x0c
 29e:	bc 01       	movw	r22, r24
 2a0:	cd 01       	movw	r24, r26
 2a2:	6d d2       	rcall	.+1242   	; 0x77e <__udivmodsi4>
 2a4:	dc 01       	movw	r26, r24
 2a6:	cb 01       	movw	r24, r22
 2a8:	89 83       	std	Y+1, r24	; 0x01
 2aa:	9a 83       	std	Y+2, r25	; 0x02
 2ac:	ab 83       	std	Y+3, r26	; 0x03
 2ae:	bc 83       	std	Y+4, r27	; 0x04
 2b0:	89 81       	ldd	r24, Y+1	; 0x01
 2b2:	9a 81       	ldd	r25, Y+2	; 0x02
 2b4:	ab 81       	ldd	r26, Y+3	; 0x03
 2b6:	bc 81       	ldd	r27, Y+4	; 0x04
 2b8:	89 2b       	or	r24, r25
 2ba:	8a 2b       	or	r24, r26
 2bc:	8b 2b       	or	r24, r27
 2be:	29 f4       	brne	.+10     	; 0x2ca <findGCD+0x60>
 2c0:	89 85       	ldd	r24, Y+9	; 0x09
 2c2:	9a 85       	ldd	r25, Y+10	; 0x0a
 2c4:	ab 85       	ldd	r26, Y+11	; 0x0b
 2c6:	bc 85       	ldd	r27, Y+12	; 0x0c
 2c8:	11 c0       	rjmp	.+34     	; 0x2ec <findGCD+0x82>
 2ca:	89 85       	ldd	r24, Y+9	; 0x09
 2cc:	9a 85       	ldd	r25, Y+10	; 0x0a
 2ce:	ab 85       	ldd	r26, Y+11	; 0x0b
 2d0:	bc 85       	ldd	r27, Y+12	; 0x0c
 2d2:	8d 83       	std	Y+5, r24	; 0x05
 2d4:	9e 83       	std	Y+6, r25	; 0x06
 2d6:	af 83       	std	Y+7, r26	; 0x07
 2d8:	b8 87       	std	Y+8, r27	; 0x08
 2da:	89 81       	ldd	r24, Y+1	; 0x01
 2dc:	9a 81       	ldd	r25, Y+2	; 0x02
 2de:	ab 81       	ldd	r26, Y+3	; 0x03
 2e0:	bc 81       	ldd	r27, Y+4	; 0x04
 2e2:	89 87       	std	Y+9, r24	; 0x09
 2e4:	9a 87       	std	Y+10, r25	; 0x0a
 2e6:	ab 87       	std	Y+11, r26	; 0x0b
 2e8:	bc 87       	std	Y+12, r27	; 0x0c
 2ea:	d1 cf       	rjmp	.-94     	; 0x28e <findGCD+0x24>
 2ec:	bc 01       	movw	r22, r24
 2ee:	cd 01       	movw	r24, r26
 2f0:	2c 96       	adiw	r28, 0x0c	; 12
 2f2:	0f b6       	in	r0, 0x3f	; 63
 2f4:	f8 94       	cli
 2f6:	de bf       	out	0x3e, r29	; 62
 2f8:	0f be       	out	0x3f, r0	; 63
 2fa:	cd bf       	out	0x3d, r28	; 61
 2fc:	df 91       	pop	r29
 2fe:	cf 91       	pop	r28
 300:	08 95       	ret

00000302 <delay_ms>:
 302:	cf 93       	push	r28
 304:	df 93       	push	r29
 306:	00 d0       	rcall	.+0      	; 0x308 <delay_ms+0x6>
 308:	00 d0       	rcall	.+0      	; 0x30a <delay_ms+0x8>
 30a:	00 d0       	rcall	.+0      	; 0x30c <delay_ms+0xa>
 30c:	cd b7       	in	r28, 0x3d	; 61
 30e:	de b7       	in	r29, 0x3e	; 62
 310:	9e 83       	std	Y+6, r25	; 0x06
 312:	8d 83       	std	Y+5, r24	; 0x05
 314:	1a 82       	std	Y+2, r1	; 0x02
 316:	19 82       	std	Y+1, r1	; 0x01
 318:	13 c0       	rjmp	.+38     	; 0x340 <delay_ms+0x3e>
 31a:	1c 82       	std	Y+4, r1	; 0x04
 31c:	1b 82       	std	Y+3, r1	; 0x03
 31e:	06 c0       	rjmp	.+12     	; 0x32c <delay_ms+0x2a>
 320:	00 00       	nop
 322:	8b 81       	ldd	r24, Y+3	; 0x03
 324:	9c 81       	ldd	r25, Y+4	; 0x04
 326:	01 96       	adiw	r24, 0x01	; 1
 328:	9c 83       	std	Y+4, r25	; 0x04
 32a:	8b 83       	std	Y+3, r24	; 0x03
 32c:	8b 81       	ldd	r24, Y+3	; 0x03
 32e:	9c 81       	ldd	r25, Y+4	; 0x04
 330:	87 30       	cpi	r24, 0x07	; 7
 332:	93 40       	sbci	r25, 0x03	; 3
 334:	ac f3       	brlt	.-22     	; 0x320 <delay_ms+0x1e>
 336:	89 81       	ldd	r24, Y+1	; 0x01
 338:	9a 81       	ldd	r25, Y+2	; 0x02
 33a:	01 96       	adiw	r24, 0x01	; 1
 33c:	9a 83       	std	Y+2, r25	; 0x02
 33e:	89 83       	std	Y+1, r24	; 0x01
 340:	29 81       	ldd	r18, Y+1	; 0x01
 342:	3a 81       	ldd	r19, Y+2	; 0x02
 344:	8d 81       	ldd	r24, Y+5	; 0x05
 346:	9e 81       	ldd	r25, Y+6	; 0x06
 348:	28 17       	cp	r18, r24
 34a:	39 07       	cpc	r19, r25
 34c:	34 f3       	brlt	.-52     	; 0x31a <delay_ms+0x18>
 34e:	00 00       	nop
 350:	26 96       	adiw	r28, 0x06	; 6
 352:	0f b6       	in	r0, 0x3f	; 63
 354:	f8 94       	cli
 356:	de bf       	out	0x3e, r29	; 62
 358:	0f be       	out	0x3f, r0	; 63
 35a:	cd bf       	out	0x3d, r28	; 61
 35c:	df 91       	pop	r29
 35e:	cf 91       	pop	r28
 360:	08 95       	ret

00000362 <LCD_WriteCommand>:
 362:	cf 93       	push	r28
 364:	df 93       	push	r29
 366:	1f 92       	push	r1
 368:	cd b7       	in	r28, 0x3d	; 61
 36a:	de b7       	in	r29, 0x3e	; 62
 36c:	89 83       	std	Y+1, r24	; 0x01
 36e:	88 e2       	ldi	r24, 0x28	; 40
 370:	90 e0       	ldi	r25, 0x00	; 0
 372:	28 e2       	ldi	r18, 0x28	; 40
 374:	30 e0       	ldi	r19, 0x00	; 0
 376:	f9 01       	movw	r30, r18
 378:	20 81       	ld	r18, Z
 37a:	2f 7b       	andi	r18, 0xBF	; 191
 37c:	fc 01       	movw	r30, r24
 37e:	20 83       	st	Z, r18
 380:	82 e2       	ldi	r24, 0x22	; 34
 382:	90 e0       	ldi	r25, 0x00	; 0
 384:	29 81       	ldd	r18, Y+1	; 0x01
 386:	fc 01       	movw	r30, r24
 388:	20 83       	st	Z, r18
 38a:	88 e2       	ldi	r24, 0x28	; 40
 38c:	90 e0       	ldi	r25, 0x00	; 0
 38e:	28 e2       	ldi	r18, 0x28	; 40
 390:	30 e0       	ldi	r19, 0x00	; 0
 392:	f9 01       	movw	r30, r18
 394:	20 81       	ld	r18, Z
 396:	20 68       	ori	r18, 0x80	; 128
 398:	fc 01       	movw	r30, r24
 39a:	20 83       	st	Z, r18
 39c:	00 00       	nop
 39e:	88 e2       	ldi	r24, 0x28	; 40
 3a0:	90 e0       	ldi	r25, 0x00	; 0
 3a2:	28 e2       	ldi	r18, 0x28	; 40
 3a4:	30 e0       	ldi	r19, 0x00	; 0
 3a6:	f9 01       	movw	r30, r18
 3a8:	20 81       	ld	r18, Z
 3aa:	2f 77       	andi	r18, 0x7F	; 127
 3ac:	fc 01       	movw	r30, r24
 3ae:	20 83       	st	Z, r18
 3b0:	82 e0       	ldi	r24, 0x02	; 2
 3b2:	90 e0       	ldi	r25, 0x00	; 0
 3b4:	a6 df       	rcall	.-180    	; 0x302 <delay_ms>
 3b6:	00 00       	nop
 3b8:	0f 90       	pop	r0
 3ba:	df 91       	pop	r29
 3bc:	cf 91       	pop	r28
 3be:	08 95       	ret

000003c0 <LCD_ClearScreen>:
 3c0:	cf 93       	push	r28
 3c2:	df 93       	push	r29
 3c4:	cd b7       	in	r28, 0x3d	; 61
 3c6:	de b7       	in	r29, 0x3e	; 62
 3c8:	81 e0       	ldi	r24, 0x01	; 1
 3ca:	cb df       	rcall	.-106    	; 0x362 <LCD_WriteCommand>
 3cc:	00 00       	nop
 3ce:	df 91       	pop	r29
 3d0:	cf 91       	pop	r28
 3d2:	08 95       	ret

000003d4 <LCD_init>:
 3d4:	cf 93       	push	r28
 3d6:	df 93       	push	r29
 3d8:	cd b7       	in	r28, 0x3d	; 61
 3da:	de b7       	in	r29, 0x3e	; 62
 3dc:	84 e6       	ldi	r24, 0x64	; 100
 3de:	90 e0       	ldi	r25, 0x00	; 0
 3e0:	90 df       	rcall	.-224    	; 0x302 <delay_ms>
 3e2:	88 e3       	ldi	r24, 0x38	; 56
 3e4:	be df       	rcall	.-132    	; 0x362 <LCD_WriteCommand>
 3e6:	86 e0       	ldi	r24, 0x06	; 6
 3e8:	bc df       	rcall	.-136    	; 0x362 <LCD_WriteCommand>
 3ea:	8f e0       	ldi	r24, 0x0F	; 15
 3ec:	ba df       	rcall	.-140    	; 0x362 <LCD_WriteCommand>
 3ee:	81 e0       	ldi	r24, 0x01	; 1
 3f0:	b8 df       	rcall	.-144    	; 0x362 <LCD_WriteCommand>
 3f2:	8a e0       	ldi	r24, 0x0A	; 10
 3f4:	90 e0       	ldi	r25, 0x00	; 0
 3f6:	85 df       	rcall	.-246    	; 0x302 <delay_ms>
 3f8:	00 00       	nop
 3fa:	df 91       	pop	r29
 3fc:	cf 91       	pop	r28
 3fe:	08 95       	ret

00000400 <SMTick1>:

//--------User defined FSMs---------------------------------------------------
//Enumeration of states.
enum SM1_States { SM1_wait, SM1_press, SM1_release };

int SMTick1(int state) {
 400:	cf 93       	push	r28
 402:	df 93       	push	r29
 404:	00 d0       	rcall	.+0      	; 0x406 <SMTick1+0x6>
 406:	cd b7       	in	r28, 0x3d	; 61
 408:	de b7       	in	r29, 0x3e	; 62
 40a:	9a 83       	std	Y+2, r25	; 0x02
 40c:	89 83       	std	Y+1, r24	; 0x01
	// Local Variables
	switch (state) {
 40e:	89 81       	ldd	r24, Y+1	; 0x01
 410:	9a 81       	ldd	r25, Y+2	; 0x02
 412:	00 97       	sbiw	r24, 0x00	; 0
 414:	19 f0       	breq	.+6      	; 0x41c <SMTick1+0x1c>
 416:	02 97       	sbiw	r24, 0x02	; 2
 418:	19 f0       	breq	.+6      	; 0x420 <SMTick1+0x20>
		case SM1_release:
		
		break;

		default:
		break;
 41a:	03 c0       	rjmp	.+6      	; 0x422 <SMTick1+0x22>
int SMTick1(int state) {
	// Local Variables
	switch (state) {
		case SM1_wait:
		
		break;
 41c:	00 00       	nop
 41e:	01 c0       	rjmp	.+2      	; 0x422 <SMTick1+0x22>
		SM1_press:
		break;

		case SM1_release:
		
		break;
 420:	00 00       	nop
		default:
		break;
	}

	//State machine actions
	switch(state) {
 422:	89 81       	ldd	r24, Y+1	; 0x01
 424:	9a 81       	ldd	r25, Y+2	; 0x02
 426:	81 30       	cpi	r24, 0x01	; 1
 428:	91 05       	cpc	r25, r1
 42a:	41 f0       	breq	.+16     	; 0x43c <SMTick1+0x3c>
 42c:	82 30       	cpi	r24, 0x02	; 2
 42e:	91 05       	cpc	r25, r1
 430:	39 f0       	breq	.+14     	; 0x440 <SMTick1+0x40>
 432:	89 2b       	or	r24, r25
 434:	39 f0       	breq	.+14     	; 0x444 <SMTick1+0x44>

		case SM1_release:
		break;

		default:
		state = SM1_wait;
 436:	1a 82       	std	Y+2, r1	; 0x02
 438:	19 82       	std	Y+1, r1	; 0x01
		break;
 43a:	05 c0       	rjmp	.+10     	; 0x446 <SMTick1+0x46>
		case SM1_wait:
		break;

		case SM1_press:
		
		break;
 43c:	00 00       	nop
 43e:	03 c0       	rjmp	.+6      	; 0x446 <SMTick1+0x46>

		case SM1_release:
		break;
 440:	00 00       	nop
 442:	01 c0       	rjmp	.+2      	; 0x446 <SMTick1+0x46>
	}

	//State machine actions
	switch(state) {
		case SM1_wait:
		break;
 444:	00 00       	nop
		default:
		state = SM1_wait;
		break;
	}
	
	return state;
 446:	89 81       	ldd	r24, Y+1	; 0x01
 448:	9a 81       	ldd	r25, Y+2	; 0x02
}
 44a:	0f 90       	pop	r0
 44c:	0f 90       	pop	r0
 44e:	df 91       	pop	r29
 450:	cf 91       	pop	r28
 452:	08 95       	ret

00000454 <main>:
}*/

// --------END User defined FSMs-----------------------------------------------

int main(void)
{
 454:	0f 93       	push	r16
 456:	1f 93       	push	r17
 458:	cf 93       	push	r28
 45a:	df 93       	push	r29
 45c:	cd b7       	in	r28, 0x3d	; 61
 45e:	de b7       	in	r29, 0x3e	; 62
 460:	aa 97       	sbiw	r28, 0x2a	; 42
 462:	0f b6       	in	r0, 0x3f	; 63
 464:	f8 94       	cli
 466:	de bf       	out	0x3e, r29	; 62
 468:	0f be       	out	0x3f, r0	; 63
 46a:	cd bf       	out	0x3d, r28	; 61
	MCUCR = (1<<JTD);
 46c:	85 e5       	ldi	r24, 0x55	; 85
 46e:	90 e0       	ldi	r25, 0x00	; 0
 470:	20 e8       	ldi	r18, 0x80	; 128
 472:	fc 01       	movw	r30, r24
 474:	20 83       	st	Z, r18
	MCUCR = (1<<JTD);
 476:	85 e5       	ldi	r24, 0x55	; 85
 478:	90 e0       	ldi	r25, 0x00	; 0
 47a:	20 e8       	ldi	r18, 0x80	; 128
 47c:	fc 01       	movw	r30, r24
 47e:	20 83       	st	Z, r18
	//unsigned char temp =0x00;	    // variable used to store received data
	DDRD = 0xF0; PORTC = 0x0F;
 480:	8a e2       	ldi	r24, 0x2A	; 42
 482:	90 e0       	ldi	r25, 0x00	; 0
 484:	20 ef       	ldi	r18, 0xF0	; 240
 486:	fc 01       	movw	r30, r24
 488:	20 83       	st	Z, r18
 48a:	88 e2       	ldi	r24, 0x28	; 40
 48c:	90 e0       	ldi	r25, 0x00	; 0
 48e:	2f e0       	ldi	r18, 0x0F	; 15
 490:	fc 01       	movw	r30, r24
 492:	20 83       	st	Z, r18
	//DDRC = 0xFF; PORTC = 0x00;
	//DDRA = 0xFF; PORTA = 0x00;
	//DDRB = 0xFF; PORTB = 0x00;
	DDRA = 0xFF; PORTA = 0x00; // LCD data lines
 494:	81 e2       	ldi	r24, 0x21	; 33
 496:	90 e0       	ldi	r25, 0x00	; 0
 498:	2f ef       	ldi	r18, 0xFF	; 255
 49a:	fc 01       	movw	r30, r24
 49c:	20 83       	st	Z, r18
 49e:	82 e2       	ldi	r24, 0x22	; 34
 4a0:	90 e0       	ldi	r25, 0x00	; 0
 4a2:	fc 01       	movw	r30, r24
 4a4:	10 82       	st	Z, r1
	DDRC = 0xFF; PORTC = 0x00; // LCD control lines
 4a6:	87 e2       	ldi	r24, 0x27	; 39
 4a8:	90 e0       	ldi	r25, 0x00	; 0
 4aa:	2f ef       	ldi	r18, 0xFF	; 255
 4ac:	fc 01       	movw	r30, r24
 4ae:	20 83       	st	Z, r18
 4b0:	88 e2       	ldi	r24, 0x28	; 40
 4b2:	90 e0       	ldi	r25, 0x00	; 0
 4b4:	fc 01       	movw	r30, r24
 4b6:	10 82       	st	Z, r1


	// Period for the tasks
	unsigned long int SMTick1_calc = 50;
 4b8:	82 e3       	ldi	r24, 0x32	; 50
 4ba:	90 e0       	ldi	r25, 0x00	; 0
 4bc:	a0 e0       	ldi	r26, 0x00	; 0
 4be:	b0 e0       	ldi	r27, 0x00	; 0
 4c0:	8b 83       	std	Y+3, r24	; 0x03
 4c2:	9c 83       	std	Y+4, r25	; 0x04
 4c4:	ad 83       	std	Y+5, r26	; 0x05
 4c6:	be 83       	std	Y+6, r27	; 0x06
	unsigned long int SMTick2_calc = 100;
 4c8:	84 e6       	ldi	r24, 0x64	; 100
 4ca:	90 e0       	ldi	r25, 0x00	; 0
 4cc:	a0 e0       	ldi	r26, 0x00	; 0
 4ce:	b0 e0       	ldi	r27, 0x00	; 0
 4d0:	8f 83       	std	Y+7, r24	; 0x07
 4d2:	98 87       	std	Y+8, r25	; 0x08
 4d4:	a9 87       	std	Y+9, r26	; 0x09
 4d6:	ba 87       	std	Y+10, r27	; 0x0a
	unsigned long int SMTick3_calc = 50;
 4d8:	82 e3       	ldi	r24, 0x32	; 50
 4da:	90 e0       	ldi	r25, 0x00	; 0
 4dc:	a0 e0       	ldi	r26, 0x00	; 0
 4de:	b0 e0       	ldi	r27, 0x00	; 0
 4e0:	8b 87       	std	Y+11, r24	; 0x0b
 4e2:	9c 87       	std	Y+12, r25	; 0x0c
 4e4:	ad 87       	std	Y+13, r26	; 0x0d
 4e6:	be 87       	std	Y+14, r27	; 0x0e

	//Calculating GCD
	unsigned long int tmpGCD = 1;
 4e8:	81 e0       	ldi	r24, 0x01	; 1
 4ea:	90 e0       	ldi	r25, 0x00	; 0
 4ec:	a0 e0       	ldi	r26, 0x00	; 0
 4ee:	b0 e0       	ldi	r27, 0x00	; 0
 4f0:	8f 87       	std	Y+15, r24	; 0x0f
 4f2:	98 8b       	std	Y+16, r25	; 0x10
 4f4:	a9 8b       	std	Y+17, r26	; 0x11
 4f6:	ba 8b       	std	Y+18, r27	; 0x12
	tmpGCD = findGCD(SMTick1_calc, SMTick2_calc);
 4f8:	2f 81       	ldd	r18, Y+7	; 0x07
 4fa:	38 85       	ldd	r19, Y+8	; 0x08
 4fc:	49 85       	ldd	r20, Y+9	; 0x09
 4fe:	5a 85       	ldd	r21, Y+10	; 0x0a
 500:	8b 81       	ldd	r24, Y+3	; 0x03
 502:	9c 81       	ldd	r25, Y+4	; 0x04
 504:	ad 81       	ldd	r26, Y+5	; 0x05
 506:	be 81       	ldd	r27, Y+6	; 0x06
 508:	bc 01       	movw	r22, r24
 50a:	cd 01       	movw	r24, r26
 50c:	ae de       	rcall	.-676    	; 0x26a <findGCD>
 50e:	dc 01       	movw	r26, r24
 510:	cb 01       	movw	r24, r22
 512:	8f 87       	std	Y+15, r24	; 0x0f
 514:	98 8b       	std	Y+16, r25	; 0x10
 516:	a9 8b       	std	Y+17, r26	; 0x11
 518:	ba 8b       	std	Y+18, r27	; 0x12
	tmpGCD = findGCD(tmpGCD, SMTick3_calc);
 51a:	2b 85       	ldd	r18, Y+11	; 0x0b
 51c:	3c 85       	ldd	r19, Y+12	; 0x0c
 51e:	4d 85       	ldd	r20, Y+13	; 0x0d
 520:	5e 85       	ldd	r21, Y+14	; 0x0e
 522:	8f 85       	ldd	r24, Y+15	; 0x0f
 524:	98 89       	ldd	r25, Y+16	; 0x10
 526:	a9 89       	ldd	r26, Y+17	; 0x11
 528:	ba 89       	ldd	r27, Y+18	; 0x12
 52a:	bc 01       	movw	r22, r24
 52c:	cd 01       	movw	r24, r26
 52e:	9d de       	rcall	.-710    	; 0x26a <findGCD>
 530:	dc 01       	movw	r26, r24
 532:	cb 01       	movw	r24, r22
 534:	8f 87       	std	Y+15, r24	; 0x0f
 536:	98 8b       	std	Y+16, r25	; 0x10
 538:	a9 8b       	std	Y+17, r26	; 0x11
 53a:	ba 8b       	std	Y+18, r27	; 0x12

	//Greatest common divisor for all tasks or smallest time unit for tasks.
	unsigned long int GCD = tmpGCD;
 53c:	8f 85       	ldd	r24, Y+15	; 0x0f
 53e:	98 89       	ldd	r25, Y+16	; 0x10
 540:	a9 89       	ldd	r26, Y+17	; 0x11
 542:	ba 89       	ldd	r27, Y+18	; 0x12
 544:	8b 8b       	std	Y+19, r24	; 0x13
 546:	9c 8b       	std	Y+20, r25	; 0x14
 548:	ad 8b       	std	Y+21, r26	; 0x15
 54a:	be 8b       	std	Y+22, r27	; 0x16

	//Recalculate GCD periods for scheduler
	unsigned long int SMTick1_period = SMTick1_calc/GCD;
 54c:	8b 81       	ldd	r24, Y+3	; 0x03
 54e:	9c 81       	ldd	r25, Y+4	; 0x04
 550:	ad 81       	ldd	r26, Y+5	; 0x05
 552:	be 81       	ldd	r27, Y+6	; 0x06
 554:	2b 89       	ldd	r18, Y+19	; 0x13
 556:	3c 89       	ldd	r19, Y+20	; 0x14
 558:	4d 89       	ldd	r20, Y+21	; 0x15
 55a:	5e 89       	ldd	r21, Y+22	; 0x16
 55c:	bc 01       	movw	r22, r24
 55e:	cd 01       	movw	r24, r26
 560:	0e d1       	rcall	.+540    	; 0x77e <__udivmodsi4>
 562:	da 01       	movw	r26, r20
 564:	c9 01       	movw	r24, r18
 566:	8f 8b       	std	Y+23, r24	; 0x17
 568:	98 8f       	std	Y+24, r25	; 0x18
 56a:	a9 8f       	std	Y+25, r26	; 0x19
 56c:	ba 8f       	std	Y+26, r27	; 0x1a
	unsigned long int SMTick2_period = SMTick2_calc/GCD;
 56e:	8f 81       	ldd	r24, Y+7	; 0x07
 570:	98 85       	ldd	r25, Y+8	; 0x08
 572:	a9 85       	ldd	r26, Y+9	; 0x09
 574:	ba 85       	ldd	r27, Y+10	; 0x0a
 576:	2b 89       	ldd	r18, Y+19	; 0x13
 578:	3c 89       	ldd	r19, Y+20	; 0x14
 57a:	4d 89       	ldd	r20, Y+21	; 0x15
 57c:	5e 89       	ldd	r21, Y+22	; 0x16
 57e:	bc 01       	movw	r22, r24
 580:	cd 01       	movw	r24, r26
 582:	fd d0       	rcall	.+506    	; 0x77e <__udivmodsi4>
 584:	da 01       	movw	r26, r20
 586:	c9 01       	movw	r24, r18
 588:	8b 8f       	std	Y+27, r24	; 0x1b
 58a:	9c 8f       	std	Y+28, r25	; 0x1c
 58c:	ad 8f       	std	Y+29, r26	; 0x1d
 58e:	be 8f       	std	Y+30, r27	; 0x1e
	unsigned long int SMTick3_period = SMTick3_calc/GCD;
 590:	8b 85       	ldd	r24, Y+11	; 0x0b
 592:	9c 85       	ldd	r25, Y+12	; 0x0c
 594:	ad 85       	ldd	r26, Y+13	; 0x0d
 596:	be 85       	ldd	r27, Y+14	; 0x0e
 598:	2b 89       	ldd	r18, Y+19	; 0x13
 59a:	3c 89       	ldd	r19, Y+20	; 0x14
 59c:	4d 89       	ldd	r20, Y+21	; 0x15
 59e:	5e 89       	ldd	r21, Y+22	; 0x16
 5a0:	bc 01       	movw	r22, r24
 5a2:	cd 01       	movw	r24, r26
 5a4:	ec d0       	rcall	.+472    	; 0x77e <__udivmodsi4>
 5a6:	da 01       	movw	r26, r20
 5a8:	c9 01       	movw	r24, r18
 5aa:	8f 8f       	std	Y+31, r24	; 0x1f
 5ac:	98 a3       	std	Y+32, r25	; 0x20
 5ae:	a9 a3       	std	Y+33, r26	; 0x21
 5b0:	ba a3       	std	Y+34, r27	; 0x22
		
	//Declare an array of tasks
	static task task1, task2, task3;
	task *tasks[] = { &task1, &task2, &task3 };
 5b2:	86 e0       	ldi	r24, 0x06	; 6
 5b4:	e4 e0       	ldi	r30, 0x04	; 4
 5b6:	f1 e0       	ldi	r31, 0x01	; 1
 5b8:	de 01       	movw	r26, r28
 5ba:	95 96       	adiw	r26, 0x25	; 37
 5bc:	01 90       	ld	r0, Z+
 5be:	0d 92       	st	X+, r0
 5c0:	8a 95       	dec	r24
 5c2:	e1 f7       	brne	.-8      	; 0x5bc <main+0x168>
	const unsigned short numTasks = sizeof(tasks)/sizeof(task*);
 5c4:	83 e0       	ldi	r24, 0x03	; 3
 5c6:	90 e0       	ldi	r25, 0x00	; 0
 5c8:	9c a3       	std	Y+36, r25	; 0x24
 5ca:	8b a3       	std	Y+35, r24	; 0x23

	// Task 1
	task1.state = -1;//Task initial state.
 5cc:	8f ef       	ldi	r24, 0xFF	; 255
 5ce:	80 93 0f 01 	sts	0x010F, r24	; 0x80010f <task1.2108>
	task1.period = SMTick1_period;//Task Period.
 5d2:	8f 89       	ldd	r24, Y+23	; 0x17
 5d4:	98 8d       	ldd	r25, Y+24	; 0x18
 5d6:	a9 8d       	ldd	r26, Y+25	; 0x19
 5d8:	ba 8d       	ldd	r27, Y+26	; 0x1a
 5da:	80 93 10 01 	sts	0x0110, r24	; 0x800110 <task1.2108+0x1>
 5de:	90 93 11 01 	sts	0x0111, r25	; 0x800111 <task1.2108+0x2>
 5e2:	a0 93 12 01 	sts	0x0112, r26	; 0x800112 <task1.2108+0x3>
 5e6:	b0 93 13 01 	sts	0x0113, r27	; 0x800113 <task1.2108+0x4>
	task1.elapsedTime = SMTick1_period;//Task current elapsed time.
 5ea:	8f 89       	ldd	r24, Y+23	; 0x17
 5ec:	98 8d       	ldd	r25, Y+24	; 0x18
 5ee:	a9 8d       	ldd	r26, Y+25	; 0x19
 5f0:	ba 8d       	ldd	r27, Y+26	; 0x1a
 5f2:	80 93 14 01 	sts	0x0114, r24	; 0x800114 <task1.2108+0x5>
 5f6:	90 93 15 01 	sts	0x0115, r25	; 0x800115 <task1.2108+0x6>
 5fa:	a0 93 16 01 	sts	0x0116, r26	; 0x800116 <task1.2108+0x7>
 5fe:	b0 93 17 01 	sts	0x0117, r27	; 0x800117 <task1.2108+0x8>
	task1.TickFct = &SMTick1;//Function pointer for the tick.
 602:	80 e0       	ldi	r24, 0x00	; 0
 604:	92 e0       	ldi	r25, 0x02	; 2
 606:	90 93 19 01 	sts	0x0119, r25	; 0x800119 <task1.2108+0xa>
 60a:	80 93 18 01 	sts	0x0118, r24	; 0x800118 <task1.2108+0x9>
	//task3.state = -1;//Task initial state.
	//task3.period = SMTick3_period;//Task Period.
	//task3.elapsedTime = SMTick3_period; // Task current elasped time.
	//task3.TickFct = &SMTick3; // Function pointer for the tick.
	// Set the timer and turn it on
	TimerSet(GCD);
 60e:	8b 89       	ldd	r24, Y+19	; 0x13
 610:	9c 89       	ldd	r25, Y+20	; 0x14
 612:	ad 89       	ldd	r26, Y+21	; 0x15
 614:	be 89       	ldd	r27, Y+22	; 0x16
	TimerOn();
 616:	bc 01       	movw	r22, r24
 618:	cd 01       	movw	r24, r26

	LCD_init();
 61a:	56 dd       	rcall	.-1364   	; 0xc8 <TimerSet>
 61c:	83 dd       	rcall	.-1274   	; 0x124 <TimerOn>
	LCD_ClearScreen(); 
 61e:	da de       	rcall	.-588    	; 0x3d4 <LCD_init>
 620:	cf de       	rcall	.-610    	; 0x3c0 <LCD_ClearScreen>
		case '0': LCD_ClearScreen(); LCD_DisplayString(1, "0"); break;
		case '#': LCD_ClearScreen(); LCD_DisplayString(1, "#"); break;
		default: break; // Should never occur. Middle LED off.
	}*/
		
		for ( i = 0; i < numTasks; i++ ) {
 622:	1a 82       	std	Y+2, r1	; 0x02
 624:	19 82       	std	Y+1, r1	; 0x01
 626:	9b c0       	rjmp	.+310    	; 0x75e <main+0x30a>
			// Task is ready to tick
			if ( tasks[i]->elapsedTime == tasks[i]->period ) {
 628:	89 81       	ldd	r24, Y+1	; 0x01
 62a:	9a 81       	ldd	r25, Y+2	; 0x02
 62c:	88 0f       	add	r24, r24
 62e:	99 1f       	adc	r25, r25
 630:	9e 01       	movw	r18, r28
 632:	2f 5f       	subi	r18, 0xFF	; 255
 634:	3f 4f       	sbci	r19, 0xFF	; 255
 636:	82 0f       	add	r24, r18
 638:	93 1f       	adc	r25, r19
 63a:	84 96       	adiw	r24, 0x24	; 36
 63c:	fc 01       	movw	r30, r24
 63e:	80 81       	ld	r24, Z
 640:	91 81       	ldd	r25, Z+1	; 0x01
 642:	fc 01       	movw	r30, r24
 644:	25 81       	ldd	r18, Z+5	; 0x05
 646:	36 81       	ldd	r19, Z+6	; 0x06
 648:	47 81       	ldd	r20, Z+7	; 0x07
 64a:	50 85       	ldd	r21, Z+8	; 0x08
 64c:	89 81       	ldd	r24, Y+1	; 0x01
 64e:	9a 81       	ldd	r25, Y+2	; 0x02
 650:	88 0f       	add	r24, r24
 652:	99 1f       	adc	r25, r25
 654:	be 01       	movw	r22, r28
 656:	6f 5f       	subi	r22, 0xFF	; 255
 658:	7f 4f       	sbci	r23, 0xFF	; 255
 65a:	86 0f       	add	r24, r22
 65c:	97 1f       	adc	r25, r23
 65e:	84 96       	adiw	r24, 0x24	; 36
 660:	fc 01       	movw	r30, r24
 662:	80 81       	ld	r24, Z
 664:	91 81       	ldd	r25, Z+1	; 0x01
 666:	fc 01       	movw	r30, r24
 668:	81 81       	ldd	r24, Z+1	; 0x01
 66a:	92 81       	ldd	r25, Z+2	; 0x02
 66c:	a3 81       	ldd	r26, Z+3	; 0x03
 66e:	b4 81       	ldd	r27, Z+4	; 0x04
 670:	28 17       	cp	r18, r24
 672:	39 07       	cpc	r19, r25
 674:	4a 07       	cpc	r20, r26
 676:	5b 07       	cpc	r21, r27
 678:	09 f0       	breq	.+2      	; 0x67c <main+0x228>
 67a:	45 c0       	rjmp	.+138    	; 0x706 <main+0x2b2>
				// Setting next state for task
				tasks[i]->state = tasks[i]->TickFct(tasks[i]->state);
 67c:	89 81       	ldd	r24, Y+1	; 0x01
 67e:	9a 81       	ldd	r25, Y+2	; 0x02
 680:	88 0f       	add	r24, r24
 682:	99 1f       	adc	r25, r25
 684:	9e 01       	movw	r18, r28
 686:	2f 5f       	subi	r18, 0xFF	; 255
 688:	3f 4f       	sbci	r19, 0xFF	; 255
 68a:	82 0f       	add	r24, r18
 68c:	93 1f       	adc	r25, r19
 68e:	84 96       	adiw	r24, 0x24	; 36
 690:	fc 01       	movw	r30, r24
 692:	00 81       	ld	r16, Z
 694:	11 81       	ldd	r17, Z+1	; 0x01
 696:	89 81       	ldd	r24, Y+1	; 0x01
 698:	9a 81       	ldd	r25, Y+2	; 0x02
 69a:	88 0f       	add	r24, r24
 69c:	99 1f       	adc	r25, r25
 69e:	9e 01       	movw	r18, r28
 6a0:	2f 5f       	subi	r18, 0xFF	; 255
 6a2:	3f 4f       	sbci	r19, 0xFF	; 255
 6a4:	82 0f       	add	r24, r18
 6a6:	93 1f       	adc	r25, r19
 6a8:	84 96       	adiw	r24, 0x24	; 36
 6aa:	fc 01       	movw	r30, r24
 6ac:	80 81       	ld	r24, Z
 6ae:	91 81       	ldd	r25, Z+1	; 0x01
 6b0:	fc 01       	movw	r30, r24
 6b2:	21 85       	ldd	r18, Z+9	; 0x09
 6b4:	32 85       	ldd	r19, Z+10	; 0x0a
 6b6:	89 81       	ldd	r24, Y+1	; 0x01
 6b8:	9a 81       	ldd	r25, Y+2	; 0x02
 6ba:	88 0f       	add	r24, r24
 6bc:	99 1f       	adc	r25, r25
 6be:	ae 01       	movw	r20, r28
 6c0:	4f 5f       	subi	r20, 0xFF	; 255
 6c2:	5f 4f       	sbci	r21, 0xFF	; 255
 6c4:	84 0f       	add	r24, r20
 6c6:	95 1f       	adc	r25, r21
 6c8:	84 96       	adiw	r24, 0x24	; 36
 6ca:	fc 01       	movw	r30, r24
 6cc:	80 81       	ld	r24, Z
 6ce:	91 81       	ldd	r25, Z+1	; 0x01
 6d0:	fc 01       	movw	r30, r24
 6d2:	80 81       	ld	r24, Z
 6d4:	08 2e       	mov	r0, r24
 6d6:	00 0c       	add	r0, r0
 6d8:	99 0b       	sbc	r25, r25
 6da:	f9 01       	movw	r30, r18
 6dc:	09 95       	icall
 6de:	f8 01       	movw	r30, r16
 6e0:	80 83       	st	Z, r24
				// Reset the elapsed time for next tick.
				tasks[i]->elapsedTime = 0;
 6e2:	89 81       	ldd	r24, Y+1	; 0x01
 6e4:	9a 81       	ldd	r25, Y+2	; 0x02
 6e6:	88 0f       	add	r24, r24
 6e8:	99 1f       	adc	r25, r25
 6ea:	9e 01       	movw	r18, r28
 6ec:	2f 5f       	subi	r18, 0xFF	; 255
 6ee:	3f 4f       	sbci	r19, 0xFF	; 255
 6f0:	82 0f       	add	r24, r18
 6f2:	93 1f       	adc	r25, r19
 6f4:	84 96       	adiw	r24, 0x24	; 36
 6f6:	fc 01       	movw	r30, r24
 6f8:	80 81       	ld	r24, Z
 6fa:	91 81       	ldd	r25, Z+1	; 0x01
 6fc:	fc 01       	movw	r30, r24
 6fe:	15 82       	std	Z+5, r1	; 0x05
 700:	16 82       	std	Z+6, r1	; 0x06
 702:	17 82       	std	Z+7, r1	; 0x07
 704:	10 86       	std	Z+8, r1	; 0x08
			}
			tasks[i]->elapsedTime += 1;
 706:	89 81       	ldd	r24, Y+1	; 0x01
 708:	9a 81       	ldd	r25, Y+2	; 0x02
 70a:	88 0f       	add	r24, r24
 70c:	99 1f       	adc	r25, r25
 70e:	9e 01       	movw	r18, r28
 710:	2f 5f       	subi	r18, 0xFF	; 255
 712:	3f 4f       	sbci	r19, 0xFF	; 255
 714:	82 0f       	add	r24, r18
 716:	93 1f       	adc	r25, r19
 718:	84 96       	adiw	r24, 0x24	; 36
 71a:	fc 01       	movw	r30, r24
 71c:	20 81       	ld	r18, Z
 71e:	31 81       	ldd	r19, Z+1	; 0x01
 720:	89 81       	ldd	r24, Y+1	; 0x01
 722:	9a 81       	ldd	r25, Y+2	; 0x02
 724:	88 0f       	add	r24, r24
 726:	99 1f       	adc	r25, r25
 728:	ae 01       	movw	r20, r28
 72a:	4f 5f       	subi	r20, 0xFF	; 255
 72c:	5f 4f       	sbci	r21, 0xFF	; 255
 72e:	84 0f       	add	r24, r20
 730:	95 1f       	adc	r25, r21
 732:	84 96       	adiw	r24, 0x24	; 36
 734:	fc 01       	movw	r30, r24
 736:	80 81       	ld	r24, Z
 738:	91 81       	ldd	r25, Z+1	; 0x01
 73a:	fc 01       	movw	r30, r24
 73c:	85 81       	ldd	r24, Z+5	; 0x05
 73e:	96 81       	ldd	r25, Z+6	; 0x06
 740:	a7 81       	ldd	r26, Z+7	; 0x07
 742:	b0 85       	ldd	r27, Z+8	; 0x08
 744:	01 96       	adiw	r24, 0x01	; 1
 746:	a1 1d       	adc	r26, r1
 748:	b1 1d       	adc	r27, r1
 74a:	f9 01       	movw	r30, r18
 74c:	85 83       	std	Z+5, r24	; 0x05
 74e:	96 83       	std	Z+6, r25	; 0x06
 750:	a7 83       	std	Z+7, r26	; 0x07
 752:	b0 87       	std	Z+8, r27	; 0x08
		case '0': LCD_ClearScreen(); LCD_DisplayString(1, "0"); break;
		case '#': LCD_ClearScreen(); LCD_DisplayString(1, "#"); break;
		default: break; // Should never occur. Middle LED off.
	}*/
		
		for ( i = 0; i < numTasks; i++ ) {
 754:	89 81       	ldd	r24, Y+1	; 0x01
 756:	9a 81       	ldd	r25, Y+2	; 0x02
 758:	01 96       	adiw	r24, 0x01	; 1
 75a:	9a 83       	std	Y+2, r25	; 0x02
 75c:	89 83       	std	Y+1, r24	; 0x01
 75e:	29 81       	ldd	r18, Y+1	; 0x01
 760:	3a 81       	ldd	r19, Y+2	; 0x02
 762:	8b a1       	ldd	r24, Y+35	; 0x23
 764:	9c a1       	ldd	r25, Y+36	; 0x24
 766:	28 17       	cp	r18, r24
 768:	39 07       	cpc	r19, r25
 76a:	08 f4       	brcc	.+2      	; 0x76e <main+0x31a>
 76c:	5d cf       	rjmp	.-326    	; 0x628 <main+0x1d4>
				// Reset the elapsed time for next tick.
				tasks[i]->elapsedTime = 0;
			}
			tasks[i]->elapsedTime += 1;
		}
		while(!TimerFlag);
 76e:	00 00       	nop
 770:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <__data_end>
 774:	88 23       	and	r24, r24
 776:	e1 f3       	breq	.-8      	; 0x770 <main+0x31c>
		TimerFlag = 0;
 778:	10 92 0a 01 	sts	0x010A, r1	; 0x80010a <__data_end>

	}
 77c:	52 cf       	rjmp	.-348    	; 0x622 <main+0x1ce>

0000077e <__udivmodsi4>:
 77e:	a1 e2       	ldi	r26, 0x21	; 33
 780:	1a 2e       	mov	r1, r26
 782:	aa 1b       	sub	r26, r26
 784:	bb 1b       	sub	r27, r27
 786:	fd 01       	movw	r30, r26
 788:	0d c0       	rjmp	.+26     	; 0x7a4 <__udivmodsi4_ep>

0000078a <__udivmodsi4_loop>:
 78a:	aa 1f       	adc	r26, r26
 78c:	bb 1f       	adc	r27, r27
 78e:	ee 1f       	adc	r30, r30
 790:	ff 1f       	adc	r31, r31
 792:	a2 17       	cp	r26, r18
 794:	b3 07       	cpc	r27, r19
 796:	e4 07       	cpc	r30, r20
 798:	f5 07       	cpc	r31, r21
 79a:	20 f0       	brcs	.+8      	; 0x7a4 <__udivmodsi4_ep>
 79c:	a2 1b       	sub	r26, r18
 79e:	b3 0b       	sbc	r27, r19
 7a0:	e4 0b       	sbc	r30, r20
 7a2:	f5 0b       	sbc	r31, r21

000007a4 <__udivmodsi4_ep>:
 7a4:	66 1f       	adc	r22, r22
 7a6:	77 1f       	adc	r23, r23
 7a8:	88 1f       	adc	r24, r24
 7aa:	99 1f       	adc	r25, r25
 7ac:	1a 94       	dec	r1
 7ae:	69 f7       	brne	.-38     	; 0x78a <__udivmodsi4_loop>
 7b0:	60 95       	com	r22
 7b2:	70 95       	com	r23
 7b4:	80 95       	com	r24
 7b6:	90 95       	com	r25
 7b8:	9b 01       	movw	r18, r22
 7ba:	ac 01       	movw	r20, r24
 7bc:	bd 01       	movw	r22, r26
 7be:	cf 01       	movw	r24, r30
 7c0:	08 95       	ret

000007c2 <_exit>:
 7c2:	f8 94       	cli

000007c4 <__stop_program>:
 7c4:	ff cf       	rjmp	.-2      	; 0x7c4 <__stop_program>
