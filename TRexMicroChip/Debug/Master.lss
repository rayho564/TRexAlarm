
Master.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000014  00800100  0000089a  0000092e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000089a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000012  00800114  00800114  00000942  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000942  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000974  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000098  00000000  00000000  000009b4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000cca  00000000  00000000  00000a4c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000008fb  00000000  00000000  00001716  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000075c  00000000  00000000  00002011  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000258  00000000  00000000  00002770  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000005c6  00000000  00000000  000029c8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000004ff  00000000  00000000  00002f8e  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000088  00000000  00000000  0000348d  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	60 c0       	rjmp	.+192    	; 0xc6 <__bad_interrupt>
   6:	00 00       	nop
   8:	5e c0       	rjmp	.+188    	; 0xc6 <__bad_interrupt>
   a:	00 00       	nop
   c:	5c c0       	rjmp	.+184    	; 0xc6 <__bad_interrupt>
   e:	00 00       	nop
  10:	5a c0       	rjmp	.+180    	; 0xc6 <__bad_interrupt>
  12:	00 00       	nop
  14:	58 c0       	rjmp	.+176    	; 0xc6 <__bad_interrupt>
  16:	00 00       	nop
  18:	56 c0       	rjmp	.+172    	; 0xc6 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	54 c0       	rjmp	.+168    	; 0xc6 <__bad_interrupt>
  1e:	00 00       	nop
  20:	52 c0       	rjmp	.+164    	; 0xc6 <__bad_interrupt>
  22:	00 00       	nop
  24:	50 c0       	rjmp	.+160    	; 0xc6 <__bad_interrupt>
  26:	00 00       	nop
  28:	4e c0       	rjmp	.+156    	; 0xc6 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	4c c0       	rjmp	.+152    	; 0xc6 <__bad_interrupt>
  2e:	00 00       	nop
  30:	4a c0       	rjmp	.+148    	; 0xc6 <__bad_interrupt>
  32:	00 00       	nop
  34:	16 c2       	rjmp	.+1068   	; 0x462 <__vector_13>
  36:	00 00       	nop
  38:	46 c0       	rjmp	.+140    	; 0xc6 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	44 c0       	rjmp	.+136    	; 0xc6 <__bad_interrupt>
  3e:	00 00       	nop
  40:	42 c0       	rjmp	.+132    	; 0xc6 <__bad_interrupt>
  42:	00 00       	nop
  44:	40 c0       	rjmp	.+128    	; 0xc6 <__bad_interrupt>
  46:	00 00       	nop
  48:	3e c0       	rjmp	.+124    	; 0xc6 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	3c c0       	rjmp	.+120    	; 0xc6 <__bad_interrupt>
  4e:	00 00       	nop
  50:	3a c0       	rjmp	.+116    	; 0xc6 <__bad_interrupt>
  52:	00 00       	nop
  54:	38 c0       	rjmp	.+112    	; 0xc6 <__bad_interrupt>
  56:	00 00       	nop
  58:	36 c0       	rjmp	.+108    	; 0xc6 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	34 c0       	rjmp	.+104    	; 0xc6 <__bad_interrupt>
  5e:	00 00       	nop
  60:	32 c0       	rjmp	.+100    	; 0xc6 <__bad_interrupt>
  62:	00 00       	nop
  64:	30 c0       	rjmp	.+96     	; 0xc6 <__bad_interrupt>
  66:	00 00       	nop
  68:	2e c0       	rjmp	.+92     	; 0xc6 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	2c c0       	rjmp	.+88     	; 0xc6 <__bad_interrupt>
  6e:	00 00       	nop
  70:	2a c0       	rjmp	.+84     	; 0xc6 <__bad_interrupt>
  72:	00 00       	nop
  74:	28 c0       	rjmp	.+80     	; 0xc6 <__bad_interrupt>
  76:	00 00       	nop
  78:	26 c0       	rjmp	.+76     	; 0xc6 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	24 c0       	rjmp	.+72     	; 0xc6 <__bad_interrupt>
  7e:	00 00       	nop
  80:	22 c0       	rjmp	.+68     	; 0xc6 <__bad_interrupt>
  82:	00 00       	nop
  84:	20 c0       	rjmp	.+64     	; 0xc6 <__bad_interrupt>
  86:	00 00       	nop
  88:	1e c0       	rjmp	.+60     	; 0xc6 <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e4       	ldi	r29, 0x40	; 64
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	ea e9       	ldi	r30, 0x9A	; 154
  a0:	f8 e0       	ldi	r31, 0x08	; 8
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	a4 31       	cpi	r26, 0x14	; 20
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
  b2:	21 e0       	ldi	r18, 0x01	; 1
  b4:	a4 e1       	ldi	r26, 0x14	; 20
  b6:	b1 e0       	ldi	r27, 0x01	; 1
  b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
  ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
  bc:	a6 32       	cpi	r26, 0x26	; 38
  be:	b2 07       	cpc	r27, r18
  c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
  c2:	f4 d2       	rcall	.+1512   	; 0x6ac <main>
  c4:	e8 c3       	rjmp	.+2000   	; 0x896 <_exit>

000000c6 <__bad_interrupt>:
  c6:	9c cf       	rjmp	.-200    	; 0x0 <__vectors>

000000c8 <initUSART>:
	SREG |= 0x80;	// 0x80: 1000000
}

void TimerOff() {
	TCCR1B 	= 0x00; // bit3bit2bit1bit0=0000: timer off
}
  c8:	cf 93       	push	r28
  ca:	df 93       	push	r29
  cc:	1f 92       	push	r1
  ce:	cd b7       	in	r28, 0x3d	; 61
  d0:	de b7       	in	r29, 0x3e	; 62
  d2:	89 83       	std	Y+1, r24	; 0x01
  d4:	89 81       	ldd	r24, Y+1	; 0x01
  d6:	81 30       	cpi	r24, 0x01	; 1
  d8:	e1 f0       	breq	.+56     	; 0x112 <initUSART+0x4a>
  da:	81 ec       	ldi	r24, 0xC1	; 193
  dc:	90 e0       	ldi	r25, 0x00	; 0
  de:	21 ec       	ldi	r18, 0xC1	; 193
  e0:	30 e0       	ldi	r19, 0x00	; 0
  e2:	f9 01       	movw	r30, r18
  e4:	20 81       	ld	r18, Z
  e6:	28 61       	ori	r18, 0x18	; 24
  e8:	fc 01       	movw	r30, r24
  ea:	20 83       	st	Z, r18
  ec:	82 ec       	ldi	r24, 0xC2	; 194
  ee:	90 e0       	ldi	r25, 0x00	; 0
  f0:	22 ec       	ldi	r18, 0xC2	; 194
  f2:	30 e0       	ldi	r19, 0x00	; 0
  f4:	f9 01       	movw	r30, r18
  f6:	20 81       	ld	r18, Z
  f8:	26 60       	ori	r18, 0x06	; 6
  fa:	fc 01       	movw	r30, r24
  fc:	20 83       	st	Z, r18
  fe:	84 ec       	ldi	r24, 0xC4	; 196
 100:	90 e0       	ldi	r25, 0x00	; 0
 102:	23 e3       	ldi	r18, 0x33	; 51
 104:	fc 01       	movw	r30, r24
 106:	20 83       	st	Z, r18
 108:	85 ec       	ldi	r24, 0xC5	; 197
 10a:	90 e0       	ldi	r25, 0x00	; 0
 10c:	fc 01       	movw	r30, r24
 10e:	10 82       	st	Z, r1
 110:	1b c0       	rjmp	.+54     	; 0x148 <initUSART+0x80>
 112:	89 ec       	ldi	r24, 0xC9	; 201
 114:	90 e0       	ldi	r25, 0x00	; 0
 116:	29 ec       	ldi	r18, 0xC9	; 201
 118:	30 e0       	ldi	r19, 0x00	; 0
 11a:	f9 01       	movw	r30, r18
 11c:	20 81       	ld	r18, Z
 11e:	28 61       	ori	r18, 0x18	; 24
 120:	fc 01       	movw	r30, r24
 122:	20 83       	st	Z, r18
 124:	8a ec       	ldi	r24, 0xCA	; 202
 126:	90 e0       	ldi	r25, 0x00	; 0
 128:	2a ec       	ldi	r18, 0xCA	; 202
 12a:	30 e0       	ldi	r19, 0x00	; 0
 12c:	f9 01       	movw	r30, r18
 12e:	20 81       	ld	r18, Z
 130:	26 60       	ori	r18, 0x06	; 6
 132:	fc 01       	movw	r30, r24
 134:	20 83       	st	Z, r18
 136:	8c ec       	ldi	r24, 0xCC	; 204
 138:	90 e0       	ldi	r25, 0x00	; 0
 13a:	23 e3       	ldi	r18, 0x33	; 51
 13c:	fc 01       	movw	r30, r24
 13e:	20 83       	st	Z, r18
 140:	8d ec       	ldi	r24, 0xCD	; 205
 142:	90 e0       	ldi	r25, 0x00	; 0
 144:	fc 01       	movw	r30, r24
 146:	10 82       	st	Z, r1
 148:	00 00       	nop
 14a:	0f 90       	pop	r0
 14c:	df 91       	pop	r29
 14e:	cf 91       	pop	r28
 150:	08 95       	ret

00000152 <USART_IsSendReady>:
 152:	cf 93       	push	r28
 154:	df 93       	push	r29
 156:	1f 92       	push	r1
 158:	cd b7       	in	r28, 0x3d	; 61
 15a:	de b7       	in	r29, 0x3e	; 62
 15c:	89 83       	std	Y+1, r24	; 0x01
 15e:	89 81       	ldd	r24, Y+1	; 0x01
 160:	81 30       	cpi	r24, 0x01	; 1
 162:	31 f0       	breq	.+12     	; 0x170 <USART_IsSendReady+0x1e>
 164:	80 ec       	ldi	r24, 0xC0	; 192
 166:	90 e0       	ldi	r25, 0x00	; 0
 168:	fc 01       	movw	r30, r24
 16a:	80 81       	ld	r24, Z
 16c:	80 72       	andi	r24, 0x20	; 32
 16e:	05 c0       	rjmp	.+10     	; 0x17a <USART_IsSendReady+0x28>
 170:	88 ec       	ldi	r24, 0xC8	; 200
 172:	90 e0       	ldi	r25, 0x00	; 0
 174:	fc 01       	movw	r30, r24
 176:	80 81       	ld	r24, Z
 178:	80 72       	andi	r24, 0x20	; 32
 17a:	0f 90       	pop	r0
 17c:	df 91       	pop	r29
 17e:	cf 91       	pop	r28
 180:	08 95       	ret

00000182 <USART_HasReceived>:
 182:	cf 93       	push	r28
 184:	df 93       	push	r29
 186:	1f 92       	push	r1
 188:	cd b7       	in	r28, 0x3d	; 61
 18a:	de b7       	in	r29, 0x3e	; 62
 18c:	89 83       	std	Y+1, r24	; 0x01
 18e:	89 81       	ldd	r24, Y+1	; 0x01
 190:	81 30       	cpi	r24, 0x01	; 1
 192:	31 f0       	breq	.+12     	; 0x1a0 <USART_HasReceived+0x1e>
 194:	80 ec       	ldi	r24, 0xC0	; 192
 196:	90 e0       	ldi	r25, 0x00	; 0
 198:	fc 01       	movw	r30, r24
 19a:	80 81       	ld	r24, Z
 19c:	80 78       	andi	r24, 0x80	; 128
 19e:	05 c0       	rjmp	.+10     	; 0x1aa <USART_HasReceived+0x28>
 1a0:	88 ec       	ldi	r24, 0xC8	; 200
 1a2:	90 e0       	ldi	r25, 0x00	; 0
 1a4:	fc 01       	movw	r30, r24
 1a6:	80 81       	ld	r24, Z
 1a8:	80 78       	andi	r24, 0x80	; 128
 1aa:	0f 90       	pop	r0
 1ac:	df 91       	pop	r29
 1ae:	cf 91       	pop	r28
 1b0:	08 95       	ret

000001b2 <USART_Flush>:
 1b2:	cf 93       	push	r28
 1b4:	df 93       	push	r29
 1b6:	1f 92       	push	r1
 1b8:	cd b7       	in	r28, 0x3d	; 61
 1ba:	de b7       	in	r29, 0x3e	; 62
 1bc:	89 83       	std	Y+1, r24	; 0x01
 1be:	89 81       	ldd	r24, Y+1	; 0x01
 1c0:	81 30       	cpi	r24, 0x01	; 1
 1c2:	a1 f0       	breq	.+40     	; 0x1ec <USART_Flush+0x3a>
 1c4:	06 c0       	rjmp	.+12     	; 0x1d2 <USART_Flush+0x20>
 1c6:	86 ec       	ldi	r24, 0xC6	; 198
 1c8:	90 e0       	ldi	r25, 0x00	; 0
 1ca:	fc 01       	movw	r30, r24
 1cc:	80 81       	ld	r24, Z
 1ce:	80 93 19 01 	sts	0x0119, r24	; 0x800119 <dummy.1616>
 1d2:	80 ec       	ldi	r24, 0xC0	; 192
 1d4:	90 e0       	ldi	r25, 0x00	; 0
 1d6:	fc 01       	movw	r30, r24
 1d8:	80 81       	ld	r24, Z
 1da:	88 23       	and	r24, r24
 1dc:	a4 f3       	brlt	.-24     	; 0x1c6 <USART_Flush+0x14>
 1de:	0c c0       	rjmp	.+24     	; 0x1f8 <USART_Flush+0x46>
 1e0:	8e ec       	ldi	r24, 0xCE	; 206
 1e2:	90 e0       	ldi	r25, 0x00	; 0
 1e4:	fc 01       	movw	r30, r24
 1e6:	80 81       	ld	r24, Z
 1e8:	80 93 19 01 	sts	0x0119, r24	; 0x800119 <dummy.1616>
 1ec:	88 ec       	ldi	r24, 0xC8	; 200
 1ee:	90 e0       	ldi	r25, 0x00	; 0
 1f0:	fc 01       	movw	r30, r24
 1f2:	80 81       	ld	r24, Z
 1f4:	88 23       	and	r24, r24
 1f6:	a4 f3       	brlt	.-24     	; 0x1e0 <USART_Flush+0x2e>
 1f8:	00 00       	nop
 1fa:	0f 90       	pop	r0
 1fc:	df 91       	pop	r29
 1fe:	cf 91       	pop	r28
 200:	08 95       	ret

00000202 <USART_Send>:
 202:	cf 93       	push	r28
 204:	df 93       	push	r29
 206:	00 d0       	rcall	.+0      	; 0x208 <USART_Send+0x6>
 208:	cd b7       	in	r28, 0x3d	; 61
 20a:	de b7       	in	r29, 0x3e	; 62
 20c:	89 83       	std	Y+1, r24	; 0x01
 20e:	6a 83       	std	Y+2, r22	; 0x02
 210:	8a 81       	ldd	r24, Y+2	; 0x02
 212:	81 30       	cpi	r24, 0x01	; 1
 214:	89 f0       	breq	.+34     	; 0x238 <USART_Send+0x36>
 216:	00 00       	nop
 218:	80 ec       	ldi	r24, 0xC0	; 192
 21a:	90 e0       	ldi	r25, 0x00	; 0
 21c:	fc 01       	movw	r30, r24
 21e:	80 81       	ld	r24, Z
 220:	88 2f       	mov	r24, r24
 222:	90 e0       	ldi	r25, 0x00	; 0
 224:	80 72       	andi	r24, 0x20	; 32
 226:	99 27       	eor	r25, r25
 228:	89 2b       	or	r24, r25
 22a:	b1 f3       	breq	.-20     	; 0x218 <USART_Send+0x16>
 22c:	86 ec       	ldi	r24, 0xC6	; 198
 22e:	90 e0       	ldi	r25, 0x00	; 0
 230:	29 81       	ldd	r18, Y+1	; 0x01
 232:	fc 01       	movw	r30, r24
 234:	20 83       	st	Z, r18
 236:	10 c0       	rjmp	.+32     	; 0x258 <USART_Send+0x56>
 238:	00 00       	nop
 23a:	88 ec       	ldi	r24, 0xC8	; 200
 23c:	90 e0       	ldi	r25, 0x00	; 0
 23e:	fc 01       	movw	r30, r24
 240:	80 81       	ld	r24, Z
 242:	88 2f       	mov	r24, r24
 244:	90 e0       	ldi	r25, 0x00	; 0
 246:	80 72       	andi	r24, 0x20	; 32
 248:	99 27       	eor	r25, r25
 24a:	89 2b       	or	r24, r25
 24c:	b1 f3       	breq	.-20     	; 0x23a <USART_Send+0x38>
 24e:	8e ec       	ldi	r24, 0xCE	; 206
 250:	90 e0       	ldi	r25, 0x00	; 0
 252:	29 81       	ldd	r18, Y+1	; 0x01
 254:	fc 01       	movw	r30, r24
 256:	20 83       	st	Z, r18
 258:	00 00       	nop
 25a:	0f 90       	pop	r0
 25c:	0f 90       	pop	r0
 25e:	df 91       	pop	r29
 260:	cf 91       	pop	r28
 262:	08 95       	ret

00000264 <USART_Receive>:
 264:	cf 93       	push	r28
 266:	df 93       	push	r29
 268:	1f 92       	push	r1
 26a:	cd b7       	in	r28, 0x3d	; 61
 26c:	de b7       	in	r29, 0x3e	; 62
 26e:	89 83       	std	Y+1, r24	; 0x01
 270:	89 81       	ldd	r24, Y+1	; 0x01
 272:	81 30       	cpi	r24, 0x01	; 1
 274:	61 f0       	breq	.+24     	; 0x28e <USART_Receive+0x2a>
 276:	00 00       	nop
 278:	80 ec       	ldi	r24, 0xC0	; 192
 27a:	90 e0       	ldi	r25, 0x00	; 0
 27c:	fc 01       	movw	r30, r24
 27e:	80 81       	ld	r24, Z
 280:	88 23       	and	r24, r24
 282:	d4 f7       	brge	.-12     	; 0x278 <USART_Receive+0x14>
 284:	86 ec       	ldi	r24, 0xC6	; 198
 286:	90 e0       	ldi	r25, 0x00	; 0
 288:	fc 01       	movw	r30, r24
 28a:	80 81       	ld	r24, Z
 28c:	0b c0       	rjmp	.+22     	; 0x2a4 <USART_Receive+0x40>
 28e:	00 00       	nop
 290:	88 ec       	ldi	r24, 0xC8	; 200
 292:	90 e0       	ldi	r25, 0x00	; 0
 294:	fc 01       	movw	r30, r24
 296:	80 81       	ld	r24, Z
 298:	88 23       	and	r24, r24
 29a:	d4 f7       	brge	.-12     	; 0x290 <USART_Receive+0x2c>
 29c:	8e ec       	ldi	r24, 0xCE	; 206
 29e:	90 e0       	ldi	r25, 0x00	; 0
 2a0:	fc 01       	movw	r30, r24
 2a2:	80 81       	ld	r24, Z
 2a4:	0f 90       	pop	r0
 2a6:	df 91       	pop	r29
 2a8:	cf 91       	pop	r28
 2aa:	08 95       	ret

000002ac <USART_SendString>:
 2ac:	cf 93       	push	r28
 2ae:	df 93       	push	r29
 2b0:	cd b7       	in	r28, 0x3d	; 61
 2b2:	de b7       	in	r29, 0x3e	; 62
 2b4:	27 97       	sbiw	r28, 0x07	; 7
 2b6:	0f b6       	in	r0, 0x3f	; 63
 2b8:	f8 94       	cli
 2ba:	de bf       	out	0x3e, r29	; 62
 2bc:	0f be       	out	0x3f, r0	; 63
 2be:	cd bf       	out	0x3d, r28	; 61
 2c0:	9e 83       	std	Y+6, r25	; 0x06
 2c2:	8d 83       	std	Y+5, r24	; 0x05
 2c4:	6f 83       	std	Y+7, r22	; 0x07
 2c6:	8f 81       	ldd	r24, Y+7	; 0x07
 2c8:	81 30       	cpi	r24, 0x01	; 1
 2ca:	49 f1       	breq	.+82     	; 0x31e <USART_SendString+0x72>
 2cc:	1a 82       	std	Y+2, r1	; 0x02
 2ce:	19 82       	std	Y+1, r1	; 0x01
 2d0:	1c c0       	rjmp	.+56     	; 0x30a <USART_SendString+0x5e>
 2d2:	00 00       	nop
 2d4:	80 ec       	ldi	r24, 0xC0	; 192
 2d6:	90 e0       	ldi	r25, 0x00	; 0
 2d8:	fc 01       	movw	r30, r24
 2da:	80 81       	ld	r24, Z
 2dc:	88 2f       	mov	r24, r24
 2de:	90 e0       	ldi	r25, 0x00	; 0
 2e0:	80 72       	andi	r24, 0x20	; 32
 2e2:	99 27       	eor	r25, r25
 2e4:	89 2b       	or	r24, r25
 2e6:	b1 f3       	breq	.-20     	; 0x2d4 <USART_SendString+0x28>
 2e8:	86 ec       	ldi	r24, 0xC6	; 198
 2ea:	90 e0       	ldi	r25, 0x00	; 0
 2ec:	29 81       	ldd	r18, Y+1	; 0x01
 2ee:	3a 81       	ldd	r19, Y+2	; 0x02
 2f0:	4d 81       	ldd	r20, Y+5	; 0x05
 2f2:	5e 81       	ldd	r21, Y+6	; 0x06
 2f4:	24 0f       	add	r18, r20
 2f6:	35 1f       	adc	r19, r21
 2f8:	f9 01       	movw	r30, r18
 2fa:	20 81       	ld	r18, Z
 2fc:	fc 01       	movw	r30, r24
 2fe:	20 83       	st	Z, r18
 300:	89 81       	ldd	r24, Y+1	; 0x01
 302:	9a 81       	ldd	r25, Y+2	; 0x02
 304:	01 96       	adiw	r24, 0x01	; 1
 306:	9a 83       	std	Y+2, r25	; 0x02
 308:	89 83       	std	Y+1, r24	; 0x01
 30a:	8d 81       	ldd	r24, Y+5	; 0x05
 30c:	9e 81       	ldd	r25, Y+6	; 0x06
 30e:	ba d2       	rcall	.+1396   	; 0x884 <strlen>
 310:	9c 01       	movw	r18, r24
 312:	89 81       	ldd	r24, Y+1	; 0x01
 314:	9a 81       	ldd	r25, Y+2	; 0x02
 316:	82 17       	cp	r24, r18
 318:	93 07       	cpc	r25, r19
 31a:	d8 f2       	brcs	.-74     	; 0x2d2 <USART_SendString+0x26>
 31c:	28 c0       	rjmp	.+80     	; 0x36e <USART_SendString+0xc2>
 31e:	1c 82       	std	Y+4, r1	; 0x04
 320:	1b 82       	std	Y+3, r1	; 0x03
 322:	1c c0       	rjmp	.+56     	; 0x35c <USART_SendString+0xb0>
 324:	00 00       	nop
 326:	88 ec       	ldi	r24, 0xC8	; 200
 328:	90 e0       	ldi	r25, 0x00	; 0
 32a:	fc 01       	movw	r30, r24
 32c:	80 81       	ld	r24, Z
 32e:	88 2f       	mov	r24, r24
 330:	90 e0       	ldi	r25, 0x00	; 0
 332:	80 72       	andi	r24, 0x20	; 32
 334:	99 27       	eor	r25, r25
 336:	89 2b       	or	r24, r25
 338:	b1 f3       	breq	.-20     	; 0x326 <USART_SendString+0x7a>
 33a:	8e ec       	ldi	r24, 0xCE	; 206
 33c:	90 e0       	ldi	r25, 0x00	; 0
 33e:	2b 81       	ldd	r18, Y+3	; 0x03
 340:	3c 81       	ldd	r19, Y+4	; 0x04
 342:	4d 81       	ldd	r20, Y+5	; 0x05
 344:	5e 81       	ldd	r21, Y+6	; 0x06
 346:	24 0f       	add	r18, r20
 348:	35 1f       	adc	r19, r21
 34a:	f9 01       	movw	r30, r18
 34c:	20 81       	ld	r18, Z
 34e:	fc 01       	movw	r30, r24
 350:	20 83       	st	Z, r18
 352:	8b 81       	ldd	r24, Y+3	; 0x03
 354:	9c 81       	ldd	r25, Y+4	; 0x04
 356:	01 96       	adiw	r24, 0x01	; 1
 358:	9c 83       	std	Y+4, r25	; 0x04
 35a:	8b 83       	std	Y+3, r24	; 0x03
 35c:	8d 81       	ldd	r24, Y+5	; 0x05
 35e:	9e 81       	ldd	r25, Y+6	; 0x06
 360:	91 d2       	rcall	.+1314   	; 0x884 <strlen>
 362:	9c 01       	movw	r18, r24
 364:	8b 81       	ldd	r24, Y+3	; 0x03
 366:	9c 81       	ldd	r25, Y+4	; 0x04
 368:	82 17       	cp	r24, r18
 36a:	93 07       	cpc	r25, r19
 36c:	d8 f2       	brcs	.-74     	; 0x324 <USART_SendString+0x78>
 36e:	00 00       	nop
 370:	27 96       	adiw	r28, 0x07	; 7
 372:	0f b6       	in	r0, 0x3f	; 63
 374:	f8 94       	cli
 376:	de bf       	out	0x3e, r29	; 62
 378:	0f be       	out	0x3f, r0	; 63
 37a:	cd bf       	out	0x3d, r28	; 61
 37c:	df 91       	pop	r29
 37e:	cf 91       	pop	r28
 380:	08 95       	ret

00000382 <TimerSet>:
 382:	cf 93       	push	r28
 384:	df 93       	push	r29
 386:	00 d0       	rcall	.+0      	; 0x388 <TimerSet+0x6>
 388:	00 d0       	rcall	.+0      	; 0x38a <TimerSet+0x8>
 38a:	cd b7       	in	r28, 0x3d	; 61
 38c:	de b7       	in	r29, 0x3e	; 62
 38e:	69 83       	std	Y+1, r22	; 0x01
 390:	7a 83       	std	Y+2, r23	; 0x02
 392:	8b 83       	std	Y+3, r24	; 0x03
 394:	9c 83       	std	Y+4, r25	; 0x04
 396:	89 81       	ldd	r24, Y+1	; 0x01
 398:	9a 81       	ldd	r25, Y+2	; 0x02
 39a:	ab 81       	ldd	r26, Y+3	; 0x03
 39c:	bc 81       	ldd	r27, Y+4	; 0x04
 39e:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
 3a2:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__data_start+0x1>
 3a6:	a0 93 02 01 	sts	0x0102, r26	; 0x800102 <__data_start+0x2>
 3aa:	b0 93 03 01 	sts	0x0103, r27	; 0x800103 <__data_start+0x3>
 3ae:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 3b2:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
 3b6:	a0 91 02 01 	lds	r26, 0x0102	; 0x800102 <__data_start+0x2>
 3ba:	b0 91 03 01 	lds	r27, 0x0103	; 0x800103 <__data_start+0x3>
 3be:	80 93 15 01 	sts	0x0115, r24	; 0x800115 <_avr_timer_cntcurr>
 3c2:	90 93 16 01 	sts	0x0116, r25	; 0x800116 <_avr_timer_cntcurr+0x1>
 3c6:	a0 93 17 01 	sts	0x0117, r26	; 0x800117 <_avr_timer_cntcurr+0x2>
 3ca:	b0 93 18 01 	sts	0x0118, r27	; 0x800118 <_avr_timer_cntcurr+0x3>
 3ce:	00 00       	nop
 3d0:	0f 90       	pop	r0
 3d2:	0f 90       	pop	r0
 3d4:	0f 90       	pop	r0
 3d6:	0f 90       	pop	r0
 3d8:	df 91       	pop	r29
 3da:	cf 91       	pop	r28
 3dc:	08 95       	ret

000003de <TimerOn>:
 3de:	cf 93       	push	r28
 3e0:	df 93       	push	r29
 3e2:	cd b7       	in	r28, 0x3d	; 61
 3e4:	de b7       	in	r29, 0x3e	; 62
 3e6:	81 e8       	ldi	r24, 0x81	; 129
 3e8:	90 e0       	ldi	r25, 0x00	; 0
 3ea:	2b e0       	ldi	r18, 0x0B	; 11
 3ec:	fc 01       	movw	r30, r24
 3ee:	20 83       	st	Z, r18
 3f0:	88 e8       	ldi	r24, 0x88	; 136
 3f2:	90 e0       	ldi	r25, 0x00	; 0
 3f4:	2d e7       	ldi	r18, 0x7D	; 125
 3f6:	30 e0       	ldi	r19, 0x00	; 0
 3f8:	fc 01       	movw	r30, r24
 3fa:	31 83       	std	Z+1, r19	; 0x01
 3fc:	20 83       	st	Z, r18
 3fe:	8f e6       	ldi	r24, 0x6F	; 111
 400:	90 e0       	ldi	r25, 0x00	; 0
 402:	22 e0       	ldi	r18, 0x02	; 2
 404:	fc 01       	movw	r30, r24
 406:	20 83       	st	Z, r18
 408:	84 e8       	ldi	r24, 0x84	; 132
 40a:	90 e0       	ldi	r25, 0x00	; 0
 40c:	fc 01       	movw	r30, r24
 40e:	11 82       	std	Z+1, r1	; 0x01
 410:	10 82       	st	Z, r1
 412:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 416:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
 41a:	a0 91 02 01 	lds	r26, 0x0102	; 0x800102 <__data_start+0x2>
 41e:	b0 91 03 01 	lds	r27, 0x0103	; 0x800103 <__data_start+0x3>
 422:	80 93 15 01 	sts	0x0115, r24	; 0x800115 <_avr_timer_cntcurr>
 426:	90 93 16 01 	sts	0x0116, r25	; 0x800116 <_avr_timer_cntcurr+0x1>
 42a:	a0 93 17 01 	sts	0x0117, r26	; 0x800117 <_avr_timer_cntcurr+0x2>
 42e:	b0 93 18 01 	sts	0x0118, r27	; 0x800118 <_avr_timer_cntcurr+0x3>
 432:	8f e5       	ldi	r24, 0x5F	; 95
 434:	90 e0       	ldi	r25, 0x00	; 0
 436:	2f e5       	ldi	r18, 0x5F	; 95
 438:	30 e0       	ldi	r19, 0x00	; 0
 43a:	f9 01       	movw	r30, r18
 43c:	20 81       	ld	r18, Z
 43e:	20 68       	ori	r18, 0x80	; 128
 440:	fc 01       	movw	r30, r24
 442:	20 83       	st	Z, r18
 444:	00 00       	nop
 446:	df 91       	pop	r29
 448:	cf 91       	pop	r28
 44a:	08 95       	ret

0000044c <TimerISR>:

void TimerISR() {
 44c:	cf 93       	push	r28
 44e:	df 93       	push	r29
 450:	cd b7       	in	r28, 0x3d	; 61
 452:	de b7       	in	r29, 0x3e	; 62
	TimerFlag = 1;
 454:	81 e0       	ldi	r24, 0x01	; 1
 456:	80 93 14 01 	sts	0x0114, r24	; 0x800114 <__data_end>
}
 45a:	00 00       	nop
 45c:	df 91       	pop	r29
 45e:	cf 91       	pop	r28
 460:	08 95       	ret

00000462 <__vector_13>:

// In our approach, the C programmer does not touch this ISR, but rather TimerISR()
ISR(TIMER1_COMPA_vect)
{
 462:	1f 92       	push	r1
 464:	0f 92       	push	r0
 466:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
 46a:	0f 92       	push	r0
 46c:	11 24       	eor	r1, r1
 46e:	00 90 5b 00 	lds	r0, 0x005B	; 0x80005b <__TEXT_REGION_LENGTH__+0x7e005b>
 472:	0f 92       	push	r0
 474:	2f 93       	push	r18
 476:	3f 93       	push	r19
 478:	4f 93       	push	r20
 47a:	5f 93       	push	r21
 47c:	6f 93       	push	r22
 47e:	7f 93       	push	r23
 480:	8f 93       	push	r24
 482:	9f 93       	push	r25
 484:	af 93       	push	r26
 486:	bf 93       	push	r27
 488:	ef 93       	push	r30
 48a:	ff 93       	push	r31
 48c:	cf 93       	push	r28
 48e:	df 93       	push	r29
 490:	cd b7       	in	r28, 0x3d	; 61
 492:	de b7       	in	r29, 0x3e	; 62
	// CPU automatically calls when TCNT0 == OCR0 (every 1 ms per TimerOn settings)
	_avr_timer_cntcurr--; 			// Count down to 0 rather than up to TOP
 494:	80 91 15 01 	lds	r24, 0x0115	; 0x800115 <_avr_timer_cntcurr>
 498:	90 91 16 01 	lds	r25, 0x0116	; 0x800116 <_avr_timer_cntcurr+0x1>
 49c:	a0 91 17 01 	lds	r26, 0x0117	; 0x800117 <_avr_timer_cntcurr+0x2>
 4a0:	b0 91 18 01 	lds	r27, 0x0118	; 0x800118 <_avr_timer_cntcurr+0x3>
 4a4:	01 97       	sbiw	r24, 0x01	; 1
 4a6:	a1 09       	sbc	r26, r1
 4a8:	b1 09       	sbc	r27, r1
 4aa:	80 93 15 01 	sts	0x0115, r24	; 0x800115 <_avr_timer_cntcurr>
 4ae:	90 93 16 01 	sts	0x0116, r25	; 0x800116 <_avr_timer_cntcurr+0x1>
 4b2:	a0 93 17 01 	sts	0x0117, r26	; 0x800117 <_avr_timer_cntcurr+0x2>
 4b6:	b0 93 18 01 	sts	0x0118, r27	; 0x800118 <_avr_timer_cntcurr+0x3>
	if (_avr_timer_cntcurr == 0) { 	// results in a more efficient compare
 4ba:	80 91 15 01 	lds	r24, 0x0115	; 0x800115 <_avr_timer_cntcurr>
 4be:	90 91 16 01 	lds	r25, 0x0116	; 0x800116 <_avr_timer_cntcurr+0x1>
 4c2:	a0 91 17 01 	lds	r26, 0x0117	; 0x800117 <_avr_timer_cntcurr+0x2>
 4c6:	b0 91 18 01 	lds	r27, 0x0118	; 0x800118 <_avr_timer_cntcurr+0x3>
 4ca:	89 2b       	or	r24, r25
 4cc:	8a 2b       	or	r24, r26
 4ce:	8b 2b       	or	r24, r27
		TimerISR(); 				// Call the ISR that the user uses
 4d0:	89 f4       	brne	.+34     	; 0x4f4 <__vector_13+0x92>
		_avr_timer_cntcurr = _avr_timer_M;
 4d2:	bc df       	rcall	.-136    	; 0x44c <TimerISR>
 4d4:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 4d8:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
 4dc:	a0 91 02 01 	lds	r26, 0x0102	; 0x800102 <__data_start+0x2>
 4e0:	b0 91 03 01 	lds	r27, 0x0103	; 0x800103 <__data_start+0x3>
 4e4:	80 93 15 01 	sts	0x0115, r24	; 0x800115 <_avr_timer_cntcurr>
 4e8:	90 93 16 01 	sts	0x0116, r25	; 0x800116 <_avr_timer_cntcurr+0x1>
 4ec:	a0 93 17 01 	sts	0x0117, r26	; 0x800117 <_avr_timer_cntcurr+0x2>
 4f0:	b0 93 18 01 	sts	0x0118, r27	; 0x800118 <_avr_timer_cntcurr+0x3>
	}
}
 4f4:	00 00       	nop
 4f6:	df 91       	pop	r29
 4f8:	cf 91       	pop	r28
 4fa:	ff 91       	pop	r31
 4fc:	ef 91       	pop	r30
 4fe:	bf 91       	pop	r27
 500:	af 91       	pop	r26
 502:	9f 91       	pop	r25
 504:	8f 91       	pop	r24
 506:	7f 91       	pop	r23
 508:	6f 91       	pop	r22
 50a:	5f 91       	pop	r21
 50c:	4f 91       	pop	r20
 50e:	3f 91       	pop	r19
 510:	2f 91       	pop	r18
 512:	0f 90       	pop	r0
 514:	00 92 5b 00 	sts	0x005B, r0	; 0x80005b <__TEXT_REGION_LENGTH__+0x7e005b>
 518:	0f 90       	pop	r0
 51a:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
 51e:	0f 90       	pop	r0
 520:	1f 90       	pop	r1
 522:	18 95       	reti

00000524 <findGCD>:
////////////////////////////////////////////////////////////////////////////////
//Functionality - finds the greatest common divisor of two values
//Parameter: Two long int's to find their GCD
//Returns: GCD else 0
unsigned long int findGCD(unsigned long int a, unsigned long int b)
{
 524:	cf 93       	push	r28
 526:	df 93       	push	r29
 528:	cd b7       	in	r28, 0x3d	; 61
 52a:	de b7       	in	r29, 0x3e	; 62
 52c:	2c 97       	sbiw	r28, 0x0c	; 12
 52e:	0f b6       	in	r0, 0x3f	; 63
 530:	f8 94       	cli
 532:	de bf       	out	0x3e, r29	; 62
 534:	0f be       	out	0x3f, r0	; 63
 536:	cd bf       	out	0x3d, r28	; 61
 538:	6d 83       	std	Y+5, r22	; 0x05
 53a:	7e 83       	std	Y+6, r23	; 0x06
 53c:	8f 83       	std	Y+7, r24	; 0x07
 53e:	98 87       	std	Y+8, r25	; 0x08
 540:	29 87       	std	Y+9, r18	; 0x09
 542:	3a 87       	std	Y+10, r19	; 0x0a
 544:	4b 87       	std	Y+11, r20	; 0x0b
 546:	5c 87       	std	Y+12, r21	; 0x0c
	unsigned long int c;
	while(1){
		c = a % b;
 548:	8d 81       	ldd	r24, Y+5	; 0x05
 54a:	9e 81       	ldd	r25, Y+6	; 0x06
 54c:	af 81       	ldd	r26, Y+7	; 0x07
 54e:	b8 85       	ldd	r27, Y+8	; 0x08
 550:	29 85       	ldd	r18, Y+9	; 0x09
 552:	3a 85       	ldd	r19, Y+10	; 0x0a
 554:	4b 85       	ldd	r20, Y+11	; 0x0b
 556:	5c 85       	ldd	r21, Y+12	; 0x0c
 558:	bc 01       	movw	r22, r24
 55a:	cd 01       	movw	r24, r26
 55c:	71 d1       	rcall	.+738    	; 0x840 <__udivmodsi4>
 55e:	dc 01       	movw	r26, r24
 560:	cb 01       	movw	r24, r22
 562:	89 83       	std	Y+1, r24	; 0x01
 564:	9a 83       	std	Y+2, r25	; 0x02
 566:	ab 83       	std	Y+3, r26	; 0x03
 568:	bc 83       	std	Y+4, r27	; 0x04
		if( c == 0 ) { return b; }
 56a:	89 81       	ldd	r24, Y+1	; 0x01
 56c:	9a 81       	ldd	r25, Y+2	; 0x02
 56e:	ab 81       	ldd	r26, Y+3	; 0x03
 570:	bc 81       	ldd	r27, Y+4	; 0x04
 572:	89 2b       	or	r24, r25
 574:	8a 2b       	or	r24, r26
 576:	8b 2b       	or	r24, r27
 578:	29 f4       	brne	.+10     	; 0x584 <findGCD+0x60>
 57a:	89 85       	ldd	r24, Y+9	; 0x09
 57c:	9a 85       	ldd	r25, Y+10	; 0x0a
 57e:	ab 85       	ldd	r26, Y+11	; 0x0b
 580:	bc 85       	ldd	r27, Y+12	; 0x0c
 582:	11 c0       	rjmp	.+34     	; 0x5a6 <findGCD+0x82>
		a = b;
 584:	89 85       	ldd	r24, Y+9	; 0x09
 586:	9a 85       	ldd	r25, Y+10	; 0x0a
 588:	ab 85       	ldd	r26, Y+11	; 0x0b
 58a:	bc 85       	ldd	r27, Y+12	; 0x0c
 58c:	8d 83       	std	Y+5, r24	; 0x05
 58e:	9e 83       	std	Y+6, r25	; 0x06
 590:	af 83       	std	Y+7, r26	; 0x07
 592:	b8 87       	std	Y+8, r27	; 0x08
		b = c;
 594:	89 81       	ldd	r24, Y+1	; 0x01
 596:	9a 81       	ldd	r25, Y+2	; 0x02
 598:	ab 81       	ldd	r26, Y+3	; 0x03
 59a:	bc 81       	ldd	r27, Y+4	; 0x04
 59c:	89 87       	std	Y+9, r24	; 0x09
 59e:	9a 87       	std	Y+10, r25	; 0x0a
 5a0:	ab 87       	std	Y+11, r26	; 0x0b
 5a2:	bc 87       	std	Y+12, r27	; 0x0c
	}
 5a4:	d1 cf       	rjmp	.-94     	; 0x548 <findGCD+0x24>
	return 0;
}
 5a6:	bc 01       	movw	r22, r24
 5a8:	cd 01       	movw	r24, r26
 5aa:	2c 96       	adiw	r28, 0x0c	; 12
 5ac:	0f b6       	in	r0, 0x3f	; 63
 5ae:	f8 94       	cli
 5b0:	de bf       	out	0x3e, r29	; 62
 5b2:	0f be       	out	0x3f, r0	; 63
 5b4:	cd bf       	out	0x3d, r28	; 61
 5b6:	df 91       	pop	r29
 5b8:	cf 91       	pop	r28
 5ba:	08 95       	ret

000005bc <SMTick1>:
//--------End Shared Variables------------------------------------------------

//--------User defined FSMs---------------------------------------------------
enum SM1_States { SM1_wait, SM1_press, SM1_release, SM1_neither };
//Enumeration of states.
int SMTick1(int state) {
 5bc:	cf 93       	push	r28
 5be:	df 93       	push	r29
 5c0:	00 d0       	rcall	.+0      	; 0x5c2 <SMTick1+0x6>
 5c2:	cd b7       	in	r28, 0x3d	; 61
 5c4:	de b7       	in	r29, 0x3e	; 62
 5c6:	9a 83       	std	Y+2, r25	; 0x02
 5c8:	89 83       	std	Y+1, r24	; 0x01
	// Local Variables
	
	//transitions
	switch (state) {
 5ca:	89 81       	ldd	r24, Y+1	; 0x01
 5cc:	9a 81       	ldd	r25, Y+2	; 0x02
 5ce:	82 30       	cpi	r24, 0x02	; 2
 5d0:	91 05       	cpc	r25, r1
 5d2:	09 f1       	breq	.+66     	; 0x616 <SMTick1+0x5a>
 5d4:	83 30       	cpi	r24, 0x03	; 3
 5d6:	91 05       	cpc	r25, r1
 5d8:	19 f1       	breq	.+70     	; 0x620 <SMTick1+0x64>
 5da:	89 2b       	or	r24, r25
 5dc:	31 f5       	brne	.+76     	; 0x62a <SMTick1+0x6e>
		case SM1_wait:
		// receive data from Bluetooth device
		if( USART_HasReceived(0) != 0 )
 5de:	80 e0       	ldi	r24, 0x00	; 0
 5e0:	d0 dd       	rcall	.-1120   	; 0x182 <USART_HasReceived>
 5e2:	88 23       	and	r24, r24
		{
		
			Data_in = USART_Receive(0);
 5e4:	31 f0       	breq	.+12     	; 0x5f2 <SMTick1+0x36>
 5e6:	80 e0       	ldi	r24, 0x00	; 0
 5e8:	3d de       	rcall	.-902    	; 0x264 <USART_Receive>
			USART_Flush(0);
 5ea:	80 93 25 01 	sts	0x0125, r24	; 0x800125 <Data_in>
 5ee:	80 e0       	ldi	r24, 0x00	; 0
			
		}
		if(Data_in =='1')
 5f0:	e0 dd       	rcall	.-1088   	; 0x1b2 <USART_Flush>
 5f2:	80 91 25 01 	lds	r24, 0x0125	; 0x800125 <Data_in>
 5f6:	81 33       	cpi	r24, 0x31	; 49
		{
			state = SM1_press;
 5f8:	29 f4       	brne	.+10     	; 0x604 <SMTick1+0x48>
 5fa:	81 e0       	ldi	r24, 0x01	; 1
 5fc:	90 e0       	ldi	r25, 0x00	; 0
 5fe:	9a 83       	std	Y+2, r25	; 0x02
		}
		/*else
		{
			state = SM1_neither;
		}*/
		break;
 600:	89 83       	std	Y+1, r24	; 0x01
		}
		if(Data_in =='1')
		{
			state = SM1_press;
		}
		else if(Data_in == '2')
 602:	16 c0       	rjmp	.+44     	; 0x630 <SMTick1+0x74>
 604:	80 91 25 01 	lds	r24, 0x0125	; 0x800125 <Data_in>
 608:	82 33       	cpi	r24, 0x32	; 50
		{
			state = SM1_release;
 60a:	91 f4       	brne	.+36     	; 0x630 <SMTick1+0x74>
 60c:	82 e0       	ldi	r24, 0x02	; 2
 60e:	90 e0       	ldi	r25, 0x00	; 0
 610:	9a 83       	std	Y+2, r25	; 0x02
		}
		/*else
		{
			state = SM1_neither;
		}*/
		break;
 612:	89 83       	std	Y+1, r24	; 0x01
			Data_in = 0;
			state = SM1_wait;
		break;

		case SM1_release:
			Data_in = 0;
 614:	0d c0       	rjmp	.+26     	; 0x630 <SMTick1+0x74>
 616:	10 92 25 01 	sts	0x0125, r1	; 0x800125 <Data_in>
			state = SM1_wait;
 61a:	1a 82       	std	Y+2, r1	; 0x02
		break;
 61c:	19 82       	std	Y+1, r1	; 0x01

		case SM1_neither:
			Data_in = 0;
 61e:	09 c0       	rjmp	.+18     	; 0x632 <SMTick1+0x76>
 620:	10 92 25 01 	sts	0x0125, r1	; 0x800125 <Data_in>
			state = SM1_wait;
 624:	1a 82       	std	Y+2, r1	; 0x02
		break;
 626:	19 82       	std	Y+1, r1	; 0x01

		default:
		state = SM1_wait; // default: Initial state
 628:	04 c0       	rjmp	.+8      	; 0x632 <SMTick1+0x76>
 62a:	1a 82       	std	Y+2, r1	; 0x02
		break;
 62c:	19 82       	std	Y+1, r1	; 0x01
		}
		/*else
		{
			state = SM1_neither;
		}*/
		break;
 62e:	01 c0       	rjmp	.+2      	; 0x632 <SMTick1+0x76>
		state = SM1_wait; // default: Initial state
		break;
	}

	//State machine actions
	switch(state) {
 630:	00 00       	nop
 632:	89 81       	ldd	r24, Y+1	; 0x01
 634:	9a 81       	ldd	r25, Y+2	; 0x02
 636:	81 30       	cpi	r24, 0x01	; 1
 638:	91 05       	cpc	r25, r1
 63a:	61 f0       	breq	.+24     	; 0x654 <SMTick1+0x98>
 63c:	82 30       	cpi	r24, 0x02	; 2
 63e:	91 05       	cpc	r25, r1
 640:	1c f4       	brge	.+6      	; 0x648 <SMTick1+0x8c>
 642:	89 2b       	or	r24, r25
 644:	29 f1       	breq	.+74     	; 0x690 <SMTick1+0xd4>
 646:	21 c0       	rjmp	.+66     	; 0x68a <SMTick1+0xce>
 648:	82 30       	cpi	r24, 0x02	; 2
 64a:	91 05       	cpc	r25, r1
 64c:	89 f0       	breq	.+34     	; 0x670 <SMTick1+0xb4>
 64e:	03 97       	sbiw	r24, 0x03	; 3

		break;

		case SM1_press:
			//send status of LED i.e. LED ON
			if( USART_IsSendReady(0) != 0 )
 650:	09 f1       	breq	.+66     	; 0x694 <SMTick1+0xd8>
 652:	1b c0       	rjmp	.+54     	; 0x68a <SMTick1+0xce>
 654:	80 e0       	ldi	r24, 0x00	; 0
 656:	7d dd       	rcall	.-1286   	; 0x152 <USART_IsSendReady>
			{
				USART_SendString( "LED_ON", 0);
 658:	88 23       	and	r24, r24
 65a:	f1 f0       	breq	.+60     	; 0x698 <SMTick1+0xdc>
 65c:	60 e0       	ldi	r22, 0x00	; 0
 65e:	84 e0       	ldi	r24, 0x04	; 4
 660:	91 e0       	ldi	r25, 0x01	; 1
				//USART_Send('A', 0);
				PORTB = 0x01;
 662:	24 de       	rcall	.-952    	; 0x2ac <USART_SendString>
 664:	85 e2       	ldi	r24, 0x25	; 37
 666:	90 e0       	ldi	r25, 0x00	; 0
 668:	21 e0       	ldi	r18, 0x01	; 1
			}

		break;
 66a:	fc 01       	movw	r30, r24

		case SM1_release:

			// send status of LED i.e. LED OFF Sending B for off
			if( USART_IsSendReady(0) != 0 )
 66c:	20 83       	st	Z, r18
 66e:	14 c0       	rjmp	.+40     	; 0x698 <SMTick1+0xdc>
 670:	80 e0       	ldi	r24, 0x00	; 0
 672:	6f dd       	rcall	.-1314   	; 0x152 <USART_IsSendReady>
			{
				USART_SendString( "LED_OFF", 0);
 674:	88 23       	and	r24, r24
 676:	91 f0       	breq	.+36     	; 0x69c <SMTick1+0xe0>
 678:	60 e0       	ldi	r22, 0x00	; 0
 67a:	8b e0       	ldi	r24, 0x0B	; 11
 67c:	91 e0       	ldi	r25, 0x01	; 1
				PORTB = 0x00;
 67e:	16 de       	rcall	.-980    	; 0x2ac <USART_SendString>
 680:	85 e2       	ldi	r24, 0x25	; 37
 682:	90 e0       	ldi	r25, 0x00	; 0
 684:	fc 01       	movw	r30, r24
			}
		
		
		break;
 686:	10 82       	st	Z, r1
				USART_Send( "WTF are you typing", 0);
			}*/
		break;

		default:
		state = SM1_wait;
 688:	09 c0       	rjmp	.+18     	; 0x69c <SMTick1+0xe0>
 68a:	1a 82       	std	Y+2, r1	; 0x02
		break;
 68c:	19 82       	std	Y+1, r1	; 0x01
	//State machine actions
	switch(state) {
		case SM1_wait:


		break;
 68e:	07 c0       	rjmp	.+14     	; 0x69e <SMTick1+0xe2>
 690:	00 00       	nop
		case SM1_neither:
			/*if( USART_IsSendReady(0) != 0 )
			{
				USART_Send( "WTF are you typing", 0);
			}*/
		break;
 692:	05 c0       	rjmp	.+10     	; 0x69e <SMTick1+0xe2>
 694:	00 00       	nop
				USART_SendString( "LED_ON", 0);
				//USART_Send('A', 0);
				PORTB = 0x01;
			}

		break;
 696:	03 c0       	rjmp	.+6      	; 0x69e <SMTick1+0xe2>
 698:	00 00       	nop
				USART_SendString( "LED_OFF", 0);
				PORTB = 0x00;
			}
		
		
		break;
 69a:	01 c0       	rjmp	.+2      	; 0x69e <SMTick1+0xe2>
		default:
		state = SM1_wait;
		break;
	}
	
	return state;
 69c:	00 00       	nop
 69e:	89 81       	ldd	r24, Y+1	; 0x01
	}
 6a0:	9a 81       	ldd	r25, Y+2	; 0x02
 6a2:	0f 90       	pop	r0
 6a4:	0f 90       	pop	r0
 6a6:	df 91       	pop	r29
 6a8:	cf 91       	pop	r28
 6aa:	08 95       	ret

000006ac <main>:
// --------END User defined FSMs-----------------------------------------------

int main(void)
{
 6ac:	cf 93       	push	r28
 6ae:	df 93       	push	r29
 6b0:	cd b7       	in	r28, 0x3d	; 61
 6b2:	de b7       	in	r29, 0x3e	; 62
 6b4:	a5 97       	sbiw	r28, 0x25	; 37
 6b6:	0f b6       	in	r0, 0x3f	; 63
 6b8:	f8 94       	cli
 6ba:	de bf       	out	0x3e, r29	; 62
 6bc:	0f be       	out	0x3f, r0	; 63
 6be:	cd bf       	out	0x3d, r28	; 61
	DDRA = 0xFF; PORTA = 0x00; // LCD data lines
	DDRC = 0xFF; PORTC = 0x00; // LCD control lines
	*/
	

	DDRB = 0xFF; PORTB = 0;		/* make PORT as output port */
 6c0:	84 e2       	ldi	r24, 0x24	; 36
 6c2:	90 e0       	ldi	r25, 0x00	; 0
 6c4:	2f ef       	ldi	r18, 0xFF	; 255
 6c6:	fc 01       	movw	r30, r24
 6c8:	20 83       	st	Z, r18
 6ca:	85 e2       	ldi	r24, 0x25	; 37
 6cc:	90 e0       	ldi	r25, 0x00	; 0
 6ce:	fc 01       	movw	r30, r24
 6d0:	10 82       	st	Z, r1


	// Period for the tasks
	unsigned long int SMTick1_calc = 150;
 6d2:	86 e9       	ldi	r24, 0x96	; 150
 6d4:	90 e0       	ldi	r25, 0x00	; 0
 6d6:	a0 e0       	ldi	r26, 0x00	; 0
 6d8:	b0 e0       	ldi	r27, 0x00	; 0
 6da:	89 83       	std	Y+1, r24	; 0x01
 6dc:	9a 83       	std	Y+2, r25	; 0x02
 6de:	ab 83       	std	Y+3, r26	; 0x03
 6e0:	bc 83       	std	Y+4, r27	; 0x04
	unsigned long int SMTick2_calc = 150;
 6e2:	86 e9       	ldi	r24, 0x96	; 150
 6e4:	90 e0       	ldi	r25, 0x00	; 0
 6e6:	a0 e0       	ldi	r26, 0x00	; 0
 6e8:	b0 e0       	ldi	r27, 0x00	; 0
 6ea:	8d 83       	std	Y+5, r24	; 0x05
 6ec:	9e 83       	std	Y+6, r25	; 0x06
 6ee:	af 83       	std	Y+7, r26	; 0x07
 6f0:	b8 87       	std	Y+8, r27	; 0x08
	unsigned long int SMTick3_calc = 150;
 6f2:	86 e9       	ldi	r24, 0x96	; 150
 6f4:	90 e0       	ldi	r25, 0x00	; 0
 6f6:	a0 e0       	ldi	r26, 0x00	; 0
 6f8:	b0 e0       	ldi	r27, 0x00	; 0
 6fa:	89 87       	std	Y+9, r24	; 0x09
 6fc:	9a 87       	std	Y+10, r25	; 0x0a
 6fe:	ab 87       	std	Y+11, r26	; 0x0b
 700:	bc 87       	std	Y+12, r27	; 0x0c

	//Calculating GCD
	unsigned long int tmpGCD = 1;
 702:	81 e0       	ldi	r24, 0x01	; 1
 704:	90 e0       	ldi	r25, 0x00	; 0
 706:	a0 e0       	ldi	r26, 0x00	; 0
 708:	b0 e0       	ldi	r27, 0x00	; 0
 70a:	8d 87       	std	Y+13, r24	; 0x0d
 70c:	9e 87       	std	Y+14, r25	; 0x0e
 70e:	af 87       	std	Y+15, r26	; 0x0f
 710:	b8 8b       	std	Y+16, r27	; 0x10
	tmpGCD = findGCD(SMTick1_calc, SMTick1_calc);
 712:	29 81       	ldd	r18, Y+1	; 0x01
 714:	3a 81       	ldd	r19, Y+2	; 0x02
 716:	4b 81       	ldd	r20, Y+3	; 0x03
 718:	5c 81       	ldd	r21, Y+4	; 0x04
 71a:	89 81       	ldd	r24, Y+1	; 0x01
 71c:	9a 81       	ldd	r25, Y+2	; 0x02
 71e:	ab 81       	ldd	r26, Y+3	; 0x03
 720:	bc 81       	ldd	r27, Y+4	; 0x04
 722:	bc 01       	movw	r22, r24
 724:	cd 01       	movw	r24, r26
 726:	fe de       	rcall	.-516    	; 0x524 <findGCD>
 728:	dc 01       	movw	r26, r24
 72a:	cb 01       	movw	r24, r22
 72c:	8d 87       	std	Y+13, r24	; 0x0d
 72e:	9e 87       	std	Y+14, r25	; 0x0e
 730:	af 87       	std	Y+15, r26	; 0x0f
 732:	b8 8b       	std	Y+16, r27	; 0x10
	//tmpGCD = findGCD(tmpGCD, SMTick3_calc);

	//Greatest common divisor for all tasks or smallest time unit for tasks.
	unsigned long int GCD = tmpGCD;
 734:	8d 85       	ldd	r24, Y+13	; 0x0d
 736:	9e 85       	ldd	r25, Y+14	; 0x0e
 738:	af 85       	ldd	r26, Y+15	; 0x0f
 73a:	b8 89       	ldd	r27, Y+16	; 0x10
 73c:	89 8b       	std	Y+17, r24	; 0x11
 73e:	9a 8b       	std	Y+18, r25	; 0x12
 740:	ab 8b       	std	Y+19, r26	; 0x13
 742:	bc 8b       	std	Y+20, r27	; 0x14

	//Recalculate GCD periods for scheduler
	unsigned long int SMTick1_period = SMTick1_calc/GCD;
 744:	89 81       	ldd	r24, Y+1	; 0x01
 746:	9a 81       	ldd	r25, Y+2	; 0x02
 748:	ab 81       	ldd	r26, Y+3	; 0x03
 74a:	bc 81       	ldd	r27, Y+4	; 0x04
 74c:	29 89       	ldd	r18, Y+17	; 0x11
 74e:	3a 89       	ldd	r19, Y+18	; 0x12
 750:	4b 89       	ldd	r20, Y+19	; 0x13
 752:	5c 89       	ldd	r21, Y+20	; 0x14
 754:	bc 01       	movw	r22, r24
 756:	cd 01       	movw	r24, r26
 758:	73 d0       	rcall	.+230    	; 0x840 <__udivmodsi4>
 75a:	da 01       	movw	r26, r20
 75c:	c9 01       	movw	r24, r18
 75e:	8d 8b       	std	Y+21, r24	; 0x15
 760:	9e 8b       	std	Y+22, r25	; 0x16
 762:	af 8b       	std	Y+23, r26	; 0x17
 764:	b8 8f       	std	Y+24, r27	; 0x18
	unsigned long int SMTick2_period = SMTick2_calc/GCD;
 766:	8d 81       	ldd	r24, Y+5	; 0x05
 768:	9e 81       	ldd	r25, Y+6	; 0x06
 76a:	af 81       	ldd	r26, Y+7	; 0x07
 76c:	b8 85       	ldd	r27, Y+8	; 0x08
 76e:	29 89       	ldd	r18, Y+17	; 0x11
 770:	3a 89       	ldd	r19, Y+18	; 0x12
 772:	4b 89       	ldd	r20, Y+19	; 0x13
 774:	5c 89       	ldd	r21, Y+20	; 0x14
 776:	bc 01       	movw	r22, r24
 778:	cd 01       	movw	r24, r26
 77a:	62 d0       	rcall	.+196    	; 0x840 <__udivmodsi4>
 77c:	da 01       	movw	r26, r20
 77e:	c9 01       	movw	r24, r18
 780:	89 8f       	std	Y+25, r24	; 0x19
 782:	9a 8f       	std	Y+26, r25	; 0x1a
 784:	ab 8f       	std	Y+27, r26	; 0x1b
 786:	bc 8f       	std	Y+28, r27	; 0x1c
	unsigned long int SMTick3_period = SMTick3_calc/GCD;
 788:	89 85       	ldd	r24, Y+9	; 0x09
 78a:	9a 85       	ldd	r25, Y+10	; 0x0a
 78c:	ab 85       	ldd	r26, Y+11	; 0x0b
 78e:	bc 85       	ldd	r27, Y+12	; 0x0c
 790:	29 89       	ldd	r18, Y+17	; 0x11
 792:	3a 89       	ldd	r19, Y+18	; 0x12
 794:	4b 89       	ldd	r20, Y+19	; 0x13
 796:	5c 89       	ldd	r21, Y+20	; 0x14
 798:	bc 01       	movw	r22, r24
 79a:	cd 01       	movw	r24, r26
 79c:	51 d0       	rcall	.+162    	; 0x840 <__udivmodsi4>
 79e:	da 01       	movw	r26, r20
 7a0:	c9 01       	movw	r24, r18
 7a2:	8d 8f       	std	Y+29, r24	; 0x1d
 7a4:	9e 8f       	std	Y+30, r25	; 0x1e
 7a6:	af 8f       	std	Y+31, r26	; 0x1f
 7a8:	b8 a3       	std	Y+32, r27	; 0x20
		
	//Declare an array of tasks
	static task task1;
	task *tasks[] = { &task1 };
 7aa:	8a e1       	ldi	r24, 0x1A	; 26
 7ac:	91 e0       	ldi	r25, 0x01	; 1
 7ae:	9d a3       	std	Y+37, r25	; 0x25
 7b0:	8c a3       	std	Y+36, r24	; 0x24
	const unsigned short numTasks = sizeof(tasks)/sizeof(task*);
 7b2:	81 e0       	ldi	r24, 0x01	; 1
 7b4:	90 e0       	ldi	r25, 0x00	; 0
 7b6:	9a a3       	std	Y+34, r25	; 0x22
 7b8:	89 a3       	std	Y+33, r24	; 0x21

	// Task 1
	task1.state = SM1_wait;//Task initial state.
 7ba:	10 92 1a 01 	sts	0x011A, r1	; 0x80011a <task1.1873>
	task1.period = SMTick1_period;//Task Period.
 7be:	8d 89       	ldd	r24, Y+21	; 0x15
 7c0:	9e 89       	ldd	r25, Y+22	; 0x16
 7c2:	af 89       	ldd	r26, Y+23	; 0x17
 7c4:	b8 8d       	ldd	r27, Y+24	; 0x18
 7c6:	80 93 1b 01 	sts	0x011B, r24	; 0x80011b <task1.1873+0x1>
 7ca:	90 93 1c 01 	sts	0x011C, r25	; 0x80011c <task1.1873+0x2>
 7ce:	a0 93 1d 01 	sts	0x011D, r26	; 0x80011d <task1.1873+0x3>
 7d2:	b0 93 1e 01 	sts	0x011E, r27	; 0x80011e <task1.1873+0x4>
	task1.elapsedTime = SMTick1_period;//Task current elapsed time.
 7d6:	8d 89       	ldd	r24, Y+21	; 0x15
 7d8:	9e 89       	ldd	r25, Y+22	; 0x16
 7da:	af 89       	ldd	r26, Y+23	; 0x17
 7dc:	b8 8d       	ldd	r27, Y+24	; 0x18
 7de:	80 93 1f 01 	sts	0x011F, r24	; 0x80011f <task1.1873+0x5>
 7e2:	90 93 20 01 	sts	0x0120, r25	; 0x800120 <task1.1873+0x6>
 7e6:	a0 93 21 01 	sts	0x0121, r26	; 0x800121 <task1.1873+0x7>
 7ea:	b0 93 22 01 	sts	0x0122, r27	; 0x800122 <task1.1873+0x8>
	task1.TickFct = &SMTick1;//Function pointer for the tick.
 7ee:	8e ed       	ldi	r24, 0xDE	; 222
 7f0:	92 e0       	ldi	r25, 0x02	; 2
 7f2:	90 93 24 01 	sts	0x0124, r25	; 0x800124 <task1.1873+0xa>
 7f6:	80 93 23 01 	sts	0x0123, r24	; 0x800123 <task1.1873+0x9>

	// Set the timer and turn it on
	TimerSet(GCD);
 7fa:	89 89       	ldd	r24, Y+17	; 0x11
 7fc:	9a 89       	ldd	r25, Y+18	; 0x12
 7fe:	ab 89       	ldd	r26, Y+19	; 0x13
 800:	bc 89       	ldd	r27, Y+20	; 0x14
 802:	bc 01       	movw	r22, r24
	TimerOn();
 804:	cd 01       	movw	r24, r26
	//LCD_init();
	//LCD_ClearScreen(); 

	//LCD_DisplayString(1, "1");

	initUSART(0);
 806:	bd dd       	rcall	.-1158   	; 0x382 <TimerSet>
 808:	ea dd       	rcall	.-1068   	; 0x3de <TimerOn>
		}
		while(!TimerFlag);
		TimerFlag = 0;

	}*/
	unsigned char duh = 'A';
 80a:	80 e0       	ldi	r24, 0x00	; 0
	while(1){
		//USART_Send(duh, 0);
		//USART_Send('b', 0);


		if( USART_HasReceived(0) != 0 )
 80c:	5d dc       	rcall	.-1862   	; 0xc8 <initUSART>
 80e:	81 e4       	ldi	r24, 0x41	; 65
 810:	8b a3       	std	Y+35, r24	; 0x23
 812:	80 e0       	ldi	r24, 0x00	; 0
		{
			
			Data_in = USART_Receive(0);
 814:	b6 dc       	rcall	.-1684   	; 0x182 <USART_HasReceived>
 816:	88 23       	and	r24, r24
 818:	e1 f3       	breq	.-8      	; 0x812 <main+0x166>
 81a:	80 e0       	ldi	r24, 0x00	; 0
			USART_Flush(0);
 81c:	23 dd       	rcall	.-1466   	; 0x264 <USART_Receive>
 81e:	80 93 25 01 	sts	0x0125, r24	; 0x800125 <Data_in>

			if(Data_in == '1')
 822:	80 e0       	ldi	r24, 0x00	; 0
 824:	c6 dc       	rcall	.-1652   	; 0x1b2 <USART_Flush>
 826:	80 91 25 01 	lds	r24, 0x0125	; 0x800125 <Data_in>
			{
				USART_Send(duh, 0);
 82a:	81 33       	cpi	r24, 0x31	; 49
 82c:	91 f7       	brne	.-28     	; 0x812 <main+0x166>
 82e:	60 e0       	ldi	r22, 0x00	; 0
 830:	8b a1       	ldd	r24, Y+35	; 0x23
				PORTB = 0x01;
 832:	e7 dc       	rcall	.-1586   	; 0x202 <USART_Send>
 834:	85 e2       	ldi	r24, 0x25	; 37
 836:	90 e0       	ldi	r25, 0x00	; 0
 838:	21 e0       	ldi	r18, 0x01	; 1
 83a:	fc 01       	movw	r30, r24
			}
		}
	}
 83c:	20 83       	st	Z, r18
 83e:	e9 cf       	rjmp	.-46     	; 0x812 <main+0x166>

00000840 <__udivmodsi4>:
 840:	a1 e2       	ldi	r26, 0x21	; 33
 842:	1a 2e       	mov	r1, r26
 844:	aa 1b       	sub	r26, r26
 846:	bb 1b       	sub	r27, r27
 848:	fd 01       	movw	r30, r26
 84a:	0d c0       	rjmp	.+26     	; 0x866 <__udivmodsi4_ep>

0000084c <__udivmodsi4_loop>:
 84c:	aa 1f       	adc	r26, r26
 84e:	bb 1f       	adc	r27, r27
 850:	ee 1f       	adc	r30, r30
 852:	ff 1f       	adc	r31, r31
 854:	a2 17       	cp	r26, r18
 856:	b3 07       	cpc	r27, r19
 858:	e4 07       	cpc	r30, r20
 85a:	f5 07       	cpc	r31, r21
 85c:	20 f0       	brcs	.+8      	; 0x866 <__udivmodsi4_ep>
 85e:	a2 1b       	sub	r26, r18
 860:	b3 0b       	sbc	r27, r19
 862:	e4 0b       	sbc	r30, r20
 864:	f5 0b       	sbc	r31, r21

00000866 <__udivmodsi4_ep>:
 866:	66 1f       	adc	r22, r22
 868:	77 1f       	adc	r23, r23
 86a:	88 1f       	adc	r24, r24
 86c:	99 1f       	adc	r25, r25
 86e:	1a 94       	dec	r1
 870:	69 f7       	brne	.-38     	; 0x84c <__udivmodsi4_loop>
 872:	60 95       	com	r22
 874:	70 95       	com	r23
 876:	80 95       	com	r24
 878:	90 95       	com	r25
 87a:	9b 01       	movw	r18, r22
 87c:	ac 01       	movw	r20, r24
 87e:	bd 01       	movw	r22, r26
 880:	cf 01       	movw	r24, r30
 882:	08 95       	ret

00000884 <strlen>:
 884:	fc 01       	movw	r30, r24
 886:	01 90       	ld	r0, Z+
 888:	00 20       	and	r0, r0
 88a:	e9 f7       	brne	.-6      	; 0x886 <strlen+0x2>
 88c:	80 95       	com	r24
 88e:	90 95       	com	r25
 890:	8e 0f       	add	r24, r30
 892:	9f 1f       	adc	r25, r31
 894:	08 95       	ret

00000896 <_exit>:
 896:	f8 94       	cli

00000898 <__stop_program>:
 898:	ff cf       	rjmp	.-2      	; 0x898 <__stop_program>
