
Master.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000016  00800100  00001666  000016fa  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001666  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000002f  00800116  00800116  00001710  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00001710  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000176c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000a0  00000000  00000000  000017ac  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000ec7  00000000  00000000  0000184c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000982  00000000  00000000  00002713  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000923  00000000  00000000  00003095  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000284  00000000  00000000  000039b8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000064f  00000000  00000000  00003c3c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000560  00000000  00000000  0000428b  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000090  00000000  00000000  000047eb  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
       2:	00 00       	nop
       4:	61 c0       	rjmp	.+194    	; 0xc8 <__bad_interrupt>
       6:	00 00       	nop
       8:	5f c0       	rjmp	.+190    	; 0xc8 <__bad_interrupt>
       a:	00 00       	nop
       c:	5d c0       	rjmp	.+186    	; 0xc8 <__bad_interrupt>
       e:	00 00       	nop
      10:	5b c0       	rjmp	.+182    	; 0xc8 <__bad_interrupt>
      12:	00 00       	nop
      14:	59 c0       	rjmp	.+178    	; 0xc8 <__bad_interrupt>
      16:	00 00       	nop
      18:	57 c0       	rjmp	.+174    	; 0xc8 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	55 c0       	rjmp	.+170    	; 0xc8 <__bad_interrupt>
      1e:	00 00       	nop
      20:	53 c0       	rjmp	.+166    	; 0xc8 <__bad_interrupt>
      22:	00 00       	nop
      24:	51 c0       	rjmp	.+162    	; 0xc8 <__bad_interrupt>
      26:	00 00       	nop
      28:	4f c0       	rjmp	.+158    	; 0xc8 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	4d c0       	rjmp	.+154    	; 0xc8 <__bad_interrupt>
      2e:	00 00       	nop
      30:	4b c0       	rjmp	.+150    	; 0xc8 <__bad_interrupt>
      32:	00 00       	nop
      34:	e6 c1       	rjmp	.+972    	; 0x402 <__vector_13>
      36:	00 00       	nop
      38:	47 c0       	rjmp	.+142    	; 0xc8 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	45 c0       	rjmp	.+138    	; 0xc8 <__bad_interrupt>
      3e:	00 00       	nop
      40:	43 c0       	rjmp	.+134    	; 0xc8 <__bad_interrupt>
      42:	00 00       	nop
      44:	41 c0       	rjmp	.+130    	; 0xc8 <__bad_interrupt>
      46:	00 00       	nop
      48:	3f c0       	rjmp	.+126    	; 0xc8 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	3d c0       	rjmp	.+122    	; 0xc8 <__bad_interrupt>
      4e:	00 00       	nop
      50:	3b c0       	rjmp	.+118    	; 0xc8 <__bad_interrupt>
      52:	00 00       	nop
      54:	39 c0       	rjmp	.+114    	; 0xc8 <__bad_interrupt>
      56:	00 00       	nop
      58:	37 c0       	rjmp	.+110    	; 0xc8 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	35 c0       	rjmp	.+106    	; 0xc8 <__bad_interrupt>
      5e:	00 00       	nop
      60:	33 c0       	rjmp	.+102    	; 0xc8 <__bad_interrupt>
      62:	00 00       	nop
      64:	31 c0       	rjmp	.+98     	; 0xc8 <__bad_interrupt>
      66:	00 00       	nop
      68:	2f c0       	rjmp	.+94     	; 0xc8 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	2d c0       	rjmp	.+90     	; 0xc8 <__bad_interrupt>
      6e:	00 00       	nop
      70:	2b c0       	rjmp	.+86     	; 0xc8 <__bad_interrupt>
      72:	00 00       	nop
      74:	29 c0       	rjmp	.+82     	; 0xc8 <__bad_interrupt>
      76:	00 00       	nop
      78:	27 c0       	rjmp	.+78     	; 0xc8 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	25 c0       	rjmp	.+74     	; 0xc8 <__bad_interrupt>
      7e:	00 00       	nop
      80:	23 c0       	rjmp	.+70     	; 0xc8 <__bad_interrupt>
      82:	00 00       	nop
      84:	21 c0       	rjmp	.+66     	; 0xc8 <__bad_interrupt>
      86:	00 00       	nop
      88:	1f c0       	rjmp	.+62     	; 0xc8 <__bad_interrupt>
	...

0000008c <__ctors_end>:
      8c:	11 24       	eor	r1, r1
      8e:	1f be       	out	0x3f, r1	; 63
      90:	cf ef       	ldi	r28, 0xFF	; 255
      92:	d0 e4       	ldi	r29, 0x40	; 64
      94:	de bf       	out	0x3e, r29	; 62
      96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
      98:	11 e0       	ldi	r17, 0x01	; 1
      9a:	a0 e0       	ldi	r26, 0x00	; 0
      9c:	b1 e0       	ldi	r27, 0x01	; 1
      9e:	e6 e6       	ldi	r30, 0x66	; 102
      a0:	f6 e1       	ldi	r31, 0x16	; 22
      a2:	00 e0       	ldi	r16, 0x00	; 0
      a4:	0b bf       	out	0x3b, r16	; 59
      a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
      a8:	07 90       	elpm	r0, Z+
      aa:	0d 92       	st	X+, r0
      ac:	a6 31       	cpi	r26, 0x16	; 22
      ae:	b1 07       	cpc	r27, r17
      b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
      b2:	21 e0       	ldi	r18, 0x01	; 1
      b4:	a6 e1       	ldi	r26, 0x16	; 22
      b6:	b1 e0       	ldi	r27, 0x01	; 1
      b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
      ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
      bc:	a5 34       	cpi	r26, 0x45	; 69
      be:	b2 07       	cpc	r27, r18
      c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
      c2:	39 d3       	rcall	.+1650   	; 0x736 <main>
      c4:	0c 94 31 0b 	jmp	0x1662	; 0x1662 <_exit>

000000c8 <__bad_interrupt>:
      c8:	9b cf       	rjmp	.-202    	; 0x0 <__vectors>

000000ca <initUSART>:
	SREG |= 0x80;	// 0x80: 1000000
}

void TimerOff() {
	TCCR1B 	= 0x00; // bit3bit2bit1bit0=0000: timer off
}
      ca:	cf 93       	push	r28
      cc:	df 93       	push	r29
      ce:	1f 92       	push	r1
      d0:	cd b7       	in	r28, 0x3d	; 61
      d2:	de b7       	in	r29, 0x3e	; 62
      d4:	89 83       	std	Y+1, r24	; 0x01
      d6:	89 81       	ldd	r24, Y+1	; 0x01
      d8:	81 30       	cpi	r24, 0x01	; 1
      da:	e1 f0       	breq	.+56     	; 0x114 <initUSART+0x4a>
      dc:	81 ec       	ldi	r24, 0xC1	; 193
      de:	90 e0       	ldi	r25, 0x00	; 0
      e0:	21 ec       	ldi	r18, 0xC1	; 193
      e2:	30 e0       	ldi	r19, 0x00	; 0
      e4:	f9 01       	movw	r30, r18
      e6:	20 81       	ld	r18, Z
      e8:	28 61       	ori	r18, 0x18	; 24
      ea:	fc 01       	movw	r30, r24
      ec:	20 83       	st	Z, r18
      ee:	82 ec       	ldi	r24, 0xC2	; 194
      f0:	90 e0       	ldi	r25, 0x00	; 0
      f2:	22 ec       	ldi	r18, 0xC2	; 194
      f4:	30 e0       	ldi	r19, 0x00	; 0
      f6:	f9 01       	movw	r30, r18
      f8:	20 81       	ld	r18, Z
      fa:	26 60       	ori	r18, 0x06	; 6
      fc:	fc 01       	movw	r30, r24
      fe:	20 83       	st	Z, r18
     100:	84 ec       	ldi	r24, 0xC4	; 196
     102:	90 e0       	ldi	r25, 0x00	; 0
     104:	23 e3       	ldi	r18, 0x33	; 51
     106:	fc 01       	movw	r30, r24
     108:	20 83       	st	Z, r18
     10a:	85 ec       	ldi	r24, 0xC5	; 197
     10c:	90 e0       	ldi	r25, 0x00	; 0
     10e:	fc 01       	movw	r30, r24
     110:	10 82       	st	Z, r1
     112:	1b c0       	rjmp	.+54     	; 0x14a <initUSART+0x80>
     114:	89 ec       	ldi	r24, 0xC9	; 201
     116:	90 e0       	ldi	r25, 0x00	; 0
     118:	29 ec       	ldi	r18, 0xC9	; 201
     11a:	30 e0       	ldi	r19, 0x00	; 0
     11c:	f9 01       	movw	r30, r18
     11e:	20 81       	ld	r18, Z
     120:	28 61       	ori	r18, 0x18	; 24
     122:	fc 01       	movw	r30, r24
     124:	20 83       	st	Z, r18
     126:	8a ec       	ldi	r24, 0xCA	; 202
     128:	90 e0       	ldi	r25, 0x00	; 0
     12a:	2a ec       	ldi	r18, 0xCA	; 202
     12c:	30 e0       	ldi	r19, 0x00	; 0
     12e:	f9 01       	movw	r30, r18
     130:	20 81       	ld	r18, Z
     132:	26 60       	ori	r18, 0x06	; 6
     134:	fc 01       	movw	r30, r24
     136:	20 83       	st	Z, r18
     138:	8c ec       	ldi	r24, 0xCC	; 204
     13a:	90 e0       	ldi	r25, 0x00	; 0
     13c:	23 e3       	ldi	r18, 0x33	; 51
     13e:	fc 01       	movw	r30, r24
     140:	20 83       	st	Z, r18
     142:	8d ec       	ldi	r24, 0xCD	; 205
     144:	90 e0       	ldi	r25, 0x00	; 0
     146:	fc 01       	movw	r30, r24
     148:	10 82       	st	Z, r1
     14a:	00 00       	nop
     14c:	0f 90       	pop	r0
     14e:	df 91       	pop	r29
     150:	cf 91       	pop	r28
     152:	08 95       	ret

00000154 <USART_IsSendReady>:
     154:	cf 93       	push	r28
     156:	df 93       	push	r29
     158:	1f 92       	push	r1
     15a:	cd b7       	in	r28, 0x3d	; 61
     15c:	de b7       	in	r29, 0x3e	; 62
     15e:	89 83       	std	Y+1, r24	; 0x01
     160:	89 81       	ldd	r24, Y+1	; 0x01
     162:	81 30       	cpi	r24, 0x01	; 1
     164:	31 f0       	breq	.+12     	; 0x172 <USART_IsSendReady+0x1e>
     166:	80 ec       	ldi	r24, 0xC0	; 192
     168:	90 e0       	ldi	r25, 0x00	; 0
     16a:	fc 01       	movw	r30, r24
     16c:	80 81       	ld	r24, Z
     16e:	80 72       	andi	r24, 0x20	; 32
     170:	05 c0       	rjmp	.+10     	; 0x17c <USART_IsSendReady+0x28>
     172:	88 ec       	ldi	r24, 0xC8	; 200
     174:	90 e0       	ldi	r25, 0x00	; 0
     176:	fc 01       	movw	r30, r24
     178:	80 81       	ld	r24, Z
     17a:	80 72       	andi	r24, 0x20	; 32
     17c:	0f 90       	pop	r0
     17e:	df 91       	pop	r29
     180:	cf 91       	pop	r28
     182:	08 95       	ret

00000184 <USART_HasReceived>:
     184:	cf 93       	push	r28
     186:	df 93       	push	r29
     188:	1f 92       	push	r1
     18a:	cd b7       	in	r28, 0x3d	; 61
     18c:	de b7       	in	r29, 0x3e	; 62
     18e:	89 83       	std	Y+1, r24	; 0x01
     190:	89 81       	ldd	r24, Y+1	; 0x01
     192:	81 30       	cpi	r24, 0x01	; 1
     194:	31 f0       	breq	.+12     	; 0x1a2 <USART_HasReceived+0x1e>
     196:	80 ec       	ldi	r24, 0xC0	; 192
     198:	90 e0       	ldi	r25, 0x00	; 0
     19a:	fc 01       	movw	r30, r24
     19c:	80 81       	ld	r24, Z
     19e:	80 78       	andi	r24, 0x80	; 128
     1a0:	05 c0       	rjmp	.+10     	; 0x1ac <USART_HasReceived+0x28>
     1a2:	88 ec       	ldi	r24, 0xC8	; 200
     1a4:	90 e0       	ldi	r25, 0x00	; 0
     1a6:	fc 01       	movw	r30, r24
     1a8:	80 81       	ld	r24, Z
     1aa:	80 78       	andi	r24, 0x80	; 128
     1ac:	0f 90       	pop	r0
     1ae:	df 91       	pop	r29
     1b0:	cf 91       	pop	r28
     1b2:	08 95       	ret

000001b4 <USART_Flush>:
     1b4:	cf 93       	push	r28
     1b6:	df 93       	push	r29
     1b8:	1f 92       	push	r1
     1ba:	cd b7       	in	r28, 0x3d	; 61
     1bc:	de b7       	in	r29, 0x3e	; 62
     1be:	89 83       	std	Y+1, r24	; 0x01
     1c0:	89 81       	ldd	r24, Y+1	; 0x01
     1c2:	81 30       	cpi	r24, 0x01	; 1
     1c4:	a1 f0       	breq	.+40     	; 0x1ee <USART_Flush+0x3a>
     1c6:	06 c0       	rjmp	.+12     	; 0x1d4 <USART_Flush+0x20>
     1c8:	86 ec       	ldi	r24, 0xC6	; 198
     1ca:	90 e0       	ldi	r25, 0x00	; 0
     1cc:	fc 01       	movw	r30, r24
     1ce:	80 81       	ld	r24, Z
     1d0:	80 93 1d 01 	sts	0x011D, r24	; 0x80011d <dummy.1749>
     1d4:	80 ec       	ldi	r24, 0xC0	; 192
     1d6:	90 e0       	ldi	r25, 0x00	; 0
     1d8:	fc 01       	movw	r30, r24
     1da:	80 81       	ld	r24, Z
     1dc:	88 23       	and	r24, r24
     1de:	a4 f3       	brlt	.-24     	; 0x1c8 <USART_Flush+0x14>
     1e0:	0c c0       	rjmp	.+24     	; 0x1fa <USART_Flush+0x46>
     1e2:	8e ec       	ldi	r24, 0xCE	; 206
     1e4:	90 e0       	ldi	r25, 0x00	; 0
     1e6:	fc 01       	movw	r30, r24
     1e8:	80 81       	ld	r24, Z
     1ea:	80 93 1d 01 	sts	0x011D, r24	; 0x80011d <dummy.1749>
     1ee:	88 ec       	ldi	r24, 0xC8	; 200
     1f0:	90 e0       	ldi	r25, 0x00	; 0
     1f2:	fc 01       	movw	r30, r24
     1f4:	80 81       	ld	r24, Z
     1f6:	88 23       	and	r24, r24
     1f8:	a4 f3       	brlt	.-24     	; 0x1e2 <USART_Flush+0x2e>
     1fa:	00 00       	nop
     1fc:	0f 90       	pop	r0
     1fe:	df 91       	pop	r29
     200:	cf 91       	pop	r28
     202:	08 95       	ret

00000204 <USART_Receive>:
     204:	cf 93       	push	r28
     206:	df 93       	push	r29
     208:	1f 92       	push	r1
     20a:	cd b7       	in	r28, 0x3d	; 61
     20c:	de b7       	in	r29, 0x3e	; 62
     20e:	89 83       	std	Y+1, r24	; 0x01
     210:	89 81       	ldd	r24, Y+1	; 0x01
     212:	81 30       	cpi	r24, 0x01	; 1
     214:	61 f0       	breq	.+24     	; 0x22e <USART_Receive+0x2a>
     216:	00 00       	nop
     218:	80 ec       	ldi	r24, 0xC0	; 192
     21a:	90 e0       	ldi	r25, 0x00	; 0
     21c:	fc 01       	movw	r30, r24
     21e:	80 81       	ld	r24, Z
     220:	88 23       	and	r24, r24
     222:	d4 f7       	brge	.-12     	; 0x218 <USART_Receive+0x14>
     224:	86 ec       	ldi	r24, 0xC6	; 198
     226:	90 e0       	ldi	r25, 0x00	; 0
     228:	fc 01       	movw	r30, r24
     22a:	80 81       	ld	r24, Z
     22c:	0b c0       	rjmp	.+22     	; 0x244 <USART_Receive+0x40>
     22e:	00 00       	nop
     230:	88 ec       	ldi	r24, 0xC8	; 200
     232:	90 e0       	ldi	r25, 0x00	; 0
     234:	fc 01       	movw	r30, r24
     236:	80 81       	ld	r24, Z
     238:	88 23       	and	r24, r24
     23a:	d4 f7       	brge	.-12     	; 0x230 <USART_Receive+0x2c>
     23c:	8e ec       	ldi	r24, 0xCE	; 206
     23e:	90 e0       	ldi	r25, 0x00	; 0
     240:	fc 01       	movw	r30, r24
     242:	80 81       	ld	r24, Z
     244:	0f 90       	pop	r0
     246:	df 91       	pop	r29
     248:	cf 91       	pop	r28
     24a:	08 95       	ret

0000024c <USART_SendString>:
     24c:	cf 93       	push	r28
     24e:	df 93       	push	r29
     250:	cd b7       	in	r28, 0x3d	; 61
     252:	de b7       	in	r29, 0x3e	; 62
     254:	27 97       	sbiw	r28, 0x07	; 7
     256:	0f b6       	in	r0, 0x3f	; 63
     258:	f8 94       	cli
     25a:	de bf       	out	0x3e, r29	; 62
     25c:	0f be       	out	0x3f, r0	; 63
     25e:	cd bf       	out	0x3d, r28	; 61
     260:	9e 83       	std	Y+6, r25	; 0x06
     262:	8d 83       	std	Y+5, r24	; 0x05
     264:	6f 83       	std	Y+7, r22	; 0x07
     266:	8f 81       	ldd	r24, Y+7	; 0x07
     268:	81 30       	cpi	r24, 0x01	; 1
     26a:	49 f1       	breq	.+82     	; 0x2be <USART_SendString+0x72>
     26c:	1a 82       	std	Y+2, r1	; 0x02
     26e:	19 82       	std	Y+1, r1	; 0x01
     270:	1c c0       	rjmp	.+56     	; 0x2aa <USART_SendString+0x5e>
     272:	00 00       	nop
     274:	80 ec       	ldi	r24, 0xC0	; 192
     276:	90 e0       	ldi	r25, 0x00	; 0
     278:	fc 01       	movw	r30, r24
     27a:	80 81       	ld	r24, Z
     27c:	88 2f       	mov	r24, r24
     27e:	90 e0       	ldi	r25, 0x00	; 0
     280:	80 72       	andi	r24, 0x20	; 32
     282:	99 27       	eor	r25, r25
     284:	89 2b       	or	r24, r25
     286:	b1 f3       	breq	.-20     	; 0x274 <USART_SendString+0x28>
     288:	86 ec       	ldi	r24, 0xC6	; 198
     28a:	90 e0       	ldi	r25, 0x00	; 0
     28c:	29 81       	ldd	r18, Y+1	; 0x01
     28e:	3a 81       	ldd	r19, Y+2	; 0x02
     290:	4d 81       	ldd	r20, Y+5	; 0x05
     292:	5e 81       	ldd	r21, Y+6	; 0x06
     294:	24 0f       	add	r18, r20
     296:	35 1f       	adc	r19, r21
     298:	f9 01       	movw	r30, r18
     29a:	20 81       	ld	r18, Z
     29c:	fc 01       	movw	r30, r24
     29e:	20 83       	st	Z, r18
     2a0:	89 81       	ldd	r24, Y+1	; 0x01
     2a2:	9a 81       	ldd	r25, Y+2	; 0x02
     2a4:	01 96       	adiw	r24, 0x01	; 1
     2a6:	9a 83       	std	Y+2, r25	; 0x02
     2a8:	89 83       	std	Y+1, r24	; 0x01
     2aa:	8d 81       	ldd	r24, Y+5	; 0x05
     2ac:	9e 81       	ldd	r25, Y+6	; 0x06
     2ae:	f5 d6       	rcall	.+3562   	; 0x109a <strlen>
     2b0:	9c 01       	movw	r18, r24
     2b2:	89 81       	ldd	r24, Y+1	; 0x01
     2b4:	9a 81       	ldd	r25, Y+2	; 0x02
     2b6:	82 17       	cp	r24, r18
     2b8:	93 07       	cpc	r25, r19
     2ba:	d8 f2       	brcs	.-74     	; 0x272 <USART_SendString+0x26>
     2bc:	28 c0       	rjmp	.+80     	; 0x30e <USART_SendString+0xc2>
     2be:	1c 82       	std	Y+4, r1	; 0x04
     2c0:	1b 82       	std	Y+3, r1	; 0x03
     2c2:	1c c0       	rjmp	.+56     	; 0x2fc <USART_SendString+0xb0>
     2c4:	00 00       	nop
     2c6:	88 ec       	ldi	r24, 0xC8	; 200
     2c8:	90 e0       	ldi	r25, 0x00	; 0
     2ca:	fc 01       	movw	r30, r24
     2cc:	80 81       	ld	r24, Z
     2ce:	88 2f       	mov	r24, r24
     2d0:	90 e0       	ldi	r25, 0x00	; 0
     2d2:	80 72       	andi	r24, 0x20	; 32
     2d4:	99 27       	eor	r25, r25
     2d6:	89 2b       	or	r24, r25
     2d8:	b1 f3       	breq	.-20     	; 0x2c6 <USART_SendString+0x7a>
     2da:	8e ec       	ldi	r24, 0xCE	; 206
     2dc:	90 e0       	ldi	r25, 0x00	; 0
     2de:	2b 81       	ldd	r18, Y+3	; 0x03
     2e0:	3c 81       	ldd	r19, Y+4	; 0x04
     2e2:	4d 81       	ldd	r20, Y+5	; 0x05
     2e4:	5e 81       	ldd	r21, Y+6	; 0x06
     2e6:	24 0f       	add	r18, r20
     2e8:	35 1f       	adc	r19, r21
     2ea:	f9 01       	movw	r30, r18
     2ec:	20 81       	ld	r18, Z
     2ee:	fc 01       	movw	r30, r24
     2f0:	20 83       	st	Z, r18
     2f2:	8b 81       	ldd	r24, Y+3	; 0x03
     2f4:	9c 81       	ldd	r25, Y+4	; 0x04
     2f6:	01 96       	adiw	r24, 0x01	; 1
     2f8:	9c 83       	std	Y+4, r25	; 0x04
     2fa:	8b 83       	std	Y+3, r24	; 0x03
     2fc:	8d 81       	ldd	r24, Y+5	; 0x05
     2fe:	9e 81       	ldd	r25, Y+6	; 0x06
     300:	cc d6       	rcall	.+3480   	; 0x109a <strlen>
     302:	9c 01       	movw	r18, r24
     304:	8b 81       	ldd	r24, Y+3	; 0x03
     306:	9c 81       	ldd	r25, Y+4	; 0x04
     308:	82 17       	cp	r24, r18
     30a:	93 07       	cpc	r25, r19
     30c:	d8 f2       	brcs	.-74     	; 0x2c4 <USART_SendString+0x78>
     30e:	00 00       	nop
     310:	27 96       	adiw	r28, 0x07	; 7
     312:	0f b6       	in	r0, 0x3f	; 63
     314:	f8 94       	cli
     316:	de bf       	out	0x3e, r29	; 62
     318:	0f be       	out	0x3f, r0	; 63
     31a:	cd bf       	out	0x3d, r28	; 61
     31c:	df 91       	pop	r29
     31e:	cf 91       	pop	r28
     320:	08 95       	ret

00000322 <TimerSet>:
     322:	cf 93       	push	r28
     324:	df 93       	push	r29
     326:	00 d0       	rcall	.+0      	; 0x328 <TimerSet+0x6>
     328:	00 d0       	rcall	.+0      	; 0x32a <TimerSet+0x8>
     32a:	cd b7       	in	r28, 0x3d	; 61
     32c:	de b7       	in	r29, 0x3e	; 62
     32e:	69 83       	std	Y+1, r22	; 0x01
     330:	7a 83       	std	Y+2, r23	; 0x02
     332:	8b 83       	std	Y+3, r24	; 0x03
     334:	9c 83       	std	Y+4, r25	; 0x04
     336:	89 81       	ldd	r24, Y+1	; 0x01
     338:	9a 81       	ldd	r25, Y+2	; 0x02
     33a:	ab 81       	ldd	r26, Y+3	; 0x03
     33c:	bc 81       	ldd	r27, Y+4	; 0x04
     33e:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
     342:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__data_start+0x1>
     346:	a0 93 02 01 	sts	0x0102, r26	; 0x800102 <__data_start+0x2>
     34a:	b0 93 03 01 	sts	0x0103, r27	; 0x800103 <__data_start+0x3>
     34e:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
     352:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
     356:	a0 91 02 01 	lds	r26, 0x0102	; 0x800102 <__data_start+0x2>
     35a:	b0 91 03 01 	lds	r27, 0x0103	; 0x800103 <__data_start+0x3>
     35e:	80 93 17 01 	sts	0x0117, r24	; 0x800117 <_avr_timer_cntcurr>
     362:	90 93 18 01 	sts	0x0118, r25	; 0x800118 <_avr_timer_cntcurr+0x1>
     366:	a0 93 19 01 	sts	0x0119, r26	; 0x800119 <_avr_timer_cntcurr+0x2>
     36a:	b0 93 1a 01 	sts	0x011A, r27	; 0x80011a <_avr_timer_cntcurr+0x3>
     36e:	00 00       	nop
     370:	0f 90       	pop	r0
     372:	0f 90       	pop	r0
     374:	0f 90       	pop	r0
     376:	0f 90       	pop	r0
     378:	df 91       	pop	r29
     37a:	cf 91       	pop	r28
     37c:	08 95       	ret

0000037e <TimerOn>:
     37e:	cf 93       	push	r28
     380:	df 93       	push	r29
     382:	cd b7       	in	r28, 0x3d	; 61
     384:	de b7       	in	r29, 0x3e	; 62
     386:	81 e8       	ldi	r24, 0x81	; 129
     388:	90 e0       	ldi	r25, 0x00	; 0
     38a:	2b e0       	ldi	r18, 0x0B	; 11
     38c:	fc 01       	movw	r30, r24
     38e:	20 83       	st	Z, r18
     390:	88 e8       	ldi	r24, 0x88	; 136
     392:	90 e0       	ldi	r25, 0x00	; 0
     394:	2d e7       	ldi	r18, 0x7D	; 125
     396:	30 e0       	ldi	r19, 0x00	; 0
     398:	fc 01       	movw	r30, r24
     39a:	31 83       	std	Z+1, r19	; 0x01
     39c:	20 83       	st	Z, r18
     39e:	8f e6       	ldi	r24, 0x6F	; 111
     3a0:	90 e0       	ldi	r25, 0x00	; 0
     3a2:	22 e0       	ldi	r18, 0x02	; 2
     3a4:	fc 01       	movw	r30, r24
     3a6:	20 83       	st	Z, r18
     3a8:	84 e8       	ldi	r24, 0x84	; 132
     3aa:	90 e0       	ldi	r25, 0x00	; 0
     3ac:	fc 01       	movw	r30, r24
     3ae:	11 82       	std	Z+1, r1	; 0x01
     3b0:	10 82       	st	Z, r1
     3b2:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
     3b6:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
     3ba:	a0 91 02 01 	lds	r26, 0x0102	; 0x800102 <__data_start+0x2>
     3be:	b0 91 03 01 	lds	r27, 0x0103	; 0x800103 <__data_start+0x3>
     3c2:	80 93 17 01 	sts	0x0117, r24	; 0x800117 <_avr_timer_cntcurr>
     3c6:	90 93 18 01 	sts	0x0118, r25	; 0x800118 <_avr_timer_cntcurr+0x1>
     3ca:	a0 93 19 01 	sts	0x0119, r26	; 0x800119 <_avr_timer_cntcurr+0x2>
     3ce:	b0 93 1a 01 	sts	0x011A, r27	; 0x80011a <_avr_timer_cntcurr+0x3>
     3d2:	8f e5       	ldi	r24, 0x5F	; 95
     3d4:	90 e0       	ldi	r25, 0x00	; 0
     3d6:	2f e5       	ldi	r18, 0x5F	; 95
     3d8:	30 e0       	ldi	r19, 0x00	; 0
     3da:	f9 01       	movw	r30, r18
     3dc:	20 81       	ld	r18, Z
     3de:	20 68       	ori	r18, 0x80	; 128
     3e0:	fc 01       	movw	r30, r24
     3e2:	20 83       	st	Z, r18
     3e4:	00 00       	nop
     3e6:	df 91       	pop	r29
     3e8:	cf 91       	pop	r28
     3ea:	08 95       	ret

000003ec <TimerISR>:

void TimerISR() {
     3ec:	cf 93       	push	r28
     3ee:	df 93       	push	r29
     3f0:	cd b7       	in	r28, 0x3d	; 61
     3f2:	de b7       	in	r29, 0x3e	; 62
	TimerFlag = 1;
     3f4:	81 e0       	ldi	r24, 0x01	; 1
     3f6:	80 93 16 01 	sts	0x0116, r24	; 0x800116 <__data_end>
}
     3fa:	00 00       	nop
     3fc:	df 91       	pop	r29
     3fe:	cf 91       	pop	r28
     400:	08 95       	ret

00000402 <__vector_13>:

// In our approach, the C programmer does not touch this ISR, but rather TimerISR()
ISR(TIMER1_COMPA_vect)
{
     402:	1f 92       	push	r1
     404:	0f 92       	push	r0
     406:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
     40a:	0f 92       	push	r0
     40c:	11 24       	eor	r1, r1
     40e:	00 90 5b 00 	lds	r0, 0x005B	; 0x80005b <__TEXT_REGION_LENGTH__+0x7e005b>
     412:	0f 92       	push	r0
     414:	2f 93       	push	r18
     416:	3f 93       	push	r19
     418:	4f 93       	push	r20
     41a:	5f 93       	push	r21
     41c:	6f 93       	push	r22
     41e:	7f 93       	push	r23
     420:	8f 93       	push	r24
     422:	9f 93       	push	r25
     424:	af 93       	push	r26
     426:	bf 93       	push	r27
     428:	ef 93       	push	r30
     42a:	ff 93       	push	r31
     42c:	cf 93       	push	r28
     42e:	df 93       	push	r29
     430:	cd b7       	in	r28, 0x3d	; 61
     432:	de b7       	in	r29, 0x3e	; 62
	// CPU automatically calls when TCNT0 == OCR0 (every 1 ms per TimerOn settings)
	_avr_timer_cntcurr--; 			// Count down to 0 rather than up to TOP
     434:	80 91 17 01 	lds	r24, 0x0117	; 0x800117 <_avr_timer_cntcurr>
     438:	90 91 18 01 	lds	r25, 0x0118	; 0x800118 <_avr_timer_cntcurr+0x1>
     43c:	a0 91 19 01 	lds	r26, 0x0119	; 0x800119 <_avr_timer_cntcurr+0x2>
     440:	b0 91 1a 01 	lds	r27, 0x011A	; 0x80011a <_avr_timer_cntcurr+0x3>
     444:	01 97       	sbiw	r24, 0x01	; 1
     446:	a1 09       	sbc	r26, r1
     448:	b1 09       	sbc	r27, r1
     44a:	80 93 17 01 	sts	0x0117, r24	; 0x800117 <_avr_timer_cntcurr>
     44e:	90 93 18 01 	sts	0x0118, r25	; 0x800118 <_avr_timer_cntcurr+0x1>
     452:	a0 93 19 01 	sts	0x0119, r26	; 0x800119 <_avr_timer_cntcurr+0x2>
     456:	b0 93 1a 01 	sts	0x011A, r27	; 0x80011a <_avr_timer_cntcurr+0x3>
	if (_avr_timer_cntcurr == 0) { 	// results in a more efficient compare
     45a:	80 91 17 01 	lds	r24, 0x0117	; 0x800117 <_avr_timer_cntcurr>
     45e:	90 91 18 01 	lds	r25, 0x0118	; 0x800118 <_avr_timer_cntcurr+0x1>
     462:	a0 91 19 01 	lds	r26, 0x0119	; 0x800119 <_avr_timer_cntcurr+0x2>
     466:	b0 91 1a 01 	lds	r27, 0x011A	; 0x80011a <_avr_timer_cntcurr+0x3>
     46a:	89 2b       	or	r24, r25
     46c:	8a 2b       	or	r24, r26
     46e:	8b 2b       	or	r24, r27
		TimerISR(); 				// Call the ISR that the user uses
     470:	89 f4       	brne	.+34     	; 0x494 <__vector_13+0x92>
		_avr_timer_cntcurr = _avr_timer_M;
     472:	bc df       	rcall	.-136    	; 0x3ec <TimerISR>
     474:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
     478:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
     47c:	a0 91 02 01 	lds	r26, 0x0102	; 0x800102 <__data_start+0x2>
     480:	b0 91 03 01 	lds	r27, 0x0103	; 0x800103 <__data_start+0x3>
     484:	80 93 17 01 	sts	0x0117, r24	; 0x800117 <_avr_timer_cntcurr>
     488:	90 93 18 01 	sts	0x0118, r25	; 0x800118 <_avr_timer_cntcurr+0x1>
     48c:	a0 93 19 01 	sts	0x0119, r26	; 0x800119 <_avr_timer_cntcurr+0x2>
     490:	b0 93 1a 01 	sts	0x011A, r27	; 0x80011a <_avr_timer_cntcurr+0x3>
	}
}
     494:	00 00       	nop
     496:	df 91       	pop	r29
     498:	cf 91       	pop	r28
     49a:	ff 91       	pop	r31
     49c:	ef 91       	pop	r30
     49e:	bf 91       	pop	r27
     4a0:	af 91       	pop	r26
     4a2:	9f 91       	pop	r25
     4a4:	8f 91       	pop	r24
     4a6:	7f 91       	pop	r23
     4a8:	6f 91       	pop	r22
     4aa:	5f 91       	pop	r21
     4ac:	4f 91       	pop	r20
     4ae:	3f 91       	pop	r19
     4b0:	2f 91       	pop	r18
     4b2:	0f 90       	pop	r0
     4b4:	00 92 5b 00 	sts	0x005B, r0	; 0x80005b <__TEXT_REGION_LENGTH__+0x7e005b>
     4b8:	0f 90       	pop	r0
     4ba:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
     4be:	0f 90       	pop	r0
     4c0:	1f 90       	pop	r1
     4c2:	18 95       	reti

000004c4 <findGCD>:
////////////////////////////////////////////////////////////////////////////////
//Functionality - finds the greatest common divisor of two values
//Parameter: Two long int's to find their GCD
//Returns: GCD else 0
unsigned long int findGCD(unsigned long int a, unsigned long int b)
{
     4c4:	cf 93       	push	r28
     4c6:	df 93       	push	r29
     4c8:	cd b7       	in	r28, 0x3d	; 61
     4ca:	de b7       	in	r29, 0x3e	; 62
     4cc:	2c 97       	sbiw	r28, 0x0c	; 12
     4ce:	0f b6       	in	r0, 0x3f	; 63
     4d0:	f8 94       	cli
     4d2:	de bf       	out	0x3e, r29	; 62
     4d4:	0f be       	out	0x3f, r0	; 63
     4d6:	cd bf       	out	0x3d, r28	; 61
     4d8:	6d 83       	std	Y+5, r22	; 0x05
     4da:	7e 83       	std	Y+6, r23	; 0x06
     4dc:	8f 83       	std	Y+7, r24	; 0x07
     4de:	98 87       	std	Y+8, r25	; 0x08
     4e0:	29 87       	std	Y+9, r18	; 0x09
     4e2:	3a 87       	std	Y+10, r19	; 0x0a
     4e4:	4b 87       	std	Y+11, r20	; 0x0b
     4e6:	5c 87       	std	Y+12, r21	; 0x0c
	unsigned long int c;
	while(1){
		c = a % b;
     4e8:	8d 81       	ldd	r24, Y+5	; 0x05
     4ea:	9e 81       	ldd	r25, Y+6	; 0x06
     4ec:	af 81       	ldd	r26, Y+7	; 0x07
     4ee:	b8 85       	ldd	r27, Y+8	; 0x08
     4f0:	29 85       	ldd	r18, Y+9	; 0x09
     4f2:	3a 85       	ldd	r19, Y+10	; 0x0a
     4f4:	4b 85       	ldd	r20, Y+11	; 0x0b
     4f6:	5c 85       	ldd	r21, Y+12	; 0x0c
     4f8:	bc 01       	movw	r22, r24
     4fa:	cd 01       	movw	r24, r26
     4fc:	ac d5       	rcall	.+2904   	; 0x1056 <__udivmodsi4>
     4fe:	dc 01       	movw	r26, r24
     500:	cb 01       	movw	r24, r22
     502:	89 83       	std	Y+1, r24	; 0x01
     504:	9a 83       	std	Y+2, r25	; 0x02
     506:	ab 83       	std	Y+3, r26	; 0x03
     508:	bc 83       	std	Y+4, r27	; 0x04
		if( c == 0 ) { return b; }
     50a:	89 81       	ldd	r24, Y+1	; 0x01
     50c:	9a 81       	ldd	r25, Y+2	; 0x02
     50e:	ab 81       	ldd	r26, Y+3	; 0x03
     510:	bc 81       	ldd	r27, Y+4	; 0x04
     512:	89 2b       	or	r24, r25
     514:	8a 2b       	or	r24, r26
     516:	8b 2b       	or	r24, r27
     518:	29 f4       	brne	.+10     	; 0x524 <findGCD+0x60>
     51a:	89 85       	ldd	r24, Y+9	; 0x09
     51c:	9a 85       	ldd	r25, Y+10	; 0x0a
     51e:	ab 85       	ldd	r26, Y+11	; 0x0b
     520:	bc 85       	ldd	r27, Y+12	; 0x0c
     522:	11 c0       	rjmp	.+34     	; 0x546 <findGCD+0x82>
		a = b;
     524:	89 85       	ldd	r24, Y+9	; 0x09
     526:	9a 85       	ldd	r25, Y+10	; 0x0a
     528:	ab 85       	ldd	r26, Y+11	; 0x0b
     52a:	bc 85       	ldd	r27, Y+12	; 0x0c
     52c:	8d 83       	std	Y+5, r24	; 0x05
     52e:	9e 83       	std	Y+6, r25	; 0x06
     530:	af 83       	std	Y+7, r26	; 0x07
     532:	b8 87       	std	Y+8, r27	; 0x08
		b = c;
     534:	89 81       	ldd	r24, Y+1	; 0x01
     536:	9a 81       	ldd	r25, Y+2	; 0x02
     538:	ab 81       	ldd	r26, Y+3	; 0x03
     53a:	bc 81       	ldd	r27, Y+4	; 0x04
     53c:	89 87       	std	Y+9, r24	; 0x09
     53e:	9a 87       	std	Y+10, r25	; 0x0a
     540:	ab 87       	std	Y+11, r26	; 0x0b
     542:	bc 87       	std	Y+12, r27	; 0x0c
	}
     544:	d1 cf       	rjmp	.-94     	; 0x4e8 <findGCD+0x24>
	return 0;
}
     546:	bc 01       	movw	r22, r24
     548:	cd 01       	movw	r24, r26
     54a:	2c 96       	adiw	r28, 0x0c	; 12
     54c:	0f b6       	in	r0, 0x3f	; 63
     54e:	f8 94       	cli
     550:	de bf       	out	0x3e, r29	; 62
     552:	0f be       	out	0x3f, r0	; 63
     554:	cd bf       	out	0x3d, r28	; 61
     556:	df 91       	pop	r29
     558:	cf 91       	pop	r28
     55a:	08 95       	ret

0000055c <SMTick1>:
//--------End Shared Variables------------------------------------------------

//--------User defined FSMs---------------------------------------------------
enum SM1_States { SM1_wait, SM1_press, SM1_release, SM1_neither };
//Enumeration of states.
int SMTick1(int state) {
     55c:	cf 93       	push	r28
     55e:	df 93       	push	r29
     560:	00 d0       	rcall	.+0      	; 0x562 <SMTick1+0x6>
     562:	cd b7       	in	r28, 0x3d	; 61
     564:	de b7       	in	r29, 0x3e	; 62
     566:	9a 83       	std	Y+2, r25	; 0x02
     568:	89 83       	std	Y+1, r24	; 0x01
	// Local Variables
	
	//transitions
	switch (state) {
     56a:	89 81       	ldd	r24, Y+1	; 0x01
     56c:	9a 81       	ldd	r25, Y+2	; 0x02
     56e:	82 30       	cpi	r24, 0x02	; 2
     570:	91 05       	cpc	r25, r1
     572:	09 f1       	breq	.+66     	; 0x5b6 <SMTick1+0x5a>
     574:	83 30       	cpi	r24, 0x03	; 3
     576:	91 05       	cpc	r25, r1
     578:	19 f1       	breq	.+70     	; 0x5c0 <SMTick1+0x64>
     57a:	89 2b       	or	r24, r25
     57c:	31 f5       	brne	.+76     	; 0x5ca <SMTick1+0x6e>
		case SM1_wait:
		// receive data from Bluetooth device
		if( USART_HasReceived(0) != 0 )
     57e:	80 e0       	ldi	r24, 0x00	; 0
     580:	01 de       	rcall	.-1022   	; 0x184 <USART_HasReceived>
     582:	88 23       	and	r24, r24
		{
		
			Data_in = USART_Receive(0);
     584:	31 f0       	breq	.+12     	; 0x592 <SMTick1+0x36>
     586:	80 e0       	ldi	r24, 0x00	; 0
     588:	3d de       	rcall	.-902    	; 0x204 <USART_Receive>
			USART_Flush(0);
     58a:	80 93 29 01 	sts	0x0129, r24	; 0x800129 <Data_in>
     58e:	80 e0       	ldi	r24, 0x00	; 0
			
		}
		if(Data_in =='1')
     590:	11 de       	rcall	.-990    	; 0x1b4 <USART_Flush>
     592:	80 91 29 01 	lds	r24, 0x0129	; 0x800129 <Data_in>
     596:	81 33       	cpi	r24, 0x31	; 49
		{
			state = SM1_press;
     598:	29 f4       	brne	.+10     	; 0x5a4 <SMTick1+0x48>
     59a:	81 e0       	ldi	r24, 0x01	; 1
     59c:	90 e0       	ldi	r25, 0x00	; 0
     59e:	9a 83       	std	Y+2, r25	; 0x02
		}
		//else
		//{
			//state = SM1_neither;
		//}
		break;
     5a0:	89 83       	std	Y+1, r24	; 0x01
		}
		if(Data_in =='1')
		{
			state = SM1_press;
		}
		else if(Data_in == '2')
     5a2:	16 c0       	rjmp	.+44     	; 0x5d0 <SMTick1+0x74>
     5a4:	80 91 29 01 	lds	r24, 0x0129	; 0x800129 <Data_in>
     5a8:	82 33       	cpi	r24, 0x32	; 50
		{
			state = SM1_release;
     5aa:	91 f4       	brne	.+36     	; 0x5d0 <SMTick1+0x74>
     5ac:	82 e0       	ldi	r24, 0x02	; 2
     5ae:	90 e0       	ldi	r25, 0x00	; 0
     5b0:	9a 83       	std	Y+2, r25	; 0x02
		}
		//else
		//{
			//state = SM1_neither;
		//}
		break;
     5b2:	89 83       	std	Y+1, r24	; 0x01
		SM1_press:
			state = SM1_wait;
		break;

		case SM1_release:
			Data_in = 0;
     5b4:	0d c0       	rjmp	.+26     	; 0x5d0 <SMTick1+0x74>
     5b6:	10 92 29 01 	sts	0x0129, r1	; 0x800129 <Data_in>
			state = SM1_wait;
     5ba:	1a 82       	std	Y+2, r1	; 0x02
		break;
     5bc:	19 82       	std	Y+1, r1	; 0x01

		case SM1_neither:
			Data_in = 0;
     5be:	09 c0       	rjmp	.+18     	; 0x5d2 <SMTick1+0x76>
     5c0:	10 92 29 01 	sts	0x0129, r1	; 0x800129 <Data_in>
			state = SM1_wait;
     5c4:	1a 82       	std	Y+2, r1	; 0x02
		break;
     5c6:	19 82       	std	Y+1, r1	; 0x01

		default:
		state = SM1_wait; // default: Initial state
     5c8:	04 c0       	rjmp	.+8      	; 0x5d2 <SMTick1+0x76>
     5ca:	1a 82       	std	Y+2, r1	; 0x02
		break;
     5cc:	19 82       	std	Y+1, r1	; 0x01
		}
		//else
		//{
			//state = SM1_neither;
		//}
		break;
     5ce:	01 c0       	rjmp	.+2      	; 0x5d2 <SMTick1+0x76>
		state = SM1_wait; // default: Initial state
		break;
	}

	//State machine actions
	switch(state) {
     5d0:	00 00       	nop
     5d2:	89 81       	ldd	r24, Y+1	; 0x01
     5d4:	9a 81       	ldd	r25, Y+2	; 0x02
     5d6:	81 30       	cpi	r24, 0x01	; 1
     5d8:	91 05       	cpc	r25, r1
     5da:	79 f0       	breq	.+30     	; 0x5fa <SMTick1+0x9e>
     5dc:	82 30       	cpi	r24, 0x02	; 2
     5de:	91 05       	cpc	r25, r1
     5e0:	24 f4       	brge	.+8      	; 0x5ea <SMTick1+0x8e>
     5e2:	89 2b       	or	r24, r25
     5e4:	09 f4       	brne	.+2      	; 0x5e8 <SMTick1+0x8c>
     5e6:	9b c0       	rjmp	.+310    	; 0x71e <SMTick1+0x1c2>
     5e8:	97 c0       	rjmp	.+302    	; 0x718 <SMTick1+0x1bc>
     5ea:	82 30       	cpi	r24, 0x02	; 2
     5ec:	91 05       	cpc	r25, r1
     5ee:	09 f4       	brne	.+2      	; 0x5f2 <SMTick1+0x96>
     5f0:	86 c0       	rjmp	.+268    	; 0x6fe <SMTick1+0x1a2>
     5f2:	03 97       	sbiw	r24, 0x03	; 3
     5f4:	09 f4       	brne	.+2      	; 0x5f8 <SMTick1+0x9c>

		break;

		case SM1_press:
			//send status of LED i.e. LED ON
			if( USART_IsSendReady(0) != 0 )
     5f6:	95 c0       	rjmp	.+298    	; 0x722 <SMTick1+0x1c6>
     5f8:	8f c0       	rjmp	.+286    	; 0x718 <SMTick1+0x1bc>
     5fa:	80 e0       	ldi	r24, 0x00	; 0
     5fc:	ab dd       	rcall	.-1194   	; 0x154 <USART_IsSendReady>
			{
				USART_SendString( "LED_ON", 0);
     5fe:	88 23       	and	r24, r24
     600:	49 f0       	breq	.+18     	; 0x614 <SMTick1+0xb8>
     602:	60 e0       	ldi	r22, 0x00	; 0
     604:	84 e0       	ldi	r24, 0x04	; 4
     606:	91 e0       	ldi	r25, 0x01	; 1
				//USART_Send('A', 0);
				PORTB = 0x01;
     608:	21 de       	rcall	.-958    	; 0x24c <USART_SendString>
     60a:	85 e2       	ldi	r24, 0x25	; 37
     60c:	90 e0       	ldi	r25, 0x00	; 0
     60e:	21 e0       	ldi	r18, 0x01	; 1
			}
			Data_in = 0;
     610:	fc 01       	movw	r30, r24
     612:	20 83       	st	Z, r18

			USS_Trigger(); // triggering
     614:	10 92 29 01 	sts	0x0129, r1	; 0x800129 <Data_in>
			TCNT1 = 0x00;
     618:	01 d2       	rcall	.+1026   	; 0xa1c <USS_Trigger>
     61a:	84 e8       	ldi	r24, 0x84	; 132
     61c:	90 e0       	ldi	r25, 0x00	; 0
     61e:	fc 01       	movw	r30, r24
     620:	11 82       	std	Z+1, r1	; 0x01
			while ((PINA & ECHOMSK) == 0) { ; } //wait for rising edge of Echo
     622:	10 82       	st	Z, r1
     624:	00 00       	nop
     626:	80 e2       	ldi	r24, 0x20	; 32
     628:	90 e0       	ldi	r25, 0x00	; 0
     62a:	fc 01       	movw	r30, r24
     62c:	80 81       	ld	r24, Z
     62e:	88 2f       	mov	r24, r24
     630:	90 e0       	ldi	r25, 0x00	; 0
     632:	81 70       	andi	r24, 0x01	; 1
     634:	99 27       	eor	r25, r25
     636:	89 2b       	or	r24, r25
			TCCR1B = (1<<CS10);                 //start timer div1
     638:	b1 f3       	breq	.-20     	; 0x626 <SMTick1+0xca>
     63a:	81 e8       	ldi	r24, 0x81	; 129
     63c:	90 e0       	ldi	r25, 0x00	; 0
     63e:	21 e0       	ldi	r18, 0x01	; 1
     640:	fc 01       	movw	r30, r24
			while ((PINA & ECHOMSK) != 0) { ; } //wait for falling edge
     642:	20 83       	st	Z, r18
     644:	00 00       	nop
     646:	80 e2       	ldi	r24, 0x20	; 32
     648:	90 e0       	ldi	r25, 0x00	; 0
     64a:	fc 01       	movw	r30, r24
     64c:	80 81       	ld	r24, Z
     64e:	88 2f       	mov	r24, r24
     650:	90 e0       	ldi	r25, 0x00	; 0
     652:	81 70       	andi	r24, 0x01	; 1
     654:	99 27       	eor	r25, r25
     656:	89 2b       	or	r24, r25
			TCCR1B = 0;                         //stop timer
     658:	b1 f7       	brne	.-20     	; 0x646 <SMTick1+0xea>
     65a:	81 e8       	ldi	r24, 0x81	; 129
     65c:	90 e0       	ldi	r25, 0x00	; 0
     65e:	fc 01       	movw	r30, r24
			Pulse_Time = TCNT1; // take what's in TCNT1 timer
     660:	10 82       	st	Z, r1
     662:	84 e8       	ldi	r24, 0x84	; 132
     664:	90 e0       	ldi	r25, 0x00	; 0
     666:	fc 01       	movw	r30, r24
     668:	80 81       	ld	r24, Z
     66a:	91 81       	ldd	r25, Z+1	; 0x01
     66c:	90 93 2b 01 	sts	0x012B, r25	; 0x80012b <Pulse_Time+0x1>
     670:	80 93 2a 01 	sts	0x012A, r24	; 0x80012a <Pulse_Time>
			TCNT1 = 0x00; //reset what's in TCNT1 timer
     674:	84 e8       	ldi	r24, 0x84	; 132
     676:	90 e0       	ldi	r25, 0x00	; 0
     678:	fc 01       	movw	r30, r24
     67a:	11 82       	std	Z+1, r1	; 0x01
			
			Distance = Pulse_Time / 588.2; // get distance measurement
     67c:	10 82       	st	Z, r1
     67e:	80 91 2a 01 	lds	r24, 0x012A	; 0x80012a <Pulse_Time>
     682:	90 91 2b 01 	lds	r25, 0x012B	; 0x80012b <Pulse_Time+0x1>
     686:	cc 01       	movw	r24, r24
     688:	a0 e0       	ldi	r26, 0x00	; 0
     68a:	b0 e0       	ldi	r27, 0x00	; 0
     68c:	bc 01       	movw	r22, r24
     68e:	cd 01       	movw	r24, r26
     690:	c9 d3       	rcall	.+1938   	; 0xe24 <__floatunsisf>
     692:	dc 01       	movw	r26, r24
     694:	cb 01       	movw	r24, r22
     696:	2d ec       	ldi	r18, 0xCD	; 205
     698:	3c e0       	ldi	r19, 0x0C	; 12
     69a:	43 e1       	ldi	r20, 0x13	; 19
     69c:	54 e4       	ldi	r21, 0x44	; 68
     69e:	bc 01       	movw	r22, r24
     6a0:	cd 01       	movw	r24, r26
     6a2:	2c d3       	rcall	.+1624   	; 0xcfc <__divsf3>
     6a4:	dc 01       	movw	r26, r24
     6a6:	cb 01       	movw	r24, r22
     6a8:	bc 01       	movw	r22, r24
     6aa:	cd 01       	movw	r24, r26
     6ac:	8f d3       	rcall	.+1822   	; 0xdcc <__fixunssfsi>
     6ae:	dc 01       	movw	r26, r24
     6b0:	cb 01       	movw	r24, r22
     6b2:	90 93 1c 01 	sts	0x011C, r25	; 0x80011c <Distance+0x1>
     6b6:	80 93 1b 01 	sts	0x011B, r24	; 0x80011b <Distance>
			
			sprintf(DistinStr,"%d",Distance); // conversion
     6ba:	80 91 1b 01 	lds	r24, 0x011B	; 0x80011b <Distance>
     6be:	90 91 1c 01 	lds	r25, 0x011C	; 0x80011c <Distance+0x1>
     6c2:	29 2f       	mov	r18, r25
     6c4:	2f 93       	push	r18
     6c6:	8f 93       	push	r24
     6c8:	8b e0       	ldi	r24, 0x0B	; 11
     6ca:	91 e0       	ldi	r25, 0x01	; 1
     6cc:	89 2f       	mov	r24, r25
     6ce:	8f 93       	push	r24
     6d0:	8b e0       	ldi	r24, 0x0B	; 11
     6d2:	91 e0       	ldi	r25, 0x01	; 1
     6d4:	8f 93       	push	r24
     6d6:	8c e2       	ldi	r24, 0x2C	; 44
     6d8:	91 e0       	ldi	r25, 0x01	; 1
     6da:	89 2f       	mov	r24, r25
     6dc:	8f 93       	push	r24
     6de:	8c e2       	ldi	r24, 0x2C	; 44
     6e0:	91 e0       	ldi	r25, 0x01	; 1
     6e2:	8f 93       	push	r24
     6e4:	e3 d4       	rcall	.+2502   	; 0x10ac <sprintf>
     6e6:	0f 90       	pop	r0
     6e8:	0f 90       	pop	r0
			USART_SendString(DistinStr, 0);
     6ea:	0f 90       	pop	r0
     6ec:	0f 90       	pop	r0
     6ee:	0f 90       	pop	r0
     6f0:	0f 90       	pop	r0
			//_delay_ms(50);
			TimerOn();
     6f2:	60 e0       	ldi	r22, 0x00	; 0
     6f4:	8c e2       	ldi	r24, 0x2C	; 44

		break;
     6f6:	91 e0       	ldi	r25, 0x01	; 1

		case SM1_release:

			// send status of LED i.e. LED OFF Sending B for off
			if( USART_IsSendReady(0) != 0 )
     6f8:	a9 dd       	rcall	.-1198   	; 0x24c <USART_SendString>
     6fa:	41 de       	rcall	.-894    	; 0x37e <TimerOn>
     6fc:	15 c0       	rjmp	.+42     	; 0x728 <SMTick1+0x1cc>
     6fe:	80 e0       	ldi	r24, 0x00	; 0
     700:	29 dd       	rcall	.-1454   	; 0x154 <USART_IsSendReady>
			{
				USART_SendString( "LED_OFF", 0);
     702:	88 23       	and	r24, r24
     704:	81 f0       	breq	.+32     	; 0x726 <SMTick1+0x1ca>
     706:	60 e0       	ldi	r22, 0x00	; 0
     708:	8e e0       	ldi	r24, 0x0E	; 14
     70a:	91 e0       	ldi	r25, 0x01	; 1
				PORTB = 0x00;
     70c:	9f dd       	rcall	.-1218   	; 0x24c <USART_SendString>
     70e:	85 e2       	ldi	r24, 0x25	; 37
     710:	90 e0       	ldi	r25, 0x00	; 0
     712:	fc 01       	movw	r30, r24
			}
		
		
		break;
     714:	10 82       	st	Z, r1
				//USART_Send( "WTF are you typing", 0);
			//}
		break;

		default:
		state = SM1_wait;
     716:	07 c0       	rjmp	.+14     	; 0x726 <SMTick1+0x1ca>
     718:	1a 82       	std	Y+2, r1	; 0x02
		break;
     71a:	19 82       	std	Y+1, r1	; 0x01
	//State machine actions
	switch(state) {
		case SM1_wait:


		break;
     71c:	05 c0       	rjmp	.+10     	; 0x728 <SMTick1+0x1cc>
     71e:	00 00       	nop
		case SM1_neither:
			//if( USART_IsSendReady(0) != 0 )
			//{
				//USART_Send( "WTF are you typing", 0);
			//}
		break;
     720:	03 c0       	rjmp	.+6      	; 0x728 <SMTick1+0x1cc>
     722:	00 00       	nop
				USART_SendString( "LED_OFF", 0);
				PORTB = 0x00;
			}
		
		
		break;
     724:	01 c0       	rjmp	.+2      	; 0x728 <SMTick1+0x1cc>
		default:
		state = SM1_wait;
		break;
	}
	
	return state;
     726:	00 00       	nop
     728:	89 81       	ldd	r24, Y+1	; 0x01
	}
     72a:	9a 81       	ldd	r25, Y+2	; 0x02
     72c:	0f 90       	pop	r0
     72e:	0f 90       	pop	r0
     730:	df 91       	pop	r29
     732:	cf 91       	pop	r28
     734:	08 95       	ret

00000736 <main>:
// --------END User defined FSMs-----------------------------------------------

int main(void)
{
     736:	0f 93       	push	r16
     738:	1f 93       	push	r17
     73a:	cf 93       	push	r28
     73c:	df 93       	push	r29
     73e:	cd b7       	in	r28, 0x3d	; 61
     740:	de b7       	in	r29, 0x3e	; 62
     742:	a6 97       	sbiw	r28, 0x26	; 38
     744:	0f b6       	in	r0, 0x3f	; 63
     746:	f8 94       	cli
     748:	de bf       	out	0x3e, r29	; 62
     74a:	0f be       	out	0x3f, r0	; 63
     74c:	cd bf       	out	0x3d, r28	; 61
	//MCUCR = (1<<JTD);
	//DDRD = 0xF0; PORTC = 0x0F;
	//DDRA = 0xFF; PORTA = 0x00; // LCD data lines
	//DDRC = 0xFF; PORTC = 0x00; // LCD control lines
	
	DDRB = 0xFF; PORTB = 0x00;
     74e:	84 e2       	ldi	r24, 0x24	; 36
     750:	90 e0       	ldi	r25, 0x00	; 0
     752:	2f ef       	ldi	r18, 0xFF	; 255
     754:	fc 01       	movw	r30, r24
     756:	20 83       	st	Z, r18
     758:	85 e2       	ldi	r24, 0x25	; 37
     75a:	90 e0       	ldi	r25, 0x00	; 0
     75c:	fc 01       	movw	r30, r24
     75e:	10 82       	st	Z, r1
	USS_DDR |= 1<<Trigger; // setting trigger as output
     760:	81 e2       	ldi	r24, 0x21	; 33
     762:	90 e0       	ldi	r25, 0x00	; 0
     764:	21 e2       	ldi	r18, 0x21	; 33
     766:	30 e0       	ldi	r19, 0x00	; 0
     768:	f9 01       	movw	r30, r18
     76a:	20 81       	ld	r18, Z
     76c:	22 60       	ori	r18, 0x02	; 2
     76e:	fc 01       	movw	r30, r24
     770:	20 83       	st	Z, r18
	USS_DDR &=~1<<Echo;    //  and echo as input
     772:	81 e2       	ldi	r24, 0x21	; 33
     774:	90 e0       	ldi	r25, 0x00	; 0
     776:	21 e2       	ldi	r18, 0x21	; 33
     778:	30 e0       	ldi	r19, 0x00	; 0
     77a:	f9 01       	movw	r30, r18
     77c:	20 81       	ld	r18, Z
     77e:	2e 7f       	andi	r18, 0xFE	; 254
     780:	fc 01       	movw	r30, r24
     782:	20 83       	st	Z, r18

	// Period for the tasks
	unsigned long int SMTick1_calc = 150;
     784:	86 e9       	ldi	r24, 0x96	; 150
     786:	90 e0       	ldi	r25, 0x00	; 0
     788:	a0 e0       	ldi	r26, 0x00	; 0
     78a:	b0 e0       	ldi	r27, 0x00	; 0
     78c:	8b 83       	std	Y+3, r24	; 0x03
     78e:	9c 83       	std	Y+4, r25	; 0x04
     790:	ad 83       	std	Y+5, r26	; 0x05
     792:	be 83       	std	Y+6, r27	; 0x06
	unsigned long int SMTick2_calc = 150;
     794:	86 e9       	ldi	r24, 0x96	; 150
     796:	90 e0       	ldi	r25, 0x00	; 0
     798:	a0 e0       	ldi	r26, 0x00	; 0
     79a:	b0 e0       	ldi	r27, 0x00	; 0
     79c:	8f 83       	std	Y+7, r24	; 0x07
     79e:	98 87       	std	Y+8, r25	; 0x08
     7a0:	a9 87       	std	Y+9, r26	; 0x09
     7a2:	ba 87       	std	Y+10, r27	; 0x0a
	unsigned long int SMTick3_calc = 150;
     7a4:	86 e9       	ldi	r24, 0x96	; 150
     7a6:	90 e0       	ldi	r25, 0x00	; 0
     7a8:	a0 e0       	ldi	r26, 0x00	; 0
     7aa:	b0 e0       	ldi	r27, 0x00	; 0
     7ac:	8b 87       	std	Y+11, r24	; 0x0b
     7ae:	9c 87       	std	Y+12, r25	; 0x0c
     7b0:	ad 87       	std	Y+13, r26	; 0x0d
     7b2:	be 87       	std	Y+14, r27	; 0x0e

	//Calculating GCD
	unsigned long int tmpGCD = 1;
     7b4:	81 e0       	ldi	r24, 0x01	; 1
     7b6:	90 e0       	ldi	r25, 0x00	; 0
     7b8:	a0 e0       	ldi	r26, 0x00	; 0
     7ba:	b0 e0       	ldi	r27, 0x00	; 0
     7bc:	8f 87       	std	Y+15, r24	; 0x0f
     7be:	98 8b       	std	Y+16, r25	; 0x10
     7c0:	a9 8b       	std	Y+17, r26	; 0x11
     7c2:	ba 8b       	std	Y+18, r27	; 0x12
	tmpGCD = findGCD(SMTick1_calc, SMTick1_calc);
     7c4:	2b 81       	ldd	r18, Y+3	; 0x03
     7c6:	3c 81       	ldd	r19, Y+4	; 0x04
     7c8:	4d 81       	ldd	r20, Y+5	; 0x05
     7ca:	5e 81       	ldd	r21, Y+6	; 0x06
     7cc:	8b 81       	ldd	r24, Y+3	; 0x03
     7ce:	9c 81       	ldd	r25, Y+4	; 0x04
     7d0:	ad 81       	ldd	r26, Y+5	; 0x05
     7d2:	be 81       	ldd	r27, Y+6	; 0x06
     7d4:	bc 01       	movw	r22, r24
     7d6:	cd 01       	movw	r24, r26
     7d8:	75 de       	rcall	.-790    	; 0x4c4 <findGCD>
     7da:	dc 01       	movw	r26, r24
     7dc:	cb 01       	movw	r24, r22
     7de:	8f 87       	std	Y+15, r24	; 0x0f
     7e0:	98 8b       	std	Y+16, r25	; 0x10
     7e2:	a9 8b       	std	Y+17, r26	; 0x11
     7e4:	ba 8b       	std	Y+18, r27	; 0x12
	//tmpGCD = findGCD(tmpGCD, SMTick3_calc);

	//Greatest common divisor for all tasks or smallest time unit for tasks.
	unsigned long int GCD = tmpGCD;
     7e6:	8f 85       	ldd	r24, Y+15	; 0x0f
     7e8:	98 89       	ldd	r25, Y+16	; 0x10
     7ea:	a9 89       	ldd	r26, Y+17	; 0x11
     7ec:	ba 89       	ldd	r27, Y+18	; 0x12
     7ee:	8b 8b       	std	Y+19, r24	; 0x13
     7f0:	9c 8b       	std	Y+20, r25	; 0x14
     7f2:	ad 8b       	std	Y+21, r26	; 0x15
     7f4:	be 8b       	std	Y+22, r27	; 0x16

	//Recalculate GCD periods for scheduler
	unsigned long int SMTick1_period = SMTick1_calc/GCD;
     7f6:	8b 81       	ldd	r24, Y+3	; 0x03
     7f8:	9c 81       	ldd	r25, Y+4	; 0x04
     7fa:	ad 81       	ldd	r26, Y+5	; 0x05
     7fc:	be 81       	ldd	r27, Y+6	; 0x06
     7fe:	2b 89       	ldd	r18, Y+19	; 0x13
     800:	3c 89       	ldd	r19, Y+20	; 0x14
     802:	4d 89       	ldd	r20, Y+21	; 0x15
     804:	5e 89       	ldd	r21, Y+22	; 0x16
     806:	bc 01       	movw	r22, r24
     808:	cd 01       	movw	r24, r26
     80a:	25 d4       	rcall	.+2122   	; 0x1056 <__udivmodsi4>
     80c:	da 01       	movw	r26, r20
     80e:	c9 01       	movw	r24, r18
     810:	8f 8b       	std	Y+23, r24	; 0x17
     812:	98 8f       	std	Y+24, r25	; 0x18
     814:	a9 8f       	std	Y+25, r26	; 0x19
     816:	ba 8f       	std	Y+26, r27	; 0x1a
	unsigned long int SMTick2_period = SMTick2_calc/GCD;
     818:	8f 81       	ldd	r24, Y+7	; 0x07
     81a:	98 85       	ldd	r25, Y+8	; 0x08
     81c:	a9 85       	ldd	r26, Y+9	; 0x09
     81e:	ba 85       	ldd	r27, Y+10	; 0x0a
     820:	2b 89       	ldd	r18, Y+19	; 0x13
     822:	3c 89       	ldd	r19, Y+20	; 0x14
     824:	4d 89       	ldd	r20, Y+21	; 0x15
     826:	5e 89       	ldd	r21, Y+22	; 0x16
     828:	bc 01       	movw	r22, r24
     82a:	cd 01       	movw	r24, r26
     82c:	14 d4       	rcall	.+2088   	; 0x1056 <__udivmodsi4>
     82e:	da 01       	movw	r26, r20
     830:	c9 01       	movw	r24, r18
     832:	8b 8f       	std	Y+27, r24	; 0x1b
     834:	9c 8f       	std	Y+28, r25	; 0x1c
     836:	ad 8f       	std	Y+29, r26	; 0x1d
     838:	be 8f       	std	Y+30, r27	; 0x1e
	unsigned long int SMTick3_period = SMTick3_calc/GCD;
     83a:	8b 85       	ldd	r24, Y+11	; 0x0b
     83c:	9c 85       	ldd	r25, Y+12	; 0x0c
     83e:	ad 85       	ldd	r26, Y+13	; 0x0d
     840:	be 85       	ldd	r27, Y+14	; 0x0e
     842:	2b 89       	ldd	r18, Y+19	; 0x13
     844:	3c 89       	ldd	r19, Y+20	; 0x14
     846:	4d 89       	ldd	r20, Y+21	; 0x15
     848:	5e 89       	ldd	r21, Y+22	; 0x16
     84a:	bc 01       	movw	r22, r24
     84c:	cd 01       	movw	r24, r26
     84e:	03 d4       	rcall	.+2054   	; 0x1056 <__udivmodsi4>
     850:	da 01       	movw	r26, r20
     852:	c9 01       	movw	r24, r18
     854:	8f 8f       	std	Y+31, r24	; 0x1f
     856:	98 a3       	std	Y+32, r25	; 0x20
     858:	a9 a3       	std	Y+33, r26	; 0x21
     85a:	ba a3       	std	Y+34, r27	; 0x22
		
	//Declare an array of tasks
	static task task1;
	task *tasks[] = { &task1 }; // remember to add tasks back in for multiple
     85c:	8e e1       	ldi	r24, 0x1E	; 30
     85e:	91 e0       	ldi	r25, 0x01	; 1
     860:	9e a3       	std	Y+38, r25	; 0x26
     862:	8d a3       	std	Y+37, r24	; 0x25
	const unsigned short numTasks = sizeof(tasks)/sizeof(task*);
     864:	81 e0       	ldi	r24, 0x01	; 1
     866:	90 e0       	ldi	r25, 0x00	; 0
     868:	9c a3       	std	Y+36, r25	; 0x24
     86a:	8b a3       	std	Y+35, r24	; 0x23

	// Task 1
	task1.state = SM1_wait;//Task initial state.
     86c:	10 92 1e 01 	sts	0x011E, r1	; 0x80011e <task1.1993>
	task1.period = SMTick1_period;//Task Period.
     870:	8f 89       	ldd	r24, Y+23	; 0x17
     872:	98 8d       	ldd	r25, Y+24	; 0x18
     874:	a9 8d       	ldd	r26, Y+25	; 0x19
     876:	ba 8d       	ldd	r27, Y+26	; 0x1a
     878:	80 93 1f 01 	sts	0x011F, r24	; 0x80011f <task1.1993+0x1>
     87c:	90 93 20 01 	sts	0x0120, r25	; 0x800120 <task1.1993+0x2>
     880:	a0 93 21 01 	sts	0x0121, r26	; 0x800121 <task1.1993+0x3>
     884:	b0 93 22 01 	sts	0x0122, r27	; 0x800122 <task1.1993+0x4>
	task1.elapsedTime = SMTick1_period;//Task current elapsed time.
     888:	8f 89       	ldd	r24, Y+23	; 0x17
     88a:	98 8d       	ldd	r25, Y+24	; 0x18
     88c:	a9 8d       	ldd	r26, Y+25	; 0x19
     88e:	ba 8d       	ldd	r27, Y+26	; 0x1a
     890:	80 93 23 01 	sts	0x0123, r24	; 0x800123 <task1.1993+0x5>
     894:	90 93 24 01 	sts	0x0124, r25	; 0x800124 <task1.1993+0x6>
     898:	a0 93 25 01 	sts	0x0125, r26	; 0x800125 <task1.1993+0x7>
     89c:	b0 93 26 01 	sts	0x0126, r27	; 0x800126 <task1.1993+0x8>
	task1.TickFct = &SMTick1;//Function pointer for the tick.
     8a0:	8e ea       	ldi	r24, 0xAE	; 174
     8a2:	92 e0       	ldi	r25, 0x02	; 2
     8a4:	90 93 28 01 	sts	0x0128, r25	; 0x800128 <task1.1993+0xa>
     8a8:	80 93 27 01 	sts	0x0127, r24	; 0x800127 <task1.1993+0x9>

	// Set the timer and turn it on
	TimerSet(GCD);
     8ac:	8b 89       	ldd	r24, Y+19	; 0x13
     8ae:	9c 89       	ldd	r25, Y+20	; 0x14
     8b0:	ad 89       	ldd	r26, Y+21	; 0x15
     8b2:	be 89       	ldd	r27, Y+22	; 0x16
     8b4:	bc 01       	movw	r22, r24
	TimerOn();
     8b6:	cd 01       	movw	r24, r26
     8b8:	34 dd       	rcall	.-1432   	; 0x322 <TimerSet>
	//LCD_init();
	//LCD_ClearScreen(); 

	//LCD_DisplayString(1, "1");

	initUSART(0);
     8ba:	61 dd       	rcall	.-1342   	; 0x37e <TimerOn>
     8bc:	80 e0       	ldi	r24, 0x00	; 0
     8be:	05 dc       	rcall	.-2038   	; 0xca <initUSART>

	unsigned short i; // Scheduler for-loop iterator
	
    while (1) 
    {
		for ( i = 0; i < numTasks; i++ ) {
     8c0:	1a 82       	std	Y+2, r1	; 0x02
     8c2:	19 82       	std	Y+1, r1	; 0x01
     8c4:	9b c0       	rjmp	.+310    	; 0x9fc <main+0x2c6>
			// Task is ready to tick
			if ( tasks[i]->elapsedTime == tasks[i]->period ) {
     8c6:	89 81       	ldd	r24, Y+1	; 0x01
     8c8:	9a 81       	ldd	r25, Y+2	; 0x02
     8ca:	88 0f       	add	r24, r24
     8cc:	99 1f       	adc	r25, r25
     8ce:	9e 01       	movw	r18, r28
     8d0:	2f 5f       	subi	r18, 0xFF	; 255
     8d2:	3f 4f       	sbci	r19, 0xFF	; 255
     8d4:	82 0f       	add	r24, r18
     8d6:	93 1f       	adc	r25, r19
     8d8:	84 96       	adiw	r24, 0x24	; 36
     8da:	fc 01       	movw	r30, r24
     8dc:	80 81       	ld	r24, Z
     8de:	91 81       	ldd	r25, Z+1	; 0x01
     8e0:	fc 01       	movw	r30, r24
     8e2:	25 81       	ldd	r18, Z+5	; 0x05
     8e4:	36 81       	ldd	r19, Z+6	; 0x06
     8e6:	47 81       	ldd	r20, Z+7	; 0x07
     8e8:	50 85       	ldd	r21, Z+8	; 0x08
     8ea:	89 81       	ldd	r24, Y+1	; 0x01
     8ec:	9a 81       	ldd	r25, Y+2	; 0x02
     8ee:	88 0f       	add	r24, r24
     8f0:	99 1f       	adc	r25, r25
     8f2:	be 01       	movw	r22, r28
     8f4:	6f 5f       	subi	r22, 0xFF	; 255
     8f6:	7f 4f       	sbci	r23, 0xFF	; 255
     8f8:	86 0f       	add	r24, r22
     8fa:	97 1f       	adc	r25, r23
     8fc:	84 96       	adiw	r24, 0x24	; 36
     8fe:	fc 01       	movw	r30, r24
     900:	80 81       	ld	r24, Z
     902:	91 81       	ldd	r25, Z+1	; 0x01
     904:	fc 01       	movw	r30, r24
     906:	81 81       	ldd	r24, Z+1	; 0x01
     908:	92 81       	ldd	r25, Z+2	; 0x02
     90a:	a3 81       	ldd	r26, Z+3	; 0x03
     90c:	b4 81       	ldd	r27, Z+4	; 0x04
     90e:	28 17       	cp	r18, r24
     910:	39 07       	cpc	r19, r25
     912:	4a 07       	cpc	r20, r26
     914:	5b 07       	cpc	r21, r27
     916:	09 f0       	breq	.+2      	; 0x91a <main+0x1e4>
     918:	45 c0       	rjmp	.+138    	; 0x9a4 <main+0x26e>
				// Setting next state for task
				tasks[i]->state = tasks[i]->TickFct(tasks[i]->state);
     91a:	89 81       	ldd	r24, Y+1	; 0x01
     91c:	9a 81       	ldd	r25, Y+2	; 0x02
     91e:	88 0f       	add	r24, r24
     920:	99 1f       	adc	r25, r25
     922:	9e 01       	movw	r18, r28
     924:	2f 5f       	subi	r18, 0xFF	; 255
     926:	3f 4f       	sbci	r19, 0xFF	; 255
     928:	82 0f       	add	r24, r18
     92a:	93 1f       	adc	r25, r19
     92c:	84 96       	adiw	r24, 0x24	; 36
     92e:	fc 01       	movw	r30, r24
     930:	00 81       	ld	r16, Z
     932:	11 81       	ldd	r17, Z+1	; 0x01
     934:	89 81       	ldd	r24, Y+1	; 0x01
     936:	9a 81       	ldd	r25, Y+2	; 0x02
     938:	88 0f       	add	r24, r24
     93a:	99 1f       	adc	r25, r25
     93c:	9e 01       	movw	r18, r28
     93e:	2f 5f       	subi	r18, 0xFF	; 255
     940:	3f 4f       	sbci	r19, 0xFF	; 255
     942:	82 0f       	add	r24, r18
     944:	93 1f       	adc	r25, r19
     946:	84 96       	adiw	r24, 0x24	; 36
     948:	fc 01       	movw	r30, r24
     94a:	80 81       	ld	r24, Z
     94c:	91 81       	ldd	r25, Z+1	; 0x01
     94e:	fc 01       	movw	r30, r24
     950:	21 85       	ldd	r18, Z+9	; 0x09
     952:	32 85       	ldd	r19, Z+10	; 0x0a
     954:	89 81       	ldd	r24, Y+1	; 0x01
     956:	9a 81       	ldd	r25, Y+2	; 0x02
     958:	88 0f       	add	r24, r24
     95a:	99 1f       	adc	r25, r25
     95c:	ae 01       	movw	r20, r28
     95e:	4f 5f       	subi	r20, 0xFF	; 255
     960:	5f 4f       	sbci	r21, 0xFF	; 255
     962:	84 0f       	add	r24, r20
     964:	95 1f       	adc	r25, r21
     966:	84 96       	adiw	r24, 0x24	; 36
     968:	fc 01       	movw	r30, r24
     96a:	80 81       	ld	r24, Z
     96c:	91 81       	ldd	r25, Z+1	; 0x01
     96e:	fc 01       	movw	r30, r24
     970:	80 81       	ld	r24, Z
     972:	08 2e       	mov	r0, r24
     974:	00 0c       	add	r0, r0
     976:	99 0b       	sbc	r25, r25
     978:	f9 01       	movw	r30, r18
     97a:	09 95       	icall
     97c:	f8 01       	movw	r30, r16
     97e:	80 83       	st	Z, r24
				// Reset the elapsed time for next tick.
				tasks[i]->elapsedTime = 0;
     980:	89 81       	ldd	r24, Y+1	; 0x01
     982:	9a 81       	ldd	r25, Y+2	; 0x02
     984:	88 0f       	add	r24, r24
     986:	99 1f       	adc	r25, r25
     988:	9e 01       	movw	r18, r28
     98a:	2f 5f       	subi	r18, 0xFF	; 255
     98c:	3f 4f       	sbci	r19, 0xFF	; 255
     98e:	82 0f       	add	r24, r18
     990:	93 1f       	adc	r25, r19
     992:	84 96       	adiw	r24, 0x24	; 36
     994:	fc 01       	movw	r30, r24
     996:	80 81       	ld	r24, Z
     998:	91 81       	ldd	r25, Z+1	; 0x01
     99a:	fc 01       	movw	r30, r24
     99c:	15 82       	std	Z+5, r1	; 0x05
     99e:	16 82       	std	Z+6, r1	; 0x06
     9a0:	17 82       	std	Z+7, r1	; 0x07
     9a2:	10 86       	std	Z+8, r1	; 0x08
			}
			tasks[i]->elapsedTime += 1;
     9a4:	89 81       	ldd	r24, Y+1	; 0x01
     9a6:	9a 81       	ldd	r25, Y+2	; 0x02
     9a8:	88 0f       	add	r24, r24
     9aa:	99 1f       	adc	r25, r25
     9ac:	9e 01       	movw	r18, r28
     9ae:	2f 5f       	subi	r18, 0xFF	; 255
     9b0:	3f 4f       	sbci	r19, 0xFF	; 255
     9b2:	82 0f       	add	r24, r18
     9b4:	93 1f       	adc	r25, r19
     9b6:	84 96       	adiw	r24, 0x24	; 36
     9b8:	fc 01       	movw	r30, r24
     9ba:	20 81       	ld	r18, Z
     9bc:	31 81       	ldd	r19, Z+1	; 0x01
     9be:	89 81       	ldd	r24, Y+1	; 0x01
     9c0:	9a 81       	ldd	r25, Y+2	; 0x02
     9c2:	88 0f       	add	r24, r24
     9c4:	99 1f       	adc	r25, r25
     9c6:	ae 01       	movw	r20, r28
     9c8:	4f 5f       	subi	r20, 0xFF	; 255
     9ca:	5f 4f       	sbci	r21, 0xFF	; 255
     9cc:	84 0f       	add	r24, r20
     9ce:	95 1f       	adc	r25, r21
     9d0:	84 96       	adiw	r24, 0x24	; 36
     9d2:	fc 01       	movw	r30, r24
     9d4:	80 81       	ld	r24, Z
     9d6:	91 81       	ldd	r25, Z+1	; 0x01
     9d8:	fc 01       	movw	r30, r24
     9da:	85 81       	ldd	r24, Z+5	; 0x05
     9dc:	96 81       	ldd	r25, Z+6	; 0x06
     9de:	a7 81       	ldd	r26, Z+7	; 0x07
     9e0:	b0 85       	ldd	r27, Z+8	; 0x08
     9e2:	01 96       	adiw	r24, 0x01	; 1
     9e4:	a1 1d       	adc	r26, r1
     9e6:	b1 1d       	adc	r27, r1
     9e8:	f9 01       	movw	r30, r18
     9ea:	85 83       	std	Z+5, r24	; 0x05
     9ec:	96 83       	std	Z+6, r25	; 0x06
     9ee:	a7 83       	std	Z+7, r26	; 0x07
     9f0:	b0 87       	std	Z+8, r27	; 0x08

	unsigned short i; // Scheduler for-loop iterator
	
    while (1) 
    {
		for ( i = 0; i < numTasks; i++ ) {
     9f2:	89 81       	ldd	r24, Y+1	; 0x01
     9f4:	9a 81       	ldd	r25, Y+2	; 0x02
     9f6:	01 96       	adiw	r24, 0x01	; 1
     9f8:	9a 83       	std	Y+2, r25	; 0x02
     9fa:	89 83       	std	Y+1, r24	; 0x01
     9fc:	29 81       	ldd	r18, Y+1	; 0x01
     9fe:	3a 81       	ldd	r19, Y+2	; 0x02
     a00:	8b a1       	ldd	r24, Y+35	; 0x23
     a02:	9c a1       	ldd	r25, Y+36	; 0x24
     a04:	28 17       	cp	r18, r24
     a06:	39 07       	cpc	r19, r25
     a08:	08 f4       	brcc	.+2      	; 0xa0c <main+0x2d6>
     a0a:	5d cf       	rjmp	.-326    	; 0x8c6 <main+0x190>
				// Reset the elapsed time for next tick.
				tasks[i]->elapsedTime = 0;
			}
			tasks[i]->elapsedTime += 1;
		}
		while(!TimerFlag);
     a0c:	00 00       	nop
     a0e:	80 91 16 01 	lds	r24, 0x0116	; 0x800116 <__data_end>
     a12:	88 23       	and	r24, r24
     a14:	e1 f3       	breq	.-8      	; 0xa0e <main+0x2d8>
		TimerFlag = 0;
     a16:	10 92 16 01 	sts	0x0116, r1	; 0x800116 <__data_end>

	}
     a1a:	52 cf       	rjmp	.-348    	; 0x8c0 <main+0x18a>

00000a1c <USS_Trigger>:
	
}

void USS_Trigger()
{
     a1c:	cf 93       	push	r28
     a1e:	df 93       	push	r29
     a20:	cd b7       	in	r28, 0x3d	; 61
     a22:	de b7       	in	r29, 0x3e	; 62
     a24:	a0 97       	sbiw	r28, 0x20	; 32
     a26:	0f b6       	in	r0, 0x3f	; 63
     a28:	f8 94       	cli
     a2a:	de bf       	out	0x3e, r29	; 62
     a2c:	0f be       	out	0x3f, r0	; 63
     a2e:	cd bf       	out	0x3d, r28	; 61
	USS_PORT |= 1<<Trigger; //turn on trigger
     a30:	82 e2       	ldi	r24, 0x22	; 34
     a32:	90 e0       	ldi	r25, 0x00	; 0
     a34:	22 e2       	ldi	r18, 0x22	; 34
     a36:	30 e0       	ldi	r19, 0x00	; 0
     a38:	f9 01       	movw	r30, r18
     a3a:	20 81       	ld	r18, Z
     a3c:	22 60       	ori	r18, 0x02	; 2
     a3e:	fc 01       	movw	r30, r24
     a40:	20 83       	st	Z, r18
     a42:	80 e0       	ldi	r24, 0x00	; 0
     a44:	90 e0       	ldi	r25, 0x00	; 0
     a46:	a0 e2       	ldi	r26, 0x20	; 32
     a48:	b1 e4       	ldi	r27, 0x41	; 65
     a4a:	89 83       	std	Y+1, r24	; 0x01
     a4c:	9a 83       	std	Y+2, r25	; 0x02
     a4e:	ab 83       	std	Y+3, r26	; 0x03
     a50:	bc 83       	std	Y+4, r27	; 0x04
	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint8_t __ticks;
	double __tmp2 ;
	__tmp = ((F_CPU) / 3e6) * __us;
     a52:	2b ea       	ldi	r18, 0xAB	; 171
     a54:	3a ea       	ldi	r19, 0xAA	; 170
     a56:	4a e2       	ldi	r20, 0x2A	; 42
     a58:	50 e4       	ldi	r21, 0x40	; 64
     a5a:	69 81       	ldd	r22, Y+1	; 0x01
     a5c:	7a 81       	ldd	r23, Y+2	; 0x02
     a5e:	8b 81       	ldd	r24, Y+3	; 0x03
     a60:	9c 81       	ldd	r25, Y+4	; 0x04
     a62:	96 d2       	rcall	.+1324   	; 0xf90 <__mulsf3>
     a64:	dc 01       	movw	r26, r24
     a66:	cb 01       	movw	r24, r22
     a68:	8d 83       	std	Y+5, r24	; 0x05
     a6a:	9e 83       	std	Y+6, r25	; 0x06
     a6c:	af 83       	std	Y+7, r26	; 0x07
     a6e:	b8 87       	std	Y+8, r27	; 0x08
	__tmp2 = ((F_CPU) / 4e6) * __us;
     a70:	89 81       	ldd	r24, Y+1	; 0x01
     a72:	9a 81       	ldd	r25, Y+2	; 0x02
     a74:	ab 81       	ldd	r26, Y+3	; 0x03
     a76:	bc 81       	ldd	r27, Y+4	; 0x04
     a78:	9c 01       	movw	r18, r24
     a7a:	ad 01       	movw	r20, r26
     a7c:	bc 01       	movw	r22, r24
     a7e:	cd 01       	movw	r24, r26
     a80:	d5 d0       	rcall	.+426    	; 0xc2c <__addsf3>
     a82:	dc 01       	movw	r26, r24
     a84:	cb 01       	movw	r24, r22
     a86:	89 87       	std	Y+9, r24	; 0x09
     a88:	9a 87       	std	Y+10, r25	; 0x0a
     a8a:	ab 87       	std	Y+11, r26	; 0x0b
     a8c:	bc 87       	std	Y+12, r27	; 0x0c
	if (__tmp < 1.0)
     a8e:	20 e0       	ldi	r18, 0x00	; 0
     a90:	30 e0       	ldi	r19, 0x00	; 0
     a92:	40 e8       	ldi	r20, 0x80	; 128
     a94:	5f e3       	ldi	r21, 0x3F	; 63
     a96:	6d 81       	ldd	r22, Y+5	; 0x05
     a98:	7e 81       	ldd	r23, Y+6	; 0x06
     a9a:	8f 81       	ldd	r24, Y+7	; 0x07
     a9c:	98 85       	ldd	r25, Y+8	; 0x08
     a9e:	2a d1       	rcall	.+596    	; 0xcf4 <__cmpsf2>
     aa0:	88 23       	and	r24, r24
     aa2:	1c f4       	brge	.+6      	; 0xaaa <USS_Trigger+0x8e>
		__ticks = 1;
     aa4:	81 e0       	ldi	r24, 0x01	; 1
     aa6:	8d 87       	std	Y+13, r24	; 0x0d
     aa8:	a7 c0       	rjmp	.+334    	; 0xbf8 <USS_Trigger+0x1dc>
	else if (__tmp2 > 65535)
     aaa:	20 e0       	ldi	r18, 0x00	; 0
     aac:	3f ef       	ldi	r19, 0xFF	; 255
     aae:	4f e7       	ldi	r20, 0x7F	; 127
     ab0:	57 e4       	ldi	r21, 0x47	; 71
     ab2:	69 85       	ldd	r22, Y+9	; 0x09
     ab4:	7a 85       	ldd	r23, Y+10	; 0x0a
     ab6:	8b 85       	ldd	r24, Y+11	; 0x0b
     ab8:	9c 85       	ldd	r25, Y+12	; 0x0c
     aba:	66 d2       	rcall	.+1228   	; 0xf88 <__gesf2>
     abc:	18 16       	cp	r1, r24
     abe:	0c f0       	brlt	.+2      	; 0xac2 <USS_Trigger+0xa6>
     ac0:	74 c0       	rjmp	.+232    	; 0xbaa <USS_Trigger+0x18e>
	{
		_delay_ms(__us / 1000.0);
     ac2:	20 e0       	ldi	r18, 0x00	; 0
     ac4:	30 e0       	ldi	r19, 0x00	; 0
     ac6:	4a e7       	ldi	r20, 0x7A	; 122
     ac8:	54 e4       	ldi	r21, 0x44	; 68
     aca:	69 81       	ldd	r22, Y+1	; 0x01
     acc:	7a 81       	ldd	r23, Y+2	; 0x02
     ace:	8b 81       	ldd	r24, Y+3	; 0x03
     ad0:	9c 81       	ldd	r25, Y+4	; 0x04
     ad2:	14 d1       	rcall	.+552    	; 0xcfc <__divsf3>
     ad4:	dc 01       	movw	r26, r24
     ad6:	cb 01       	movw	r24, r22
     ad8:	8e 87       	std	Y+14, r24	; 0x0e
     ada:	9f 87       	std	Y+15, r25	; 0x0f
     adc:	a8 8b       	std	Y+16, r26	; 0x10
     ade:	b9 8b       	std	Y+17, r27	; 0x11

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
     ae0:	20 e0       	ldi	r18, 0x00	; 0
     ae2:	30 e0       	ldi	r19, 0x00	; 0
     ae4:	4a ef       	ldi	r20, 0xFA	; 250
     ae6:	54 e4       	ldi	r21, 0x44	; 68
     ae8:	6e 85       	ldd	r22, Y+14	; 0x0e
     aea:	7f 85       	ldd	r23, Y+15	; 0x0f
     aec:	88 89       	ldd	r24, Y+16	; 0x10
     aee:	99 89       	ldd	r25, Y+17	; 0x11
     af0:	4f d2       	rcall	.+1182   	; 0xf90 <__mulsf3>
     af2:	dc 01       	movw	r26, r24
     af4:	cb 01       	movw	r24, r22
     af6:	8a 8b       	std	Y+18, r24	; 0x12
     af8:	9b 8b       	std	Y+19, r25	; 0x13
     afa:	ac 8b       	std	Y+20, r26	; 0x14
     afc:	bd 8b       	std	Y+21, r27	; 0x15
	if (__tmp < 1.0)
     afe:	20 e0       	ldi	r18, 0x00	; 0
     b00:	30 e0       	ldi	r19, 0x00	; 0
     b02:	40 e8       	ldi	r20, 0x80	; 128
     b04:	5f e3       	ldi	r21, 0x3F	; 63
     b06:	6a 89       	ldd	r22, Y+18	; 0x12
     b08:	7b 89       	ldd	r23, Y+19	; 0x13
     b0a:	8c 89       	ldd	r24, Y+20	; 0x14
     b0c:	9d 89       	ldd	r25, Y+21	; 0x15
     b0e:	f2 d0       	rcall	.+484    	; 0xcf4 <__cmpsf2>
     b10:	88 23       	and	r24, r24
     b12:	2c f4       	brge	.+10     	; 0xb1e <USS_Trigger+0x102>
		__ticks = 1;
     b14:	81 e0       	ldi	r24, 0x01	; 1
     b16:	90 e0       	ldi	r25, 0x00	; 0
     b18:	9f 8b       	std	Y+23, r25	; 0x17
     b1a:	8e 8b       	std	Y+22, r24	; 0x16
     b1c:	3b c0       	rjmp	.+118    	; 0xb94 <USS_Trigger+0x178>
	else if (__tmp > 65535)
     b1e:	20 e0       	ldi	r18, 0x00	; 0
     b20:	3f ef       	ldi	r19, 0xFF	; 255
     b22:	4f e7       	ldi	r20, 0x7F	; 127
     b24:	57 e4       	ldi	r21, 0x47	; 71
     b26:	6a 89       	ldd	r22, Y+18	; 0x12
     b28:	7b 89       	ldd	r23, Y+19	; 0x13
     b2a:	8c 89       	ldd	r24, Y+20	; 0x14
     b2c:	9d 89       	ldd	r25, Y+21	; 0x15
     b2e:	2c d2       	rcall	.+1112   	; 0xf88 <__gesf2>
     b30:	18 16       	cp	r1, r24
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     b32:	3c f5       	brge	.+78     	; 0xb82 <USS_Trigger+0x166>
     b34:	20 e0       	ldi	r18, 0x00	; 0
     b36:	30 e0       	ldi	r19, 0x00	; 0
     b38:	40 e2       	ldi	r20, 0x20	; 32
     b3a:	51 e4       	ldi	r21, 0x41	; 65
     b3c:	6e 85       	ldd	r22, Y+14	; 0x0e
     b3e:	7f 85       	ldd	r23, Y+15	; 0x0f
     b40:	88 89       	ldd	r24, Y+16	; 0x10
     b42:	99 89       	ldd	r25, Y+17	; 0x11
     b44:	25 d2       	rcall	.+1098   	; 0xf90 <__mulsf3>
     b46:	dc 01       	movw	r26, r24
     b48:	cb 01       	movw	r24, r22
     b4a:	bc 01       	movw	r22, r24
     b4c:	cd 01       	movw	r24, r26
     b4e:	3e d1       	rcall	.+636    	; 0xdcc <__fixunssfsi>
     b50:	dc 01       	movw	r26, r24
     b52:	cb 01       	movw	r24, r22
     b54:	9f 8b       	std	Y+23, r25	; 0x17
     b56:	8e 8b       	std	Y+22, r24	; 0x16
     b58:	0f c0       	rjmp	.+30     	; 0xb78 <USS_Trigger+0x15c>
     b5a:	88 ec       	ldi	r24, 0xC8	; 200
     b5c:	90 e0       	ldi	r25, 0x00	; 0
     b5e:	99 8f       	std	Y+25, r25	; 0x19
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     b60:	88 8f       	std	Y+24, r24	; 0x18
     b62:	88 8d       	ldd	r24, Y+24	; 0x18
     b64:	99 8d       	ldd	r25, Y+25	; 0x19
     b66:	01 97       	sbiw	r24, 0x01	; 1
     b68:	f1 f7       	brne	.-4      	; 0xb66 <USS_Trigger+0x14a>
     b6a:	99 8f       	std	Y+25, r25	; 0x19
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     b6c:	88 8f       	std	Y+24, r24	; 0x18
     b6e:	8e 89       	ldd	r24, Y+22	; 0x16
     b70:	9f 89       	ldd	r25, Y+23	; 0x17
     b72:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     b74:	9f 8b       	std	Y+23, r25	; 0x17
     b76:	8e 8b       	std	Y+22, r24	; 0x16
     b78:	8e 89       	ldd	r24, Y+22	; 0x16
     b7a:	9f 89       	ldd	r25, Y+23	; 0x17
     b7c:	89 2b       	or	r24, r25
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     b7e:	69 f7       	brne	.-38     	; 0xb5a <USS_Trigger+0x13e>
     b80:	3b c0       	rjmp	.+118    	; 0xbf8 <USS_Trigger+0x1dc>
     b82:	6a 89       	ldd	r22, Y+18	; 0x12
     b84:	7b 89       	ldd	r23, Y+19	; 0x13
     b86:	8c 89       	ldd	r24, Y+20	; 0x14
     b88:	9d 89       	ldd	r25, Y+21	; 0x15
     b8a:	20 d1       	rcall	.+576    	; 0xdcc <__fixunssfsi>
     b8c:	dc 01       	movw	r26, r24
     b8e:	cb 01       	movw	r24, r22
     b90:	9f 8b       	std	Y+23, r25	; 0x17
     b92:	8e 8b       	std	Y+22, r24	; 0x16
     b94:	8e 89       	ldd	r24, Y+22	; 0x16
     b96:	9f 89       	ldd	r25, Y+23	; 0x17
     b98:	9b 8f       	std	Y+27, r25	; 0x1b
     b9a:	8a 8f       	std	Y+26, r24	; 0x1a
     b9c:	8a 8d       	ldd	r24, Y+26	; 0x1a
     b9e:	9b 8d       	ldd	r25, Y+27	; 0x1b
     ba0:	01 97       	sbiw	r24, 0x01	; 1
     ba2:	f1 f7       	brne	.-4      	; 0xba0 <USS_Trigger+0x184>
     ba4:	9b 8f       	std	Y+27, r25	; 0x1b
		__ticks = 1;
	else if (__tmp2 > 65535)
	{
		_delay_ms(__us / 1000.0);
	}
	else if (__tmp > 255)
     ba6:	8a 8f       	std	Y+26, r24	; 0x1a
     ba8:	27 c0       	rjmp	.+78     	; 0xbf8 <USS_Trigger+0x1dc>
     baa:	20 e0       	ldi	r18, 0x00	; 0
     bac:	30 e0       	ldi	r19, 0x00	; 0
     bae:	4f e7       	ldi	r20, 0x7F	; 127
     bb0:	53 e4       	ldi	r21, 0x43	; 67
     bb2:	6d 81       	ldd	r22, Y+5	; 0x05
     bb4:	7e 81       	ldd	r23, Y+6	; 0x06
     bb6:	8f 81       	ldd	r24, Y+7	; 0x07
     bb8:	98 85       	ldd	r25, Y+8	; 0x08
     bba:	e6 d1       	rcall	.+972    	; 0xf88 <__gesf2>
	{
		uint16_t __ticks=(uint16_t)__tmp2;
     bbc:	18 16       	cp	r1, r24
     bbe:	a4 f4       	brge	.+40     	; 0xbe8 <USS_Trigger+0x1cc>
     bc0:	69 85       	ldd	r22, Y+9	; 0x09
     bc2:	7a 85       	ldd	r23, Y+10	; 0x0a
     bc4:	8b 85       	ldd	r24, Y+11	; 0x0b
     bc6:	9c 85       	ldd	r25, Y+12	; 0x0c
     bc8:	01 d1       	rcall	.+514    	; 0xdcc <__fixunssfsi>
     bca:	dc 01       	movw	r26, r24
     bcc:	cb 01       	movw	r24, r22
     bce:	9d 8f       	std	Y+29, r25	; 0x1d
     bd0:	8c 8f       	std	Y+28, r24	; 0x1c
     bd2:	8c 8d       	ldd	r24, Y+28	; 0x1c
     bd4:	9d 8d       	ldd	r25, Y+29	; 0x1d
     bd6:	9f 8f       	std	Y+31, r25	; 0x1f
     bd8:	8e 8f       	std	Y+30, r24	; 0x1e
     bda:	8e 8d       	ldd	r24, Y+30	; 0x1e
     bdc:	9f 8d       	ldd	r25, Y+31	; 0x1f
     bde:	01 97       	sbiw	r24, 0x01	; 1
     be0:	f1 f7       	brne	.-4      	; 0xbde <USS_Trigger+0x1c2>
     be2:	9f 8f       	std	Y+31, r25	; 0x1f
		_delay_loop_2(__ticks);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
     be4:	8e 8f       	std	Y+30, r24	; 0x1e
     be6:	0e c0       	rjmp	.+28     	; 0xc04 <USS_Trigger+0x1e8>
     be8:	6d 81       	ldd	r22, Y+5	; 0x05
     bea:	7e 81       	ldd	r23, Y+6	; 0x06
     bec:	8f 81       	ldd	r24, Y+7	; 0x07
     bee:	98 85       	ldd	r25, Y+8	; 0x08
     bf0:	ed d0       	rcall	.+474    	; 0xdcc <__fixunssfsi>
     bf2:	dc 01       	movw	r26, r24
     bf4:	cb 01       	movw	r24, r22
     bf6:	8d 87       	std	Y+13, r24	; 0x0d
     bf8:	8d 85       	ldd	r24, Y+13	; 0x0d
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
     bfa:	88 a3       	std	Y+32, r24	; 0x20
     bfc:	88 a1       	ldd	r24, Y+32	; 0x20
     bfe:	8a 95       	dec	r24
     c00:	f1 f7       	brne	.-4      	; 0xbfe <USS_Trigger+0x1e2>
	_delay_us(10);
	USS_PORT &=~ 1<<Trigger; //turn off trigger
     c02:	88 a3       	std	Y+32, r24	; 0x20
     c04:	82 e2       	ldi	r24, 0x22	; 34
     c06:	90 e0       	ldi	r25, 0x00	; 0
     c08:	22 e2       	ldi	r18, 0x22	; 34
     c0a:	30 e0       	ldi	r19, 0x00	; 0
     c0c:	f9 01       	movw	r30, r18
     c0e:	20 81       	ld	r18, Z
     c10:	2c 7f       	andi	r18, 0xFC	; 252
     c12:	fc 01       	movw	r30, r24
	
     c14:	20 83       	st	Z, r18
     c16:	00 00       	nop
     c18:	a0 96       	adiw	r28, 0x20	; 32
     c1a:	0f b6       	in	r0, 0x3f	; 63
     c1c:	f8 94       	cli
     c1e:	de bf       	out	0x3e, r29	; 62
     c20:	0f be       	out	0x3f, r0	; 63
     c22:	cd bf       	out	0x3d, r28	; 61
     c24:	df 91       	pop	r29
     c26:	cf 91       	pop	r28
     c28:	08 95       	ret

00000c2a <__subsf3>:
     c2a:	50 58       	subi	r21, 0x80	; 128

00000c2c <__addsf3>:
     c2c:	bb 27       	eor	r27, r27
     c2e:	aa 27       	eor	r26, r26
     c30:	0e d0       	rcall	.+28     	; 0xc4e <__addsf3x>
     c32:	70 c1       	rjmp	.+736    	; 0xf14 <__fp_round>
     c34:	61 d1       	rcall	.+706    	; 0xef8 <__fp_pscA>
     c36:	30 f0       	brcs	.+12     	; 0xc44 <__addsf3+0x18>
     c38:	66 d1       	rcall	.+716    	; 0xf06 <__fp_pscB>
     c3a:	20 f0       	brcs	.+8      	; 0xc44 <__addsf3+0x18>
     c3c:	31 f4       	brne	.+12     	; 0xc4a <__addsf3+0x1e>
     c3e:	9f 3f       	cpi	r25, 0xFF	; 255
     c40:	11 f4       	brne	.+4      	; 0xc46 <__addsf3+0x1a>
     c42:	1e f4       	brtc	.+6      	; 0xc4a <__addsf3+0x1e>
     c44:	56 c1       	rjmp	.+684    	; 0xef2 <__fp_nan>
     c46:	0e f4       	brtc	.+2      	; 0xc4a <__addsf3+0x1e>
     c48:	e0 95       	com	r30
     c4a:	e7 fb       	bst	r30, 7
     c4c:	4c c1       	rjmp	.+664    	; 0xee6 <__fp_inf>

00000c4e <__addsf3x>:
     c4e:	e9 2f       	mov	r30, r25
     c50:	72 d1       	rcall	.+740    	; 0xf36 <__fp_split3>
     c52:	80 f3       	brcs	.-32     	; 0xc34 <__addsf3+0x8>
     c54:	ba 17       	cp	r27, r26
     c56:	62 07       	cpc	r22, r18
     c58:	73 07       	cpc	r23, r19
     c5a:	84 07       	cpc	r24, r20
     c5c:	95 07       	cpc	r25, r21
     c5e:	18 f0       	brcs	.+6      	; 0xc66 <__addsf3x+0x18>
     c60:	71 f4       	brne	.+28     	; 0xc7e <__addsf3x+0x30>
     c62:	9e f5       	brtc	.+102    	; 0xcca <__addsf3x+0x7c>
     c64:	8a c1       	rjmp	.+788    	; 0xf7a <__fp_zero>
     c66:	0e f4       	brtc	.+2      	; 0xc6a <__addsf3x+0x1c>
     c68:	e0 95       	com	r30
     c6a:	0b 2e       	mov	r0, r27
     c6c:	ba 2f       	mov	r27, r26
     c6e:	a0 2d       	mov	r26, r0
     c70:	0b 01       	movw	r0, r22
     c72:	b9 01       	movw	r22, r18
     c74:	90 01       	movw	r18, r0
     c76:	0c 01       	movw	r0, r24
     c78:	ca 01       	movw	r24, r20
     c7a:	a0 01       	movw	r20, r0
     c7c:	11 24       	eor	r1, r1
     c7e:	ff 27       	eor	r31, r31
     c80:	59 1b       	sub	r21, r25
     c82:	99 f0       	breq	.+38     	; 0xcaa <__addsf3x+0x5c>
     c84:	59 3f       	cpi	r21, 0xF9	; 249
     c86:	50 f4       	brcc	.+20     	; 0xc9c <__addsf3x+0x4e>
     c88:	50 3e       	cpi	r21, 0xE0	; 224
     c8a:	68 f1       	brcs	.+90     	; 0xce6 <__addsf3x+0x98>
     c8c:	1a 16       	cp	r1, r26
     c8e:	f0 40       	sbci	r31, 0x00	; 0
     c90:	a2 2f       	mov	r26, r18
     c92:	23 2f       	mov	r18, r19
     c94:	34 2f       	mov	r19, r20
     c96:	44 27       	eor	r20, r20
     c98:	58 5f       	subi	r21, 0xF8	; 248
     c9a:	f3 cf       	rjmp	.-26     	; 0xc82 <__addsf3x+0x34>
     c9c:	46 95       	lsr	r20
     c9e:	37 95       	ror	r19
     ca0:	27 95       	ror	r18
     ca2:	a7 95       	ror	r26
     ca4:	f0 40       	sbci	r31, 0x00	; 0
     ca6:	53 95       	inc	r21
     ca8:	c9 f7       	brne	.-14     	; 0xc9c <__addsf3x+0x4e>
     caa:	7e f4       	brtc	.+30     	; 0xcca <__addsf3x+0x7c>
     cac:	1f 16       	cp	r1, r31
     cae:	ba 0b       	sbc	r27, r26
     cb0:	62 0b       	sbc	r22, r18
     cb2:	73 0b       	sbc	r23, r19
     cb4:	84 0b       	sbc	r24, r20
     cb6:	ba f0       	brmi	.+46     	; 0xce6 <__addsf3x+0x98>
     cb8:	91 50       	subi	r25, 0x01	; 1
     cba:	a1 f0       	breq	.+40     	; 0xce4 <__addsf3x+0x96>
     cbc:	ff 0f       	add	r31, r31
     cbe:	bb 1f       	adc	r27, r27
     cc0:	66 1f       	adc	r22, r22
     cc2:	77 1f       	adc	r23, r23
     cc4:	88 1f       	adc	r24, r24
     cc6:	c2 f7       	brpl	.-16     	; 0xcb8 <__addsf3x+0x6a>
     cc8:	0e c0       	rjmp	.+28     	; 0xce6 <__addsf3x+0x98>
     cca:	ba 0f       	add	r27, r26
     ccc:	62 1f       	adc	r22, r18
     cce:	73 1f       	adc	r23, r19
     cd0:	84 1f       	adc	r24, r20
     cd2:	48 f4       	brcc	.+18     	; 0xce6 <__addsf3x+0x98>
     cd4:	87 95       	ror	r24
     cd6:	77 95       	ror	r23
     cd8:	67 95       	ror	r22
     cda:	b7 95       	ror	r27
     cdc:	f7 95       	ror	r31
     cde:	9e 3f       	cpi	r25, 0xFE	; 254
     ce0:	08 f0       	brcs	.+2      	; 0xce4 <__addsf3x+0x96>
     ce2:	b3 cf       	rjmp	.-154    	; 0xc4a <__addsf3+0x1e>
     ce4:	93 95       	inc	r25
     ce6:	88 0f       	add	r24, r24
     ce8:	08 f0       	brcs	.+2      	; 0xcec <__addsf3x+0x9e>
     cea:	99 27       	eor	r25, r25
     cec:	ee 0f       	add	r30, r30
     cee:	97 95       	ror	r25
     cf0:	87 95       	ror	r24
     cf2:	08 95       	ret

00000cf4 <__cmpsf2>:
     cf4:	d4 d0       	rcall	.+424    	; 0xe9e <__fp_cmp>
     cf6:	08 f4       	brcc	.+2      	; 0xcfa <__cmpsf2+0x6>
     cf8:	81 e0       	ldi	r24, 0x01	; 1
     cfa:	08 95       	ret

00000cfc <__divsf3>:
     cfc:	0c d0       	rcall	.+24     	; 0xd16 <__divsf3x>
     cfe:	0a c1       	rjmp	.+532    	; 0xf14 <__fp_round>
     d00:	02 d1       	rcall	.+516    	; 0xf06 <__fp_pscB>
     d02:	40 f0       	brcs	.+16     	; 0xd14 <__divsf3+0x18>
     d04:	f9 d0       	rcall	.+498    	; 0xef8 <__fp_pscA>
     d06:	30 f0       	brcs	.+12     	; 0xd14 <__divsf3+0x18>
     d08:	21 f4       	brne	.+8      	; 0xd12 <__divsf3+0x16>
     d0a:	5f 3f       	cpi	r21, 0xFF	; 255
     d0c:	19 f0       	breq	.+6      	; 0xd14 <__divsf3+0x18>
     d0e:	eb c0       	rjmp	.+470    	; 0xee6 <__fp_inf>
     d10:	51 11       	cpse	r21, r1
     d12:	34 c1       	rjmp	.+616    	; 0xf7c <__fp_szero>
     d14:	ee c0       	rjmp	.+476    	; 0xef2 <__fp_nan>

00000d16 <__divsf3x>:
     d16:	0f d1       	rcall	.+542    	; 0xf36 <__fp_split3>
     d18:	98 f3       	brcs	.-26     	; 0xd00 <__divsf3+0x4>

00000d1a <__divsf3_pse>:
     d1a:	99 23       	and	r25, r25
     d1c:	c9 f3       	breq	.-14     	; 0xd10 <__divsf3+0x14>
     d1e:	55 23       	and	r21, r21
     d20:	b1 f3       	breq	.-20     	; 0xd0e <__divsf3+0x12>
     d22:	95 1b       	sub	r25, r21
     d24:	55 0b       	sbc	r21, r21
     d26:	bb 27       	eor	r27, r27
     d28:	aa 27       	eor	r26, r26
     d2a:	62 17       	cp	r22, r18
     d2c:	73 07       	cpc	r23, r19
     d2e:	84 07       	cpc	r24, r20
     d30:	38 f0       	brcs	.+14     	; 0xd40 <__divsf3_pse+0x26>
     d32:	9f 5f       	subi	r25, 0xFF	; 255
     d34:	5f 4f       	sbci	r21, 0xFF	; 255
     d36:	22 0f       	add	r18, r18
     d38:	33 1f       	adc	r19, r19
     d3a:	44 1f       	adc	r20, r20
     d3c:	aa 1f       	adc	r26, r26
     d3e:	a9 f3       	breq	.-22     	; 0xd2a <__divsf3_pse+0x10>
     d40:	33 d0       	rcall	.+102    	; 0xda8 <__divsf3_pse+0x8e>
     d42:	0e 2e       	mov	r0, r30
     d44:	3a f0       	brmi	.+14     	; 0xd54 <__divsf3_pse+0x3a>
     d46:	e0 e8       	ldi	r30, 0x80	; 128
     d48:	30 d0       	rcall	.+96     	; 0xdaa <__divsf3_pse+0x90>
     d4a:	91 50       	subi	r25, 0x01	; 1
     d4c:	50 40       	sbci	r21, 0x00	; 0
     d4e:	e6 95       	lsr	r30
     d50:	00 1c       	adc	r0, r0
     d52:	ca f7       	brpl	.-14     	; 0xd46 <__divsf3_pse+0x2c>
     d54:	29 d0       	rcall	.+82     	; 0xda8 <__divsf3_pse+0x8e>
     d56:	fe 2f       	mov	r31, r30
     d58:	27 d0       	rcall	.+78     	; 0xda8 <__divsf3_pse+0x8e>
     d5a:	66 0f       	add	r22, r22
     d5c:	77 1f       	adc	r23, r23
     d5e:	88 1f       	adc	r24, r24
     d60:	bb 1f       	adc	r27, r27
     d62:	26 17       	cp	r18, r22
     d64:	37 07       	cpc	r19, r23
     d66:	48 07       	cpc	r20, r24
     d68:	ab 07       	cpc	r26, r27
     d6a:	b0 e8       	ldi	r27, 0x80	; 128
     d6c:	09 f0       	breq	.+2      	; 0xd70 <__divsf3_pse+0x56>
     d6e:	bb 0b       	sbc	r27, r27
     d70:	80 2d       	mov	r24, r0
     d72:	bf 01       	movw	r22, r30
     d74:	ff 27       	eor	r31, r31
     d76:	93 58       	subi	r25, 0x83	; 131
     d78:	5f 4f       	sbci	r21, 0xFF	; 255
     d7a:	2a f0       	brmi	.+10     	; 0xd86 <__divsf3_pse+0x6c>
     d7c:	9e 3f       	cpi	r25, 0xFE	; 254
     d7e:	51 05       	cpc	r21, r1
     d80:	68 f0       	brcs	.+26     	; 0xd9c <__divsf3_pse+0x82>
     d82:	b1 c0       	rjmp	.+354    	; 0xee6 <__fp_inf>
     d84:	fb c0       	rjmp	.+502    	; 0xf7c <__fp_szero>
     d86:	5f 3f       	cpi	r21, 0xFF	; 255
     d88:	ec f3       	brlt	.-6      	; 0xd84 <__divsf3_pse+0x6a>
     d8a:	98 3e       	cpi	r25, 0xE8	; 232
     d8c:	dc f3       	brlt	.-10     	; 0xd84 <__divsf3_pse+0x6a>
     d8e:	86 95       	lsr	r24
     d90:	77 95       	ror	r23
     d92:	67 95       	ror	r22
     d94:	b7 95       	ror	r27
     d96:	f7 95       	ror	r31
     d98:	9f 5f       	subi	r25, 0xFF	; 255
     d9a:	c9 f7       	brne	.-14     	; 0xd8e <__divsf3_pse+0x74>
     d9c:	88 0f       	add	r24, r24
     d9e:	91 1d       	adc	r25, r1
     da0:	96 95       	lsr	r25
     da2:	87 95       	ror	r24
     da4:	97 f9       	bld	r25, 7
     da6:	08 95       	ret
     da8:	e1 e0       	ldi	r30, 0x01	; 1
     daa:	66 0f       	add	r22, r22
     dac:	77 1f       	adc	r23, r23
     dae:	88 1f       	adc	r24, r24
     db0:	bb 1f       	adc	r27, r27
     db2:	62 17       	cp	r22, r18
     db4:	73 07       	cpc	r23, r19
     db6:	84 07       	cpc	r24, r20
     db8:	ba 07       	cpc	r27, r26
     dba:	20 f0       	brcs	.+8      	; 0xdc4 <__divsf3_pse+0xaa>
     dbc:	62 1b       	sub	r22, r18
     dbe:	73 0b       	sbc	r23, r19
     dc0:	84 0b       	sbc	r24, r20
     dc2:	ba 0b       	sbc	r27, r26
     dc4:	ee 1f       	adc	r30, r30
     dc6:	88 f7       	brcc	.-30     	; 0xdaa <__divsf3_pse+0x90>
     dc8:	e0 95       	com	r30
     dca:	08 95       	ret

00000dcc <__fixunssfsi>:
     dcc:	bc d0       	rcall	.+376    	; 0xf46 <__fp_splitA>
     dce:	88 f0       	brcs	.+34     	; 0xdf2 <__fixunssfsi+0x26>
     dd0:	9f 57       	subi	r25, 0x7F	; 127
     dd2:	90 f0       	brcs	.+36     	; 0xdf8 <__fixunssfsi+0x2c>
     dd4:	b9 2f       	mov	r27, r25
     dd6:	99 27       	eor	r25, r25
     dd8:	b7 51       	subi	r27, 0x17	; 23
     dda:	a0 f0       	brcs	.+40     	; 0xe04 <__fixunssfsi+0x38>
     ddc:	d1 f0       	breq	.+52     	; 0xe12 <__fixunssfsi+0x46>
     dde:	66 0f       	add	r22, r22
     de0:	77 1f       	adc	r23, r23
     de2:	88 1f       	adc	r24, r24
     de4:	99 1f       	adc	r25, r25
     de6:	1a f0       	brmi	.+6      	; 0xdee <__fixunssfsi+0x22>
     de8:	ba 95       	dec	r27
     dea:	c9 f7       	brne	.-14     	; 0xdde <__fixunssfsi+0x12>
     dec:	12 c0       	rjmp	.+36     	; 0xe12 <__fixunssfsi+0x46>
     dee:	b1 30       	cpi	r27, 0x01	; 1
     df0:	81 f0       	breq	.+32     	; 0xe12 <__fixunssfsi+0x46>
     df2:	c3 d0       	rcall	.+390    	; 0xf7a <__fp_zero>
     df4:	b1 e0       	ldi	r27, 0x01	; 1
     df6:	08 95       	ret
     df8:	c0 c0       	rjmp	.+384    	; 0xf7a <__fp_zero>
     dfa:	67 2f       	mov	r22, r23
     dfc:	78 2f       	mov	r23, r24
     dfe:	88 27       	eor	r24, r24
     e00:	b8 5f       	subi	r27, 0xF8	; 248
     e02:	39 f0       	breq	.+14     	; 0xe12 <__fixunssfsi+0x46>
     e04:	b9 3f       	cpi	r27, 0xF9	; 249
     e06:	cc f3       	brlt	.-14     	; 0xdfa <__fixunssfsi+0x2e>
     e08:	86 95       	lsr	r24
     e0a:	77 95       	ror	r23
     e0c:	67 95       	ror	r22
     e0e:	b3 95       	inc	r27
     e10:	d9 f7       	brne	.-10     	; 0xe08 <__fixunssfsi+0x3c>
     e12:	3e f4       	brtc	.+14     	; 0xe22 <__fixunssfsi+0x56>
     e14:	90 95       	com	r25
     e16:	80 95       	com	r24
     e18:	70 95       	com	r23
     e1a:	61 95       	neg	r22
     e1c:	7f 4f       	sbci	r23, 0xFF	; 255
     e1e:	8f 4f       	sbci	r24, 0xFF	; 255
     e20:	9f 4f       	sbci	r25, 0xFF	; 255
     e22:	08 95       	ret

00000e24 <__floatunsisf>:
     e24:	e8 94       	clt
     e26:	09 c0       	rjmp	.+18     	; 0xe3a <__floatsisf+0x12>

00000e28 <__floatsisf>:
     e28:	97 fb       	bst	r25, 7
     e2a:	3e f4       	brtc	.+14     	; 0xe3a <__floatsisf+0x12>
     e2c:	90 95       	com	r25
     e2e:	80 95       	com	r24
     e30:	70 95       	com	r23
     e32:	61 95       	neg	r22
     e34:	7f 4f       	sbci	r23, 0xFF	; 255
     e36:	8f 4f       	sbci	r24, 0xFF	; 255
     e38:	9f 4f       	sbci	r25, 0xFF	; 255
     e3a:	99 23       	and	r25, r25
     e3c:	a9 f0       	breq	.+42     	; 0xe68 <__floatsisf+0x40>
     e3e:	f9 2f       	mov	r31, r25
     e40:	96 e9       	ldi	r25, 0x96	; 150
     e42:	bb 27       	eor	r27, r27
     e44:	93 95       	inc	r25
     e46:	f6 95       	lsr	r31
     e48:	87 95       	ror	r24
     e4a:	77 95       	ror	r23
     e4c:	67 95       	ror	r22
     e4e:	b7 95       	ror	r27
     e50:	f1 11       	cpse	r31, r1
     e52:	f8 cf       	rjmp	.-16     	; 0xe44 <__floatsisf+0x1c>
     e54:	fa f4       	brpl	.+62     	; 0xe94 <__floatsisf+0x6c>
     e56:	bb 0f       	add	r27, r27
     e58:	11 f4       	brne	.+4      	; 0xe5e <__floatsisf+0x36>
     e5a:	60 ff       	sbrs	r22, 0
     e5c:	1b c0       	rjmp	.+54     	; 0xe94 <__floatsisf+0x6c>
     e5e:	6f 5f       	subi	r22, 0xFF	; 255
     e60:	7f 4f       	sbci	r23, 0xFF	; 255
     e62:	8f 4f       	sbci	r24, 0xFF	; 255
     e64:	9f 4f       	sbci	r25, 0xFF	; 255
     e66:	16 c0       	rjmp	.+44     	; 0xe94 <__floatsisf+0x6c>
     e68:	88 23       	and	r24, r24
     e6a:	11 f0       	breq	.+4      	; 0xe70 <__floatsisf+0x48>
     e6c:	96 e9       	ldi	r25, 0x96	; 150
     e6e:	11 c0       	rjmp	.+34     	; 0xe92 <__floatsisf+0x6a>
     e70:	77 23       	and	r23, r23
     e72:	21 f0       	breq	.+8      	; 0xe7c <__floatsisf+0x54>
     e74:	9e e8       	ldi	r25, 0x8E	; 142
     e76:	87 2f       	mov	r24, r23
     e78:	76 2f       	mov	r23, r22
     e7a:	05 c0       	rjmp	.+10     	; 0xe86 <__floatsisf+0x5e>
     e7c:	66 23       	and	r22, r22
     e7e:	71 f0       	breq	.+28     	; 0xe9c <__floatsisf+0x74>
     e80:	96 e8       	ldi	r25, 0x86	; 134
     e82:	86 2f       	mov	r24, r22
     e84:	70 e0       	ldi	r23, 0x00	; 0
     e86:	60 e0       	ldi	r22, 0x00	; 0
     e88:	2a f0       	brmi	.+10     	; 0xe94 <__floatsisf+0x6c>
     e8a:	9a 95       	dec	r25
     e8c:	66 0f       	add	r22, r22
     e8e:	77 1f       	adc	r23, r23
     e90:	88 1f       	adc	r24, r24
     e92:	da f7       	brpl	.-10     	; 0xe8a <__floatsisf+0x62>
     e94:	88 0f       	add	r24, r24
     e96:	96 95       	lsr	r25
     e98:	87 95       	ror	r24
     e9a:	97 f9       	bld	r25, 7
     e9c:	08 95       	ret

00000e9e <__fp_cmp>:
     e9e:	99 0f       	add	r25, r25
     ea0:	00 08       	sbc	r0, r0
     ea2:	55 0f       	add	r21, r21
     ea4:	aa 0b       	sbc	r26, r26
     ea6:	e0 e8       	ldi	r30, 0x80	; 128
     ea8:	fe ef       	ldi	r31, 0xFE	; 254
     eaa:	16 16       	cp	r1, r22
     eac:	17 06       	cpc	r1, r23
     eae:	e8 07       	cpc	r30, r24
     eb0:	f9 07       	cpc	r31, r25
     eb2:	c0 f0       	brcs	.+48     	; 0xee4 <__fp_cmp+0x46>
     eb4:	12 16       	cp	r1, r18
     eb6:	13 06       	cpc	r1, r19
     eb8:	e4 07       	cpc	r30, r20
     eba:	f5 07       	cpc	r31, r21
     ebc:	98 f0       	brcs	.+38     	; 0xee4 <__fp_cmp+0x46>
     ebe:	62 1b       	sub	r22, r18
     ec0:	73 0b       	sbc	r23, r19
     ec2:	84 0b       	sbc	r24, r20
     ec4:	95 0b       	sbc	r25, r21
     ec6:	39 f4       	brne	.+14     	; 0xed6 <__fp_cmp+0x38>
     ec8:	0a 26       	eor	r0, r26
     eca:	61 f0       	breq	.+24     	; 0xee4 <__fp_cmp+0x46>
     ecc:	23 2b       	or	r18, r19
     ece:	24 2b       	or	r18, r20
     ed0:	25 2b       	or	r18, r21
     ed2:	21 f4       	brne	.+8      	; 0xedc <__fp_cmp+0x3e>
     ed4:	08 95       	ret
     ed6:	0a 26       	eor	r0, r26
     ed8:	09 f4       	brne	.+2      	; 0xedc <__fp_cmp+0x3e>
     eda:	a1 40       	sbci	r26, 0x01	; 1
     edc:	a6 95       	lsr	r26
     ede:	8f ef       	ldi	r24, 0xFF	; 255
     ee0:	81 1d       	adc	r24, r1
     ee2:	81 1d       	adc	r24, r1
     ee4:	08 95       	ret

00000ee6 <__fp_inf>:
     ee6:	97 f9       	bld	r25, 7
     ee8:	9f 67       	ori	r25, 0x7F	; 127
     eea:	80 e8       	ldi	r24, 0x80	; 128
     eec:	70 e0       	ldi	r23, 0x00	; 0
     eee:	60 e0       	ldi	r22, 0x00	; 0
     ef0:	08 95       	ret

00000ef2 <__fp_nan>:
     ef2:	9f ef       	ldi	r25, 0xFF	; 255
     ef4:	80 ec       	ldi	r24, 0xC0	; 192
     ef6:	08 95       	ret

00000ef8 <__fp_pscA>:
     ef8:	00 24       	eor	r0, r0
     efa:	0a 94       	dec	r0
     efc:	16 16       	cp	r1, r22
     efe:	17 06       	cpc	r1, r23
     f00:	18 06       	cpc	r1, r24
     f02:	09 06       	cpc	r0, r25
     f04:	08 95       	ret

00000f06 <__fp_pscB>:
     f06:	00 24       	eor	r0, r0
     f08:	0a 94       	dec	r0
     f0a:	12 16       	cp	r1, r18
     f0c:	13 06       	cpc	r1, r19
     f0e:	14 06       	cpc	r1, r20
     f10:	05 06       	cpc	r0, r21
     f12:	08 95       	ret

00000f14 <__fp_round>:
     f14:	09 2e       	mov	r0, r25
     f16:	03 94       	inc	r0
     f18:	00 0c       	add	r0, r0
     f1a:	11 f4       	brne	.+4      	; 0xf20 <__fp_round+0xc>
     f1c:	88 23       	and	r24, r24
     f1e:	52 f0       	brmi	.+20     	; 0xf34 <__fp_round+0x20>
     f20:	bb 0f       	add	r27, r27
     f22:	40 f4       	brcc	.+16     	; 0xf34 <__fp_round+0x20>
     f24:	bf 2b       	or	r27, r31
     f26:	11 f4       	brne	.+4      	; 0xf2c <__fp_round+0x18>
     f28:	60 ff       	sbrs	r22, 0
     f2a:	04 c0       	rjmp	.+8      	; 0xf34 <__fp_round+0x20>
     f2c:	6f 5f       	subi	r22, 0xFF	; 255
     f2e:	7f 4f       	sbci	r23, 0xFF	; 255
     f30:	8f 4f       	sbci	r24, 0xFF	; 255
     f32:	9f 4f       	sbci	r25, 0xFF	; 255
     f34:	08 95       	ret

00000f36 <__fp_split3>:
     f36:	57 fd       	sbrc	r21, 7
     f38:	90 58       	subi	r25, 0x80	; 128
     f3a:	44 0f       	add	r20, r20
     f3c:	55 1f       	adc	r21, r21
     f3e:	59 f0       	breq	.+22     	; 0xf56 <__fp_splitA+0x10>
     f40:	5f 3f       	cpi	r21, 0xFF	; 255
     f42:	71 f0       	breq	.+28     	; 0xf60 <__fp_splitA+0x1a>
     f44:	47 95       	ror	r20

00000f46 <__fp_splitA>:
     f46:	88 0f       	add	r24, r24
     f48:	97 fb       	bst	r25, 7
     f4a:	99 1f       	adc	r25, r25
     f4c:	61 f0       	breq	.+24     	; 0xf66 <__fp_splitA+0x20>
     f4e:	9f 3f       	cpi	r25, 0xFF	; 255
     f50:	79 f0       	breq	.+30     	; 0xf70 <__fp_splitA+0x2a>
     f52:	87 95       	ror	r24
     f54:	08 95       	ret
     f56:	12 16       	cp	r1, r18
     f58:	13 06       	cpc	r1, r19
     f5a:	14 06       	cpc	r1, r20
     f5c:	55 1f       	adc	r21, r21
     f5e:	f2 cf       	rjmp	.-28     	; 0xf44 <__fp_split3+0xe>
     f60:	46 95       	lsr	r20
     f62:	f1 df       	rcall	.-30     	; 0xf46 <__fp_splitA>
     f64:	08 c0       	rjmp	.+16     	; 0xf76 <__fp_splitA+0x30>
     f66:	16 16       	cp	r1, r22
     f68:	17 06       	cpc	r1, r23
     f6a:	18 06       	cpc	r1, r24
     f6c:	99 1f       	adc	r25, r25
     f6e:	f1 cf       	rjmp	.-30     	; 0xf52 <__fp_splitA+0xc>
     f70:	86 95       	lsr	r24
     f72:	71 05       	cpc	r23, r1
     f74:	61 05       	cpc	r22, r1
     f76:	08 94       	sec
     f78:	08 95       	ret

00000f7a <__fp_zero>:
     f7a:	e8 94       	clt

00000f7c <__fp_szero>:
     f7c:	bb 27       	eor	r27, r27
     f7e:	66 27       	eor	r22, r22
     f80:	77 27       	eor	r23, r23
     f82:	cb 01       	movw	r24, r22
     f84:	97 f9       	bld	r25, 7
     f86:	08 95       	ret

00000f88 <__gesf2>:
     f88:	8a df       	rcall	.-236    	; 0xe9e <__fp_cmp>
     f8a:	08 f4       	brcc	.+2      	; 0xf8e <__gesf2+0x6>
     f8c:	8f ef       	ldi	r24, 0xFF	; 255
     f8e:	08 95       	ret

00000f90 <__mulsf3>:
     f90:	0b d0       	rcall	.+22     	; 0xfa8 <__mulsf3x>
     f92:	c0 cf       	rjmp	.-128    	; 0xf14 <__fp_round>
     f94:	b1 df       	rcall	.-158    	; 0xef8 <__fp_pscA>
     f96:	28 f0       	brcs	.+10     	; 0xfa2 <__mulsf3+0x12>
     f98:	b6 df       	rcall	.-148    	; 0xf06 <__fp_pscB>
     f9a:	18 f0       	brcs	.+6      	; 0xfa2 <__mulsf3+0x12>
     f9c:	95 23       	and	r25, r21
     f9e:	09 f0       	breq	.+2      	; 0xfa2 <__mulsf3+0x12>
     fa0:	a2 cf       	rjmp	.-188    	; 0xee6 <__fp_inf>
     fa2:	a7 cf       	rjmp	.-178    	; 0xef2 <__fp_nan>
     fa4:	11 24       	eor	r1, r1
     fa6:	ea cf       	rjmp	.-44     	; 0xf7c <__fp_szero>

00000fa8 <__mulsf3x>:
     fa8:	c6 df       	rcall	.-116    	; 0xf36 <__fp_split3>
     faa:	a0 f3       	brcs	.-24     	; 0xf94 <__mulsf3+0x4>

00000fac <__mulsf3_pse>:
     fac:	95 9f       	mul	r25, r21
     fae:	d1 f3       	breq	.-12     	; 0xfa4 <__mulsf3+0x14>
     fb0:	95 0f       	add	r25, r21
     fb2:	50 e0       	ldi	r21, 0x00	; 0
     fb4:	55 1f       	adc	r21, r21
     fb6:	62 9f       	mul	r22, r18
     fb8:	f0 01       	movw	r30, r0
     fba:	72 9f       	mul	r23, r18
     fbc:	bb 27       	eor	r27, r27
     fbe:	f0 0d       	add	r31, r0
     fc0:	b1 1d       	adc	r27, r1
     fc2:	63 9f       	mul	r22, r19
     fc4:	aa 27       	eor	r26, r26
     fc6:	f0 0d       	add	r31, r0
     fc8:	b1 1d       	adc	r27, r1
     fca:	aa 1f       	adc	r26, r26
     fcc:	64 9f       	mul	r22, r20
     fce:	66 27       	eor	r22, r22
     fd0:	b0 0d       	add	r27, r0
     fd2:	a1 1d       	adc	r26, r1
     fd4:	66 1f       	adc	r22, r22
     fd6:	82 9f       	mul	r24, r18
     fd8:	22 27       	eor	r18, r18
     fda:	b0 0d       	add	r27, r0
     fdc:	a1 1d       	adc	r26, r1
     fde:	62 1f       	adc	r22, r18
     fe0:	73 9f       	mul	r23, r19
     fe2:	b0 0d       	add	r27, r0
     fe4:	a1 1d       	adc	r26, r1
     fe6:	62 1f       	adc	r22, r18
     fe8:	83 9f       	mul	r24, r19
     fea:	a0 0d       	add	r26, r0
     fec:	61 1d       	adc	r22, r1
     fee:	22 1f       	adc	r18, r18
     ff0:	74 9f       	mul	r23, r20
     ff2:	33 27       	eor	r19, r19
     ff4:	a0 0d       	add	r26, r0
     ff6:	61 1d       	adc	r22, r1
     ff8:	23 1f       	adc	r18, r19
     ffa:	84 9f       	mul	r24, r20
     ffc:	60 0d       	add	r22, r0
     ffe:	21 1d       	adc	r18, r1
    1000:	82 2f       	mov	r24, r18
    1002:	76 2f       	mov	r23, r22
    1004:	6a 2f       	mov	r22, r26
    1006:	11 24       	eor	r1, r1
    1008:	9f 57       	subi	r25, 0x7F	; 127
    100a:	50 40       	sbci	r21, 0x00	; 0
    100c:	8a f0       	brmi	.+34     	; 0x1030 <__mulsf3_pse+0x84>
    100e:	e1 f0       	breq	.+56     	; 0x1048 <__mulsf3_pse+0x9c>
    1010:	88 23       	and	r24, r24
    1012:	4a f0       	brmi	.+18     	; 0x1026 <__mulsf3_pse+0x7a>
    1014:	ee 0f       	add	r30, r30
    1016:	ff 1f       	adc	r31, r31
    1018:	bb 1f       	adc	r27, r27
    101a:	66 1f       	adc	r22, r22
    101c:	77 1f       	adc	r23, r23
    101e:	88 1f       	adc	r24, r24
    1020:	91 50       	subi	r25, 0x01	; 1
    1022:	50 40       	sbci	r21, 0x00	; 0
    1024:	a9 f7       	brne	.-22     	; 0x1010 <__mulsf3_pse+0x64>
    1026:	9e 3f       	cpi	r25, 0xFE	; 254
    1028:	51 05       	cpc	r21, r1
    102a:	70 f0       	brcs	.+28     	; 0x1048 <__mulsf3_pse+0x9c>
    102c:	5c cf       	rjmp	.-328    	; 0xee6 <__fp_inf>
    102e:	a6 cf       	rjmp	.-180    	; 0xf7c <__fp_szero>
    1030:	5f 3f       	cpi	r21, 0xFF	; 255
    1032:	ec f3       	brlt	.-6      	; 0x102e <__mulsf3_pse+0x82>
    1034:	98 3e       	cpi	r25, 0xE8	; 232
    1036:	dc f3       	brlt	.-10     	; 0x102e <__mulsf3_pse+0x82>
    1038:	86 95       	lsr	r24
    103a:	77 95       	ror	r23
    103c:	67 95       	ror	r22
    103e:	b7 95       	ror	r27
    1040:	f7 95       	ror	r31
    1042:	e7 95       	ror	r30
    1044:	9f 5f       	subi	r25, 0xFF	; 255
    1046:	c1 f7       	brne	.-16     	; 0x1038 <__mulsf3_pse+0x8c>
    1048:	fe 2b       	or	r31, r30
    104a:	88 0f       	add	r24, r24
    104c:	91 1d       	adc	r25, r1
    104e:	96 95       	lsr	r25
    1050:	87 95       	ror	r24
    1052:	97 f9       	bld	r25, 7
    1054:	08 95       	ret

00001056 <__udivmodsi4>:
    1056:	a1 e2       	ldi	r26, 0x21	; 33
    1058:	1a 2e       	mov	r1, r26
    105a:	aa 1b       	sub	r26, r26
    105c:	bb 1b       	sub	r27, r27
    105e:	fd 01       	movw	r30, r26
    1060:	0d c0       	rjmp	.+26     	; 0x107c <__udivmodsi4_ep>

00001062 <__udivmodsi4_loop>:
    1062:	aa 1f       	adc	r26, r26
    1064:	bb 1f       	adc	r27, r27
    1066:	ee 1f       	adc	r30, r30
    1068:	ff 1f       	adc	r31, r31
    106a:	a2 17       	cp	r26, r18
    106c:	b3 07       	cpc	r27, r19
    106e:	e4 07       	cpc	r30, r20
    1070:	f5 07       	cpc	r31, r21
    1072:	20 f0       	brcs	.+8      	; 0x107c <__udivmodsi4_ep>
    1074:	a2 1b       	sub	r26, r18
    1076:	b3 0b       	sbc	r27, r19
    1078:	e4 0b       	sbc	r30, r20
    107a:	f5 0b       	sbc	r31, r21

0000107c <__udivmodsi4_ep>:
    107c:	66 1f       	adc	r22, r22
    107e:	77 1f       	adc	r23, r23
    1080:	88 1f       	adc	r24, r24
    1082:	99 1f       	adc	r25, r25
    1084:	1a 94       	dec	r1
    1086:	69 f7       	brne	.-38     	; 0x1062 <__udivmodsi4_loop>
    1088:	60 95       	com	r22
    108a:	70 95       	com	r23
    108c:	80 95       	com	r24
    108e:	90 95       	com	r25
    1090:	9b 01       	movw	r18, r22
    1092:	ac 01       	movw	r20, r24
    1094:	bd 01       	movw	r22, r26
    1096:	cf 01       	movw	r24, r30
    1098:	08 95       	ret

0000109a <strlen>:
    109a:	fc 01       	movw	r30, r24
    109c:	01 90       	ld	r0, Z+
    109e:	00 20       	and	r0, r0
    10a0:	e9 f7       	brne	.-6      	; 0x109c <strlen+0x2>
    10a2:	80 95       	com	r24
    10a4:	90 95       	com	r25
    10a6:	8e 0f       	add	r24, r30
    10a8:	9f 1f       	adc	r25, r31
    10aa:	08 95       	ret

000010ac <sprintf>:
    10ac:	0f 93       	push	r16
    10ae:	1f 93       	push	r17
    10b0:	cf 93       	push	r28
    10b2:	df 93       	push	r29
    10b4:	cd b7       	in	r28, 0x3d	; 61
    10b6:	de b7       	in	r29, 0x3e	; 62
    10b8:	2e 97       	sbiw	r28, 0x0e	; 14
    10ba:	0f b6       	in	r0, 0x3f	; 63
    10bc:	f8 94       	cli
    10be:	de bf       	out	0x3e, r29	; 62
    10c0:	0f be       	out	0x3f, r0	; 63
    10c2:	cd bf       	out	0x3d, r28	; 61
    10c4:	0d 89       	ldd	r16, Y+21	; 0x15
    10c6:	1e 89       	ldd	r17, Y+22	; 0x16
    10c8:	86 e0       	ldi	r24, 0x06	; 6
    10ca:	8c 83       	std	Y+4, r24	; 0x04
    10cc:	1a 83       	std	Y+2, r17	; 0x02
    10ce:	09 83       	std	Y+1, r16	; 0x01
    10d0:	8f ef       	ldi	r24, 0xFF	; 255
    10d2:	9f e7       	ldi	r25, 0x7F	; 127
    10d4:	9e 83       	std	Y+6, r25	; 0x06
    10d6:	8d 83       	std	Y+5, r24	; 0x05
    10d8:	ae 01       	movw	r20, r28
    10da:	47 5e       	subi	r20, 0xE7	; 231
    10dc:	5f 4f       	sbci	r21, 0xFF	; 255
    10de:	6f 89       	ldd	r22, Y+23	; 0x17
    10e0:	78 8d       	ldd	r23, Y+24	; 0x18
    10e2:	ce 01       	movw	r24, r28
    10e4:	01 96       	adiw	r24, 0x01	; 1
    10e6:	10 d0       	rcall	.+32     	; 0x1108 <vfprintf>
    10e8:	ef 81       	ldd	r30, Y+7	; 0x07
    10ea:	f8 85       	ldd	r31, Y+8	; 0x08
    10ec:	e0 0f       	add	r30, r16
    10ee:	f1 1f       	adc	r31, r17
    10f0:	10 82       	st	Z, r1
    10f2:	2e 96       	adiw	r28, 0x0e	; 14
    10f4:	0f b6       	in	r0, 0x3f	; 63
    10f6:	f8 94       	cli
    10f8:	de bf       	out	0x3e, r29	; 62
    10fa:	0f be       	out	0x3f, r0	; 63
    10fc:	cd bf       	out	0x3d, r28	; 61
    10fe:	df 91       	pop	r29
    1100:	cf 91       	pop	r28
    1102:	1f 91       	pop	r17
    1104:	0f 91       	pop	r16
    1106:	08 95       	ret

00001108 <vfprintf>:
    1108:	2f 92       	push	r2
    110a:	3f 92       	push	r3
    110c:	4f 92       	push	r4
    110e:	5f 92       	push	r5
    1110:	6f 92       	push	r6
    1112:	7f 92       	push	r7
    1114:	8f 92       	push	r8
    1116:	9f 92       	push	r9
    1118:	af 92       	push	r10
    111a:	bf 92       	push	r11
    111c:	cf 92       	push	r12
    111e:	df 92       	push	r13
    1120:	ef 92       	push	r14
    1122:	ff 92       	push	r15
    1124:	0f 93       	push	r16
    1126:	1f 93       	push	r17
    1128:	cf 93       	push	r28
    112a:	df 93       	push	r29
    112c:	cd b7       	in	r28, 0x3d	; 61
    112e:	de b7       	in	r29, 0x3e	; 62
    1130:	2b 97       	sbiw	r28, 0x0b	; 11
    1132:	0f b6       	in	r0, 0x3f	; 63
    1134:	f8 94       	cli
    1136:	de bf       	out	0x3e, r29	; 62
    1138:	0f be       	out	0x3f, r0	; 63
    113a:	cd bf       	out	0x3d, r28	; 61
    113c:	6c 01       	movw	r12, r24
    113e:	7b 01       	movw	r14, r22
    1140:	8a 01       	movw	r16, r20
    1142:	fc 01       	movw	r30, r24
    1144:	17 82       	std	Z+7, r1	; 0x07
    1146:	16 82       	std	Z+6, r1	; 0x06
    1148:	83 81       	ldd	r24, Z+3	; 0x03
    114a:	81 ff       	sbrs	r24, 1
    114c:	bf c1       	rjmp	.+894    	; 0x14cc <vfprintf+0x3c4>
    114e:	ce 01       	movw	r24, r28
    1150:	01 96       	adiw	r24, 0x01	; 1
    1152:	3c 01       	movw	r6, r24
    1154:	f6 01       	movw	r30, r12
    1156:	93 81       	ldd	r25, Z+3	; 0x03
    1158:	f7 01       	movw	r30, r14
    115a:	93 fd       	sbrc	r25, 3
    115c:	85 91       	lpm	r24, Z+
    115e:	93 ff       	sbrs	r25, 3
    1160:	81 91       	ld	r24, Z+
    1162:	7f 01       	movw	r14, r30
    1164:	88 23       	and	r24, r24
    1166:	09 f4       	brne	.+2      	; 0x116a <vfprintf+0x62>
    1168:	ad c1       	rjmp	.+858    	; 0x14c4 <vfprintf+0x3bc>
    116a:	85 32       	cpi	r24, 0x25	; 37
    116c:	39 f4       	brne	.+14     	; 0x117c <vfprintf+0x74>
    116e:	93 fd       	sbrc	r25, 3
    1170:	85 91       	lpm	r24, Z+
    1172:	93 ff       	sbrs	r25, 3
    1174:	81 91       	ld	r24, Z+
    1176:	7f 01       	movw	r14, r30
    1178:	85 32       	cpi	r24, 0x25	; 37
    117a:	21 f4       	brne	.+8      	; 0x1184 <vfprintf+0x7c>
    117c:	b6 01       	movw	r22, r12
    117e:	90 e0       	ldi	r25, 0x00	; 0
    1180:	d6 d1       	rcall	.+940    	; 0x152e <fputc>
    1182:	e8 cf       	rjmp	.-48     	; 0x1154 <vfprintf+0x4c>
    1184:	91 2c       	mov	r9, r1
    1186:	21 2c       	mov	r2, r1
    1188:	31 2c       	mov	r3, r1
    118a:	ff e1       	ldi	r31, 0x1F	; 31
    118c:	f3 15       	cp	r31, r3
    118e:	d8 f0       	brcs	.+54     	; 0x11c6 <vfprintf+0xbe>
    1190:	8b 32       	cpi	r24, 0x2B	; 43
    1192:	79 f0       	breq	.+30     	; 0x11b2 <vfprintf+0xaa>
    1194:	38 f4       	brcc	.+14     	; 0x11a4 <vfprintf+0x9c>
    1196:	80 32       	cpi	r24, 0x20	; 32
    1198:	79 f0       	breq	.+30     	; 0x11b8 <vfprintf+0xb0>
    119a:	83 32       	cpi	r24, 0x23	; 35
    119c:	a1 f4       	brne	.+40     	; 0x11c6 <vfprintf+0xbe>
    119e:	23 2d       	mov	r18, r3
    11a0:	20 61       	ori	r18, 0x10	; 16
    11a2:	1d c0       	rjmp	.+58     	; 0x11de <vfprintf+0xd6>
    11a4:	8d 32       	cpi	r24, 0x2D	; 45
    11a6:	61 f0       	breq	.+24     	; 0x11c0 <vfprintf+0xb8>
    11a8:	80 33       	cpi	r24, 0x30	; 48
    11aa:	69 f4       	brne	.+26     	; 0x11c6 <vfprintf+0xbe>
    11ac:	23 2d       	mov	r18, r3
    11ae:	21 60       	ori	r18, 0x01	; 1
    11b0:	16 c0       	rjmp	.+44     	; 0x11de <vfprintf+0xd6>
    11b2:	83 2d       	mov	r24, r3
    11b4:	82 60       	ori	r24, 0x02	; 2
    11b6:	38 2e       	mov	r3, r24
    11b8:	e3 2d       	mov	r30, r3
    11ba:	e4 60       	ori	r30, 0x04	; 4
    11bc:	3e 2e       	mov	r3, r30
    11be:	2a c0       	rjmp	.+84     	; 0x1214 <vfprintf+0x10c>
    11c0:	f3 2d       	mov	r31, r3
    11c2:	f8 60       	ori	r31, 0x08	; 8
    11c4:	1d c0       	rjmp	.+58     	; 0x1200 <vfprintf+0xf8>
    11c6:	37 fc       	sbrc	r3, 7
    11c8:	2d c0       	rjmp	.+90     	; 0x1224 <vfprintf+0x11c>
    11ca:	20 ed       	ldi	r18, 0xD0	; 208
    11cc:	28 0f       	add	r18, r24
    11ce:	2a 30       	cpi	r18, 0x0A	; 10
    11d0:	40 f0       	brcs	.+16     	; 0x11e2 <vfprintf+0xda>
    11d2:	8e 32       	cpi	r24, 0x2E	; 46
    11d4:	b9 f4       	brne	.+46     	; 0x1204 <vfprintf+0xfc>
    11d6:	36 fc       	sbrc	r3, 6
    11d8:	75 c1       	rjmp	.+746    	; 0x14c4 <vfprintf+0x3bc>
    11da:	23 2d       	mov	r18, r3
    11dc:	20 64       	ori	r18, 0x40	; 64
    11de:	32 2e       	mov	r3, r18
    11e0:	19 c0       	rjmp	.+50     	; 0x1214 <vfprintf+0x10c>
    11e2:	36 fe       	sbrs	r3, 6
    11e4:	06 c0       	rjmp	.+12     	; 0x11f2 <vfprintf+0xea>
    11e6:	8a e0       	ldi	r24, 0x0A	; 10
    11e8:	98 9e       	mul	r9, r24
    11ea:	20 0d       	add	r18, r0
    11ec:	11 24       	eor	r1, r1
    11ee:	92 2e       	mov	r9, r18
    11f0:	11 c0       	rjmp	.+34     	; 0x1214 <vfprintf+0x10c>
    11f2:	ea e0       	ldi	r30, 0x0A	; 10
    11f4:	2e 9e       	mul	r2, r30
    11f6:	20 0d       	add	r18, r0
    11f8:	11 24       	eor	r1, r1
    11fa:	22 2e       	mov	r2, r18
    11fc:	f3 2d       	mov	r31, r3
    11fe:	f0 62       	ori	r31, 0x20	; 32
    1200:	3f 2e       	mov	r3, r31
    1202:	08 c0       	rjmp	.+16     	; 0x1214 <vfprintf+0x10c>
    1204:	8c 36       	cpi	r24, 0x6C	; 108
    1206:	21 f4       	brne	.+8      	; 0x1210 <vfprintf+0x108>
    1208:	83 2d       	mov	r24, r3
    120a:	80 68       	ori	r24, 0x80	; 128
    120c:	38 2e       	mov	r3, r24
    120e:	02 c0       	rjmp	.+4      	; 0x1214 <vfprintf+0x10c>
    1210:	88 36       	cpi	r24, 0x68	; 104
    1212:	41 f4       	brne	.+16     	; 0x1224 <vfprintf+0x11c>
    1214:	f7 01       	movw	r30, r14
    1216:	93 fd       	sbrc	r25, 3
    1218:	85 91       	lpm	r24, Z+
    121a:	93 ff       	sbrs	r25, 3
    121c:	81 91       	ld	r24, Z+
    121e:	7f 01       	movw	r14, r30
    1220:	81 11       	cpse	r24, r1
    1222:	b3 cf       	rjmp	.-154    	; 0x118a <vfprintf+0x82>
    1224:	98 2f       	mov	r25, r24
    1226:	9f 7d       	andi	r25, 0xDF	; 223
    1228:	95 54       	subi	r25, 0x45	; 69
    122a:	93 30       	cpi	r25, 0x03	; 3
    122c:	28 f4       	brcc	.+10     	; 0x1238 <vfprintf+0x130>
    122e:	0c 5f       	subi	r16, 0xFC	; 252
    1230:	1f 4f       	sbci	r17, 0xFF	; 255
    1232:	9f e3       	ldi	r25, 0x3F	; 63
    1234:	99 83       	std	Y+1, r25	; 0x01
    1236:	0d c0       	rjmp	.+26     	; 0x1252 <vfprintf+0x14a>
    1238:	83 36       	cpi	r24, 0x63	; 99
    123a:	31 f0       	breq	.+12     	; 0x1248 <vfprintf+0x140>
    123c:	83 37       	cpi	r24, 0x73	; 115
    123e:	71 f0       	breq	.+28     	; 0x125c <vfprintf+0x154>
    1240:	83 35       	cpi	r24, 0x53	; 83
    1242:	09 f0       	breq	.+2      	; 0x1246 <vfprintf+0x13e>
    1244:	55 c0       	rjmp	.+170    	; 0x12f0 <vfprintf+0x1e8>
    1246:	20 c0       	rjmp	.+64     	; 0x1288 <vfprintf+0x180>
    1248:	f8 01       	movw	r30, r16
    124a:	80 81       	ld	r24, Z
    124c:	89 83       	std	Y+1, r24	; 0x01
    124e:	0e 5f       	subi	r16, 0xFE	; 254
    1250:	1f 4f       	sbci	r17, 0xFF	; 255
    1252:	88 24       	eor	r8, r8
    1254:	83 94       	inc	r8
    1256:	91 2c       	mov	r9, r1
    1258:	53 01       	movw	r10, r6
    125a:	12 c0       	rjmp	.+36     	; 0x1280 <vfprintf+0x178>
    125c:	28 01       	movw	r4, r16
    125e:	f2 e0       	ldi	r31, 0x02	; 2
    1260:	4f 0e       	add	r4, r31
    1262:	51 1c       	adc	r5, r1
    1264:	f8 01       	movw	r30, r16
    1266:	a0 80       	ld	r10, Z
    1268:	b1 80       	ldd	r11, Z+1	; 0x01
    126a:	36 fe       	sbrs	r3, 6
    126c:	03 c0       	rjmp	.+6      	; 0x1274 <vfprintf+0x16c>
    126e:	69 2d       	mov	r22, r9
    1270:	70 e0       	ldi	r23, 0x00	; 0
    1272:	02 c0       	rjmp	.+4      	; 0x1278 <vfprintf+0x170>
    1274:	6f ef       	ldi	r22, 0xFF	; 255
    1276:	7f ef       	ldi	r23, 0xFF	; 255
    1278:	c5 01       	movw	r24, r10
    127a:	4e d1       	rcall	.+668    	; 0x1518 <strnlen>
    127c:	4c 01       	movw	r8, r24
    127e:	82 01       	movw	r16, r4
    1280:	f3 2d       	mov	r31, r3
    1282:	ff 77       	andi	r31, 0x7F	; 127
    1284:	3f 2e       	mov	r3, r31
    1286:	15 c0       	rjmp	.+42     	; 0x12b2 <vfprintf+0x1aa>
    1288:	28 01       	movw	r4, r16
    128a:	22 e0       	ldi	r18, 0x02	; 2
    128c:	42 0e       	add	r4, r18
    128e:	51 1c       	adc	r5, r1
    1290:	f8 01       	movw	r30, r16
    1292:	a0 80       	ld	r10, Z
    1294:	b1 80       	ldd	r11, Z+1	; 0x01
    1296:	36 fe       	sbrs	r3, 6
    1298:	03 c0       	rjmp	.+6      	; 0x12a0 <vfprintf+0x198>
    129a:	69 2d       	mov	r22, r9
    129c:	70 e0       	ldi	r23, 0x00	; 0
    129e:	02 c0       	rjmp	.+4      	; 0x12a4 <vfprintf+0x19c>
    12a0:	6f ef       	ldi	r22, 0xFF	; 255
    12a2:	7f ef       	ldi	r23, 0xFF	; 255
    12a4:	c5 01       	movw	r24, r10
    12a6:	2d d1       	rcall	.+602    	; 0x1502 <strnlen_P>
    12a8:	4c 01       	movw	r8, r24
    12aa:	f3 2d       	mov	r31, r3
    12ac:	f0 68       	ori	r31, 0x80	; 128
    12ae:	3f 2e       	mov	r3, r31
    12b0:	82 01       	movw	r16, r4
    12b2:	33 fc       	sbrc	r3, 3
    12b4:	19 c0       	rjmp	.+50     	; 0x12e8 <vfprintf+0x1e0>
    12b6:	82 2d       	mov	r24, r2
    12b8:	90 e0       	ldi	r25, 0x00	; 0
    12ba:	88 16       	cp	r8, r24
    12bc:	99 06       	cpc	r9, r25
    12be:	a0 f4       	brcc	.+40     	; 0x12e8 <vfprintf+0x1e0>
    12c0:	b6 01       	movw	r22, r12
    12c2:	80 e2       	ldi	r24, 0x20	; 32
    12c4:	90 e0       	ldi	r25, 0x00	; 0
    12c6:	33 d1       	rcall	.+614    	; 0x152e <fputc>
    12c8:	2a 94       	dec	r2
    12ca:	f5 cf       	rjmp	.-22     	; 0x12b6 <vfprintf+0x1ae>
    12cc:	f5 01       	movw	r30, r10
    12ce:	37 fc       	sbrc	r3, 7
    12d0:	85 91       	lpm	r24, Z+
    12d2:	37 fe       	sbrs	r3, 7
    12d4:	81 91       	ld	r24, Z+
    12d6:	5f 01       	movw	r10, r30
    12d8:	b6 01       	movw	r22, r12
    12da:	90 e0       	ldi	r25, 0x00	; 0
    12dc:	28 d1       	rcall	.+592    	; 0x152e <fputc>
    12de:	21 10       	cpse	r2, r1
    12e0:	2a 94       	dec	r2
    12e2:	21 e0       	ldi	r18, 0x01	; 1
    12e4:	82 1a       	sub	r8, r18
    12e6:	91 08       	sbc	r9, r1
    12e8:	81 14       	cp	r8, r1
    12ea:	91 04       	cpc	r9, r1
    12ec:	79 f7       	brne	.-34     	; 0x12cc <vfprintf+0x1c4>
    12ee:	e1 c0       	rjmp	.+450    	; 0x14b2 <vfprintf+0x3aa>
    12f0:	84 36       	cpi	r24, 0x64	; 100
    12f2:	11 f0       	breq	.+4      	; 0x12f8 <vfprintf+0x1f0>
    12f4:	89 36       	cpi	r24, 0x69	; 105
    12f6:	39 f5       	brne	.+78     	; 0x1346 <vfprintf+0x23e>
    12f8:	f8 01       	movw	r30, r16
    12fa:	37 fe       	sbrs	r3, 7
    12fc:	07 c0       	rjmp	.+14     	; 0x130c <vfprintf+0x204>
    12fe:	60 81       	ld	r22, Z
    1300:	71 81       	ldd	r23, Z+1	; 0x01
    1302:	82 81       	ldd	r24, Z+2	; 0x02
    1304:	93 81       	ldd	r25, Z+3	; 0x03
    1306:	0c 5f       	subi	r16, 0xFC	; 252
    1308:	1f 4f       	sbci	r17, 0xFF	; 255
    130a:	08 c0       	rjmp	.+16     	; 0x131c <vfprintf+0x214>
    130c:	60 81       	ld	r22, Z
    130e:	71 81       	ldd	r23, Z+1	; 0x01
    1310:	07 2e       	mov	r0, r23
    1312:	00 0c       	add	r0, r0
    1314:	88 0b       	sbc	r24, r24
    1316:	99 0b       	sbc	r25, r25
    1318:	0e 5f       	subi	r16, 0xFE	; 254
    131a:	1f 4f       	sbci	r17, 0xFF	; 255
    131c:	f3 2d       	mov	r31, r3
    131e:	ff 76       	andi	r31, 0x6F	; 111
    1320:	3f 2e       	mov	r3, r31
    1322:	97 ff       	sbrs	r25, 7
    1324:	09 c0       	rjmp	.+18     	; 0x1338 <vfprintf+0x230>
    1326:	90 95       	com	r25
    1328:	80 95       	com	r24
    132a:	70 95       	com	r23
    132c:	61 95       	neg	r22
    132e:	7f 4f       	sbci	r23, 0xFF	; 255
    1330:	8f 4f       	sbci	r24, 0xFF	; 255
    1332:	9f 4f       	sbci	r25, 0xFF	; 255
    1334:	f0 68       	ori	r31, 0x80	; 128
    1336:	3f 2e       	mov	r3, r31
    1338:	2a e0       	ldi	r18, 0x0A	; 10
    133a:	30 e0       	ldi	r19, 0x00	; 0
    133c:	a3 01       	movw	r20, r6
    133e:	33 d1       	rcall	.+614    	; 0x15a6 <__ultoa_invert>
    1340:	88 2e       	mov	r8, r24
    1342:	86 18       	sub	r8, r6
    1344:	44 c0       	rjmp	.+136    	; 0x13ce <vfprintf+0x2c6>
    1346:	85 37       	cpi	r24, 0x75	; 117
    1348:	31 f4       	brne	.+12     	; 0x1356 <vfprintf+0x24e>
    134a:	23 2d       	mov	r18, r3
    134c:	2f 7e       	andi	r18, 0xEF	; 239
    134e:	b2 2e       	mov	r11, r18
    1350:	2a e0       	ldi	r18, 0x0A	; 10
    1352:	30 e0       	ldi	r19, 0x00	; 0
    1354:	25 c0       	rjmp	.+74     	; 0x13a0 <vfprintf+0x298>
    1356:	93 2d       	mov	r25, r3
    1358:	99 7f       	andi	r25, 0xF9	; 249
    135a:	b9 2e       	mov	r11, r25
    135c:	8f 36       	cpi	r24, 0x6F	; 111
    135e:	c1 f0       	breq	.+48     	; 0x1390 <vfprintf+0x288>
    1360:	18 f4       	brcc	.+6      	; 0x1368 <vfprintf+0x260>
    1362:	88 35       	cpi	r24, 0x58	; 88
    1364:	79 f0       	breq	.+30     	; 0x1384 <vfprintf+0x27c>
    1366:	ae c0       	rjmp	.+348    	; 0x14c4 <vfprintf+0x3bc>
    1368:	80 37       	cpi	r24, 0x70	; 112
    136a:	19 f0       	breq	.+6      	; 0x1372 <vfprintf+0x26a>
    136c:	88 37       	cpi	r24, 0x78	; 120
    136e:	21 f0       	breq	.+8      	; 0x1378 <vfprintf+0x270>
    1370:	a9 c0       	rjmp	.+338    	; 0x14c4 <vfprintf+0x3bc>
    1372:	e9 2f       	mov	r30, r25
    1374:	e0 61       	ori	r30, 0x10	; 16
    1376:	be 2e       	mov	r11, r30
    1378:	b4 fe       	sbrs	r11, 4
    137a:	0d c0       	rjmp	.+26     	; 0x1396 <vfprintf+0x28e>
    137c:	fb 2d       	mov	r31, r11
    137e:	f4 60       	ori	r31, 0x04	; 4
    1380:	bf 2e       	mov	r11, r31
    1382:	09 c0       	rjmp	.+18     	; 0x1396 <vfprintf+0x28e>
    1384:	34 fe       	sbrs	r3, 4
    1386:	0a c0       	rjmp	.+20     	; 0x139c <vfprintf+0x294>
    1388:	29 2f       	mov	r18, r25
    138a:	26 60       	ori	r18, 0x06	; 6
    138c:	b2 2e       	mov	r11, r18
    138e:	06 c0       	rjmp	.+12     	; 0x139c <vfprintf+0x294>
    1390:	28 e0       	ldi	r18, 0x08	; 8
    1392:	30 e0       	ldi	r19, 0x00	; 0
    1394:	05 c0       	rjmp	.+10     	; 0x13a0 <vfprintf+0x298>
    1396:	20 e1       	ldi	r18, 0x10	; 16
    1398:	30 e0       	ldi	r19, 0x00	; 0
    139a:	02 c0       	rjmp	.+4      	; 0x13a0 <vfprintf+0x298>
    139c:	20 e1       	ldi	r18, 0x10	; 16
    139e:	32 e0       	ldi	r19, 0x02	; 2
    13a0:	f8 01       	movw	r30, r16
    13a2:	b7 fe       	sbrs	r11, 7
    13a4:	07 c0       	rjmp	.+14     	; 0x13b4 <vfprintf+0x2ac>
    13a6:	60 81       	ld	r22, Z
    13a8:	71 81       	ldd	r23, Z+1	; 0x01
    13aa:	82 81       	ldd	r24, Z+2	; 0x02
    13ac:	93 81       	ldd	r25, Z+3	; 0x03
    13ae:	0c 5f       	subi	r16, 0xFC	; 252
    13b0:	1f 4f       	sbci	r17, 0xFF	; 255
    13b2:	06 c0       	rjmp	.+12     	; 0x13c0 <vfprintf+0x2b8>
    13b4:	60 81       	ld	r22, Z
    13b6:	71 81       	ldd	r23, Z+1	; 0x01
    13b8:	80 e0       	ldi	r24, 0x00	; 0
    13ba:	90 e0       	ldi	r25, 0x00	; 0
    13bc:	0e 5f       	subi	r16, 0xFE	; 254
    13be:	1f 4f       	sbci	r17, 0xFF	; 255
    13c0:	a3 01       	movw	r20, r6
    13c2:	f1 d0       	rcall	.+482    	; 0x15a6 <__ultoa_invert>
    13c4:	88 2e       	mov	r8, r24
    13c6:	86 18       	sub	r8, r6
    13c8:	fb 2d       	mov	r31, r11
    13ca:	ff 77       	andi	r31, 0x7F	; 127
    13cc:	3f 2e       	mov	r3, r31
    13ce:	36 fe       	sbrs	r3, 6
    13d0:	0d c0       	rjmp	.+26     	; 0x13ec <vfprintf+0x2e4>
    13d2:	23 2d       	mov	r18, r3
    13d4:	2e 7f       	andi	r18, 0xFE	; 254
    13d6:	a2 2e       	mov	r10, r18
    13d8:	89 14       	cp	r8, r9
    13da:	58 f4       	brcc	.+22     	; 0x13f2 <vfprintf+0x2ea>
    13dc:	34 fe       	sbrs	r3, 4
    13de:	0b c0       	rjmp	.+22     	; 0x13f6 <vfprintf+0x2ee>
    13e0:	32 fc       	sbrc	r3, 2
    13e2:	09 c0       	rjmp	.+18     	; 0x13f6 <vfprintf+0x2ee>
    13e4:	83 2d       	mov	r24, r3
    13e6:	8e 7e       	andi	r24, 0xEE	; 238
    13e8:	a8 2e       	mov	r10, r24
    13ea:	05 c0       	rjmp	.+10     	; 0x13f6 <vfprintf+0x2ee>
    13ec:	b8 2c       	mov	r11, r8
    13ee:	a3 2c       	mov	r10, r3
    13f0:	03 c0       	rjmp	.+6      	; 0x13f8 <vfprintf+0x2f0>
    13f2:	b8 2c       	mov	r11, r8
    13f4:	01 c0       	rjmp	.+2      	; 0x13f8 <vfprintf+0x2f0>
    13f6:	b9 2c       	mov	r11, r9
    13f8:	a4 fe       	sbrs	r10, 4
    13fa:	0f c0       	rjmp	.+30     	; 0x141a <vfprintf+0x312>
    13fc:	fe 01       	movw	r30, r28
    13fe:	e8 0d       	add	r30, r8
    1400:	f1 1d       	adc	r31, r1
    1402:	80 81       	ld	r24, Z
    1404:	80 33       	cpi	r24, 0x30	; 48
    1406:	21 f4       	brne	.+8      	; 0x1410 <vfprintf+0x308>
    1408:	9a 2d       	mov	r25, r10
    140a:	99 7e       	andi	r25, 0xE9	; 233
    140c:	a9 2e       	mov	r10, r25
    140e:	09 c0       	rjmp	.+18     	; 0x1422 <vfprintf+0x31a>
    1410:	a2 fe       	sbrs	r10, 2
    1412:	06 c0       	rjmp	.+12     	; 0x1420 <vfprintf+0x318>
    1414:	b3 94       	inc	r11
    1416:	b3 94       	inc	r11
    1418:	04 c0       	rjmp	.+8      	; 0x1422 <vfprintf+0x31a>
    141a:	8a 2d       	mov	r24, r10
    141c:	86 78       	andi	r24, 0x86	; 134
    141e:	09 f0       	breq	.+2      	; 0x1422 <vfprintf+0x31a>
    1420:	b3 94       	inc	r11
    1422:	a3 fc       	sbrc	r10, 3
    1424:	10 c0       	rjmp	.+32     	; 0x1446 <vfprintf+0x33e>
    1426:	a0 fe       	sbrs	r10, 0
    1428:	06 c0       	rjmp	.+12     	; 0x1436 <vfprintf+0x32e>
    142a:	b2 14       	cp	r11, r2
    142c:	80 f4       	brcc	.+32     	; 0x144e <vfprintf+0x346>
    142e:	28 0c       	add	r2, r8
    1430:	92 2c       	mov	r9, r2
    1432:	9b 18       	sub	r9, r11
    1434:	0d c0       	rjmp	.+26     	; 0x1450 <vfprintf+0x348>
    1436:	b2 14       	cp	r11, r2
    1438:	58 f4       	brcc	.+22     	; 0x1450 <vfprintf+0x348>
    143a:	b6 01       	movw	r22, r12
    143c:	80 e2       	ldi	r24, 0x20	; 32
    143e:	90 e0       	ldi	r25, 0x00	; 0
    1440:	76 d0       	rcall	.+236    	; 0x152e <fputc>
    1442:	b3 94       	inc	r11
    1444:	f8 cf       	rjmp	.-16     	; 0x1436 <vfprintf+0x32e>
    1446:	b2 14       	cp	r11, r2
    1448:	18 f4       	brcc	.+6      	; 0x1450 <vfprintf+0x348>
    144a:	2b 18       	sub	r2, r11
    144c:	02 c0       	rjmp	.+4      	; 0x1452 <vfprintf+0x34a>
    144e:	98 2c       	mov	r9, r8
    1450:	21 2c       	mov	r2, r1
    1452:	a4 fe       	sbrs	r10, 4
    1454:	0f c0       	rjmp	.+30     	; 0x1474 <vfprintf+0x36c>
    1456:	b6 01       	movw	r22, r12
    1458:	80 e3       	ldi	r24, 0x30	; 48
    145a:	90 e0       	ldi	r25, 0x00	; 0
    145c:	68 d0       	rcall	.+208    	; 0x152e <fputc>
    145e:	a2 fe       	sbrs	r10, 2
    1460:	16 c0       	rjmp	.+44     	; 0x148e <vfprintf+0x386>
    1462:	a1 fc       	sbrc	r10, 1
    1464:	03 c0       	rjmp	.+6      	; 0x146c <vfprintf+0x364>
    1466:	88 e7       	ldi	r24, 0x78	; 120
    1468:	90 e0       	ldi	r25, 0x00	; 0
    146a:	02 c0       	rjmp	.+4      	; 0x1470 <vfprintf+0x368>
    146c:	88 e5       	ldi	r24, 0x58	; 88
    146e:	90 e0       	ldi	r25, 0x00	; 0
    1470:	b6 01       	movw	r22, r12
    1472:	0c c0       	rjmp	.+24     	; 0x148c <vfprintf+0x384>
    1474:	8a 2d       	mov	r24, r10
    1476:	86 78       	andi	r24, 0x86	; 134
    1478:	51 f0       	breq	.+20     	; 0x148e <vfprintf+0x386>
    147a:	a1 fe       	sbrs	r10, 1
    147c:	02 c0       	rjmp	.+4      	; 0x1482 <vfprintf+0x37a>
    147e:	8b e2       	ldi	r24, 0x2B	; 43
    1480:	01 c0       	rjmp	.+2      	; 0x1484 <vfprintf+0x37c>
    1482:	80 e2       	ldi	r24, 0x20	; 32
    1484:	a7 fc       	sbrc	r10, 7
    1486:	8d e2       	ldi	r24, 0x2D	; 45
    1488:	b6 01       	movw	r22, r12
    148a:	90 e0       	ldi	r25, 0x00	; 0
    148c:	50 d0       	rcall	.+160    	; 0x152e <fputc>
    148e:	89 14       	cp	r8, r9
    1490:	30 f4       	brcc	.+12     	; 0x149e <vfprintf+0x396>
    1492:	b6 01       	movw	r22, r12
    1494:	80 e3       	ldi	r24, 0x30	; 48
    1496:	90 e0       	ldi	r25, 0x00	; 0
    1498:	4a d0       	rcall	.+148    	; 0x152e <fputc>
    149a:	9a 94       	dec	r9
    149c:	f8 cf       	rjmp	.-16     	; 0x148e <vfprintf+0x386>
    149e:	8a 94       	dec	r8
    14a0:	f3 01       	movw	r30, r6
    14a2:	e8 0d       	add	r30, r8
    14a4:	f1 1d       	adc	r31, r1
    14a6:	80 81       	ld	r24, Z
    14a8:	b6 01       	movw	r22, r12
    14aa:	90 e0       	ldi	r25, 0x00	; 0
    14ac:	40 d0       	rcall	.+128    	; 0x152e <fputc>
    14ae:	81 10       	cpse	r8, r1
    14b0:	f6 cf       	rjmp	.-20     	; 0x149e <vfprintf+0x396>
    14b2:	22 20       	and	r2, r2
    14b4:	09 f4       	brne	.+2      	; 0x14b8 <vfprintf+0x3b0>
    14b6:	4e ce       	rjmp	.-868    	; 0x1154 <vfprintf+0x4c>
    14b8:	b6 01       	movw	r22, r12
    14ba:	80 e2       	ldi	r24, 0x20	; 32
    14bc:	90 e0       	ldi	r25, 0x00	; 0
    14be:	37 d0       	rcall	.+110    	; 0x152e <fputc>
    14c0:	2a 94       	dec	r2
    14c2:	f7 cf       	rjmp	.-18     	; 0x14b2 <vfprintf+0x3aa>
    14c4:	f6 01       	movw	r30, r12
    14c6:	86 81       	ldd	r24, Z+6	; 0x06
    14c8:	97 81       	ldd	r25, Z+7	; 0x07
    14ca:	02 c0       	rjmp	.+4      	; 0x14d0 <vfprintf+0x3c8>
    14cc:	8f ef       	ldi	r24, 0xFF	; 255
    14ce:	9f ef       	ldi	r25, 0xFF	; 255
    14d0:	2b 96       	adiw	r28, 0x0b	; 11
    14d2:	0f b6       	in	r0, 0x3f	; 63
    14d4:	f8 94       	cli
    14d6:	de bf       	out	0x3e, r29	; 62
    14d8:	0f be       	out	0x3f, r0	; 63
    14da:	cd bf       	out	0x3d, r28	; 61
    14dc:	df 91       	pop	r29
    14de:	cf 91       	pop	r28
    14e0:	1f 91       	pop	r17
    14e2:	0f 91       	pop	r16
    14e4:	ff 90       	pop	r15
    14e6:	ef 90       	pop	r14
    14e8:	df 90       	pop	r13
    14ea:	cf 90       	pop	r12
    14ec:	bf 90       	pop	r11
    14ee:	af 90       	pop	r10
    14f0:	9f 90       	pop	r9
    14f2:	8f 90       	pop	r8
    14f4:	7f 90       	pop	r7
    14f6:	6f 90       	pop	r6
    14f8:	5f 90       	pop	r5
    14fa:	4f 90       	pop	r4
    14fc:	3f 90       	pop	r3
    14fe:	2f 90       	pop	r2
    1500:	08 95       	ret

00001502 <strnlen_P>:
    1502:	fc 01       	movw	r30, r24
    1504:	05 90       	lpm	r0, Z+
    1506:	61 50       	subi	r22, 0x01	; 1
    1508:	70 40       	sbci	r23, 0x00	; 0
    150a:	01 10       	cpse	r0, r1
    150c:	d8 f7       	brcc	.-10     	; 0x1504 <strnlen_P+0x2>
    150e:	80 95       	com	r24
    1510:	90 95       	com	r25
    1512:	8e 0f       	add	r24, r30
    1514:	9f 1f       	adc	r25, r31
    1516:	08 95       	ret

00001518 <strnlen>:
    1518:	fc 01       	movw	r30, r24
    151a:	61 50       	subi	r22, 0x01	; 1
    151c:	70 40       	sbci	r23, 0x00	; 0
    151e:	01 90       	ld	r0, Z+
    1520:	01 10       	cpse	r0, r1
    1522:	d8 f7       	brcc	.-10     	; 0x151a <strnlen+0x2>
    1524:	80 95       	com	r24
    1526:	90 95       	com	r25
    1528:	8e 0f       	add	r24, r30
    152a:	9f 1f       	adc	r25, r31
    152c:	08 95       	ret

0000152e <fputc>:
    152e:	0f 93       	push	r16
    1530:	1f 93       	push	r17
    1532:	cf 93       	push	r28
    1534:	df 93       	push	r29
    1536:	fb 01       	movw	r30, r22
    1538:	23 81       	ldd	r18, Z+3	; 0x03
    153a:	21 fd       	sbrc	r18, 1
    153c:	03 c0       	rjmp	.+6      	; 0x1544 <fputc+0x16>
    153e:	8f ef       	ldi	r24, 0xFF	; 255
    1540:	9f ef       	ldi	r25, 0xFF	; 255
    1542:	2c c0       	rjmp	.+88     	; 0x159c <fputc+0x6e>
    1544:	22 ff       	sbrs	r18, 2
    1546:	16 c0       	rjmp	.+44     	; 0x1574 <fputc+0x46>
    1548:	46 81       	ldd	r20, Z+6	; 0x06
    154a:	57 81       	ldd	r21, Z+7	; 0x07
    154c:	24 81       	ldd	r18, Z+4	; 0x04
    154e:	35 81       	ldd	r19, Z+5	; 0x05
    1550:	42 17       	cp	r20, r18
    1552:	53 07       	cpc	r21, r19
    1554:	44 f4       	brge	.+16     	; 0x1566 <fputc+0x38>
    1556:	a0 81       	ld	r26, Z
    1558:	b1 81       	ldd	r27, Z+1	; 0x01
    155a:	9d 01       	movw	r18, r26
    155c:	2f 5f       	subi	r18, 0xFF	; 255
    155e:	3f 4f       	sbci	r19, 0xFF	; 255
    1560:	31 83       	std	Z+1, r19	; 0x01
    1562:	20 83       	st	Z, r18
    1564:	8c 93       	st	X, r24
    1566:	26 81       	ldd	r18, Z+6	; 0x06
    1568:	37 81       	ldd	r19, Z+7	; 0x07
    156a:	2f 5f       	subi	r18, 0xFF	; 255
    156c:	3f 4f       	sbci	r19, 0xFF	; 255
    156e:	37 83       	std	Z+7, r19	; 0x07
    1570:	26 83       	std	Z+6, r18	; 0x06
    1572:	14 c0       	rjmp	.+40     	; 0x159c <fputc+0x6e>
    1574:	8b 01       	movw	r16, r22
    1576:	ec 01       	movw	r28, r24
    1578:	fb 01       	movw	r30, r22
    157a:	00 84       	ldd	r0, Z+8	; 0x08
    157c:	f1 85       	ldd	r31, Z+9	; 0x09
    157e:	e0 2d       	mov	r30, r0
    1580:	09 95       	icall
    1582:	89 2b       	or	r24, r25
    1584:	e1 f6       	brne	.-72     	; 0x153e <fputc+0x10>
    1586:	d8 01       	movw	r26, r16
    1588:	16 96       	adiw	r26, 0x06	; 6
    158a:	8d 91       	ld	r24, X+
    158c:	9c 91       	ld	r25, X
    158e:	17 97       	sbiw	r26, 0x07	; 7
    1590:	01 96       	adiw	r24, 0x01	; 1
    1592:	17 96       	adiw	r26, 0x07	; 7
    1594:	9c 93       	st	X, r25
    1596:	8e 93       	st	-X, r24
    1598:	16 97       	sbiw	r26, 0x06	; 6
    159a:	ce 01       	movw	r24, r28
    159c:	df 91       	pop	r29
    159e:	cf 91       	pop	r28
    15a0:	1f 91       	pop	r17
    15a2:	0f 91       	pop	r16
    15a4:	08 95       	ret

000015a6 <__ultoa_invert>:
    15a6:	fa 01       	movw	r30, r20
    15a8:	aa 27       	eor	r26, r26
    15aa:	28 30       	cpi	r18, 0x08	; 8
    15ac:	51 f1       	breq	.+84     	; 0x1602 <__ultoa_invert+0x5c>
    15ae:	20 31       	cpi	r18, 0x10	; 16
    15b0:	81 f1       	breq	.+96     	; 0x1612 <__ultoa_invert+0x6c>
    15b2:	e8 94       	clt
    15b4:	6f 93       	push	r22
    15b6:	6e 7f       	andi	r22, 0xFE	; 254
    15b8:	6e 5f       	subi	r22, 0xFE	; 254
    15ba:	7f 4f       	sbci	r23, 0xFF	; 255
    15bc:	8f 4f       	sbci	r24, 0xFF	; 255
    15be:	9f 4f       	sbci	r25, 0xFF	; 255
    15c0:	af 4f       	sbci	r26, 0xFF	; 255
    15c2:	b1 e0       	ldi	r27, 0x01	; 1
    15c4:	3e d0       	rcall	.+124    	; 0x1642 <__ultoa_invert+0x9c>
    15c6:	b4 e0       	ldi	r27, 0x04	; 4
    15c8:	3c d0       	rcall	.+120    	; 0x1642 <__ultoa_invert+0x9c>
    15ca:	67 0f       	add	r22, r23
    15cc:	78 1f       	adc	r23, r24
    15ce:	89 1f       	adc	r24, r25
    15d0:	9a 1f       	adc	r25, r26
    15d2:	a1 1d       	adc	r26, r1
    15d4:	68 0f       	add	r22, r24
    15d6:	79 1f       	adc	r23, r25
    15d8:	8a 1f       	adc	r24, r26
    15da:	91 1d       	adc	r25, r1
    15dc:	a1 1d       	adc	r26, r1
    15de:	6a 0f       	add	r22, r26
    15e0:	71 1d       	adc	r23, r1
    15e2:	81 1d       	adc	r24, r1
    15e4:	91 1d       	adc	r25, r1
    15e6:	a1 1d       	adc	r26, r1
    15e8:	20 d0       	rcall	.+64     	; 0x162a <__ultoa_invert+0x84>
    15ea:	09 f4       	brne	.+2      	; 0x15ee <__ultoa_invert+0x48>
    15ec:	68 94       	set
    15ee:	3f 91       	pop	r19
    15f0:	2a e0       	ldi	r18, 0x0A	; 10
    15f2:	26 9f       	mul	r18, r22
    15f4:	11 24       	eor	r1, r1
    15f6:	30 19       	sub	r19, r0
    15f8:	30 5d       	subi	r19, 0xD0	; 208
    15fa:	31 93       	st	Z+, r19
    15fc:	de f6       	brtc	.-74     	; 0x15b4 <__ultoa_invert+0xe>
    15fe:	cf 01       	movw	r24, r30
    1600:	08 95       	ret
    1602:	46 2f       	mov	r20, r22
    1604:	47 70       	andi	r20, 0x07	; 7
    1606:	40 5d       	subi	r20, 0xD0	; 208
    1608:	41 93       	st	Z+, r20
    160a:	b3 e0       	ldi	r27, 0x03	; 3
    160c:	0f d0       	rcall	.+30     	; 0x162c <__ultoa_invert+0x86>
    160e:	c9 f7       	brne	.-14     	; 0x1602 <__ultoa_invert+0x5c>
    1610:	f6 cf       	rjmp	.-20     	; 0x15fe <__ultoa_invert+0x58>
    1612:	46 2f       	mov	r20, r22
    1614:	4f 70       	andi	r20, 0x0F	; 15
    1616:	40 5d       	subi	r20, 0xD0	; 208
    1618:	4a 33       	cpi	r20, 0x3A	; 58
    161a:	18 f0       	brcs	.+6      	; 0x1622 <__ultoa_invert+0x7c>
    161c:	49 5d       	subi	r20, 0xD9	; 217
    161e:	31 fd       	sbrc	r19, 1
    1620:	40 52       	subi	r20, 0x20	; 32
    1622:	41 93       	st	Z+, r20
    1624:	02 d0       	rcall	.+4      	; 0x162a <__ultoa_invert+0x84>
    1626:	a9 f7       	brne	.-22     	; 0x1612 <__ultoa_invert+0x6c>
    1628:	ea cf       	rjmp	.-44     	; 0x15fe <__ultoa_invert+0x58>
    162a:	b4 e0       	ldi	r27, 0x04	; 4
    162c:	a6 95       	lsr	r26
    162e:	97 95       	ror	r25
    1630:	87 95       	ror	r24
    1632:	77 95       	ror	r23
    1634:	67 95       	ror	r22
    1636:	ba 95       	dec	r27
    1638:	c9 f7       	brne	.-14     	; 0x162c <__ultoa_invert+0x86>
    163a:	00 97       	sbiw	r24, 0x00	; 0
    163c:	61 05       	cpc	r22, r1
    163e:	71 05       	cpc	r23, r1
    1640:	08 95       	ret
    1642:	9b 01       	movw	r18, r22
    1644:	ac 01       	movw	r20, r24
    1646:	0a 2e       	mov	r0, r26
    1648:	06 94       	lsr	r0
    164a:	57 95       	ror	r21
    164c:	47 95       	ror	r20
    164e:	37 95       	ror	r19
    1650:	27 95       	ror	r18
    1652:	ba 95       	dec	r27
    1654:	c9 f7       	brne	.-14     	; 0x1648 <__ultoa_invert+0xa2>
    1656:	62 0f       	add	r22, r18
    1658:	73 1f       	adc	r23, r19
    165a:	84 1f       	adc	r24, r20
    165c:	95 1f       	adc	r25, r21
    165e:	a0 1d       	adc	r26, r0
    1660:	08 95       	ret

00001662 <_exit>:
    1662:	f8 94       	cli

00001664 <__stop_program>:
    1664:	ff cf       	rjmp	.-2      	; 0x1664 <__stop_program>
