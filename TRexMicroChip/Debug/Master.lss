
Master.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000026  00800100  00000f7a  0000100e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000f7a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000011  00800126  00800126  00001034  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00001034  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001064  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000f0  00000000  00000000  000010a4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000104d  00000000  00000000  00001194  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000951  00000000  00000000  000021e1  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000bbd  00000000  00000000  00002b32  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000003cc  00000000  00000000  000036f0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000696  00000000  00000000  00003abc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000819  00000000  00000000  00004152  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000e0  00000000  00000000  0000496b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	8a c0       	rjmp	.+276    	; 0x116 <__ctors_end>
   2:	00 00       	nop
   4:	a5 c0       	rjmp	.+330    	; 0x150 <__bad_interrupt>
   6:	00 00       	nop
   8:	a3 c0       	rjmp	.+326    	; 0x150 <__bad_interrupt>
   a:	00 00       	nop
   c:	a1 c0       	rjmp	.+322    	; 0x150 <__bad_interrupt>
   e:	00 00       	nop
  10:	9f c0       	rjmp	.+318    	; 0x150 <__bad_interrupt>
  12:	00 00       	nop
  14:	9d c0       	rjmp	.+314    	; 0x150 <__bad_interrupt>
  16:	00 00       	nop
  18:	9b c0       	rjmp	.+310    	; 0x150 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	99 c0       	rjmp	.+306    	; 0x150 <__bad_interrupt>
  1e:	00 00       	nop
  20:	97 c0       	rjmp	.+302    	; 0x150 <__bad_interrupt>
  22:	00 00       	nop
  24:	95 c0       	rjmp	.+298    	; 0x150 <__bad_interrupt>
  26:	00 00       	nop
  28:	93 c0       	rjmp	.+294    	; 0x150 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	91 c0       	rjmp	.+290    	; 0x150 <__bad_interrupt>
  2e:	00 00       	nop
  30:	8f c0       	rjmp	.+286    	; 0x150 <__bad_interrupt>
  32:	00 00       	nop
  34:	fe c0       	rjmp	.+508    	; 0x232 <__vector_13>
  36:	00 00       	nop
  38:	8b c0       	rjmp	.+278    	; 0x150 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	89 c0       	rjmp	.+274    	; 0x150 <__bad_interrupt>
  3e:	00 00       	nop
  40:	87 c0       	rjmp	.+270    	; 0x150 <__bad_interrupt>
  42:	00 00       	nop
  44:	85 c0       	rjmp	.+266    	; 0x150 <__bad_interrupt>
  46:	00 00       	nop
  48:	83 c0       	rjmp	.+262    	; 0x150 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	81 c0       	rjmp	.+258    	; 0x150 <__bad_interrupt>
  4e:	00 00       	nop
  50:	7f c0       	rjmp	.+254    	; 0x150 <__bad_interrupt>
  52:	00 00       	nop
  54:	7d c0       	rjmp	.+250    	; 0x150 <__bad_interrupt>
  56:	00 00       	nop
  58:	7b c0       	rjmp	.+246    	; 0x150 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	79 c0       	rjmp	.+242    	; 0x150 <__bad_interrupt>
  5e:	00 00       	nop
  60:	77 c0       	rjmp	.+238    	; 0x150 <__bad_interrupt>
  62:	00 00       	nop
  64:	75 c0       	rjmp	.+234    	; 0x150 <__bad_interrupt>
  66:	00 00       	nop
  68:	73 c0       	rjmp	.+230    	; 0x150 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	71 c0       	rjmp	.+226    	; 0x150 <__bad_interrupt>
  6e:	00 00       	nop
  70:	6f c0       	rjmp	.+222    	; 0x150 <__bad_interrupt>
  72:	00 00       	nop
  74:	6d c0       	rjmp	.+218    	; 0x150 <__bad_interrupt>
  76:	00 00       	nop
  78:	6b c0       	rjmp	.+214    	; 0x150 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	69 c0       	rjmp	.+210    	; 0x150 <__bad_interrupt>
  7e:	00 00       	nop
  80:	67 c0       	rjmp	.+206    	; 0x150 <__bad_interrupt>
  82:	00 00       	nop
  84:	65 c0       	rjmp	.+202    	; 0x150 <__bad_interrupt>
  86:	00 00       	nop
  88:	63 c0       	rjmp	.+198    	; 0x150 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	cf 04       	cpc	r12, r15
  8e:	cf 04       	cpc	r12, r15
  90:	cf 04       	cpc	r12, r15
  92:	cf 04       	cpc	r12, r15
  94:	cf 04       	cpc	r12, r15
  96:	cf 04       	cpc	r12, r15
  98:	cf 04       	cpc	r12, r15
  9a:	cf 04       	cpc	r12, r15
  9c:	cf 04       	cpc	r12, r15
  9e:	cf 04       	cpc	r12, r15
  a0:	cf 04       	cpc	r12, r15
  a2:	cf 04       	cpc	r12, r15
  a4:	cf 04       	cpc	r12, r15
  a6:	cf 04       	cpc	r12, r15
  a8:	cf 04       	cpc	r12, r15
  aa:	cf 04       	cpc	r12, r15
  ac:	cf 04       	cpc	r12, r15
  ae:	cf 04       	cpc	r12, r15
  b0:	cf 04       	cpc	r12, r15
  b2:	cf 04       	cpc	r12, r15
  b4:	cf 04       	cpc	r12, r15
  b6:	cf 04       	cpc	r12, r15
  b8:	cf 04       	cpc	r12, r15
  ba:	cf 04       	cpc	r12, r15
  bc:	cf 04       	cpc	r12, r15
  be:	cf 04       	cpc	r12, r15
  c0:	cf 04       	cpc	r12, r15
  c2:	cf 04       	cpc	r12, r15
  c4:	cf 04       	cpc	r12, r15
  c6:	cf 04       	cpc	r12, r15
  c8:	cf 04       	cpc	r12, r15
  ca:	cf 04       	cpc	r12, r15
  cc:	cf 04       	cpc	r12, r15
  ce:	cf 04       	cpc	r12, r15
  d0:	cf 04       	cpc	r12, r15
  d2:	cf 04       	cpc	r12, r15
  d4:	cf 04       	cpc	r12, r15
  d6:	cf 04       	cpc	r12, r15
  d8:	cf 04       	cpc	r12, r15
  da:	cf 04       	cpc	r12, r15
  dc:	cf 04       	cpc	r12, r15
  de:	cf 04       	cpc	r12, r15
  e0:	cf 04       	cpc	r12, r15
  e2:	cf 04       	cpc	r12, r15
  e4:	cf 04       	cpc	r12, r15
  e6:	cf 04       	cpc	r12, r15
  e8:	cf 04       	cpc	r12, r15
  ea:	cf 04       	cpc	r12, r15
  ec:	cf 04       	cpc	r12, r15
  ee:	8e 04       	cpc	r8, r14
  f0:	93 04       	cpc	r9, r3
  f2:	98 04       	cpc	r9, r8
  f4:	9d 04       	cpc	r9, r13
  f6:	a2 04       	cpc	r10, r2
  f8:	a7 04       	cpc	r10, r7
  fa:	ac 04       	cpc	r10, r12
  fc:	b1 04       	cpc	r11, r1
  fe:	b6 04       	cpc	r11, r6
 100:	cf 04       	cpc	r12, r15
 102:	cf 04       	cpc	r12, r15
 104:	cf 04       	cpc	r12, r15
 106:	cf 04       	cpc	r12, r15
 108:	cf 04       	cpc	r12, r15
 10a:	cf 04       	cpc	r12, r15
 10c:	cf 04       	cpc	r12, r15
 10e:	bb 04       	cpc	r11, r11
 110:	c0 04       	cpc	r12, r0
 112:	c5 04       	cpc	r12, r5
 114:	ca 04       	cpc	r12, r10

00000116 <__ctors_end>:
 116:	11 24       	eor	r1, r1
 118:	1f be       	out	0x3f, r1	; 63
 11a:	cf ef       	ldi	r28, 0xFF	; 255
 11c:	d0 e4       	ldi	r29, 0x40	; 64
 11e:	de bf       	out	0x3e, r29	; 62
 120:	cd bf       	out	0x3d, r28	; 61

00000122 <__do_copy_data>:
 122:	11 e0       	ldi	r17, 0x01	; 1
 124:	a0 e0       	ldi	r26, 0x00	; 0
 126:	b1 e0       	ldi	r27, 0x01	; 1
 128:	ea e7       	ldi	r30, 0x7A	; 122
 12a:	ff e0       	ldi	r31, 0x0F	; 15
 12c:	00 e0       	ldi	r16, 0x00	; 0
 12e:	0b bf       	out	0x3b, r16	; 59
 130:	02 c0       	rjmp	.+4      	; 0x136 <__do_copy_data+0x14>
 132:	07 90       	elpm	r0, Z+
 134:	0d 92       	st	X+, r0
 136:	a6 32       	cpi	r26, 0x26	; 38
 138:	b1 07       	cpc	r27, r17
 13a:	d9 f7       	brne	.-10     	; 0x132 <__do_copy_data+0x10>

0000013c <__do_clear_bss>:
 13c:	21 e0       	ldi	r18, 0x01	; 1
 13e:	a6 e2       	ldi	r26, 0x26	; 38
 140:	b1 e0       	ldi	r27, 0x01	; 1
 142:	01 c0       	rjmp	.+2      	; 0x146 <.do_clear_bss_start>

00000144 <.do_clear_bss_loop>:
 144:	1d 92       	st	X+, r1

00000146 <.do_clear_bss_start>:
 146:	a7 33       	cpi	r26, 0x37	; 55
 148:	b2 07       	cpc	r27, r18
 14a:	e1 f7       	brne	.-8      	; 0x144 <.do_clear_bss_loop>
 14c:	b5 d4       	rcall	.+2410   	; 0xab8 <main>
 14e:	13 c7       	rjmp	.+3622   	; 0xf76 <_exit>

00000150 <__bad_interrupt>:
 150:	57 cf       	rjmp	.-338    	; 0x0 <__vectors>

00000152 <TimerSet>:
	SREG |= 0x80;	// 0x80: 1000000
}

void TimerOff() {
	TCCR1B 	= 0x00; // bit3bit2bit1bit0=0000: timer off
}
 152:	cf 93       	push	r28
 154:	df 93       	push	r29
 156:	00 d0       	rcall	.+0      	; 0x158 <TimerSet+0x6>
 158:	00 d0       	rcall	.+0      	; 0x15a <TimerSet+0x8>
 15a:	cd b7       	in	r28, 0x3d	; 61
 15c:	de b7       	in	r29, 0x3e	; 62
 15e:	69 83       	std	Y+1, r22	; 0x01
 160:	7a 83       	std	Y+2, r23	; 0x02
 162:	8b 83       	std	Y+3, r24	; 0x03
 164:	9c 83       	std	Y+4, r25	; 0x04
 166:	89 81       	ldd	r24, Y+1	; 0x01
 168:	9a 81       	ldd	r25, Y+2	; 0x02
 16a:	ab 81       	ldd	r26, Y+3	; 0x03
 16c:	bc 81       	ldd	r27, Y+4	; 0x04
 16e:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
 172:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__data_start+0x1>
 176:	a0 93 02 01 	sts	0x0102, r26	; 0x800102 <__data_start+0x2>
 17a:	b0 93 03 01 	sts	0x0103, r27	; 0x800103 <__data_start+0x3>
 17e:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 182:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
 186:	a0 91 02 01 	lds	r26, 0x0102	; 0x800102 <__data_start+0x2>
 18a:	b0 91 03 01 	lds	r27, 0x0103	; 0x800103 <__data_start+0x3>
 18e:	80 93 27 01 	sts	0x0127, r24	; 0x800127 <_avr_timer_cntcurr>
 192:	90 93 28 01 	sts	0x0128, r25	; 0x800128 <_avr_timer_cntcurr+0x1>
 196:	a0 93 29 01 	sts	0x0129, r26	; 0x800129 <_avr_timer_cntcurr+0x2>
 19a:	b0 93 2a 01 	sts	0x012A, r27	; 0x80012a <_avr_timer_cntcurr+0x3>
 19e:	00 00       	nop
 1a0:	0f 90       	pop	r0
 1a2:	0f 90       	pop	r0
 1a4:	0f 90       	pop	r0
 1a6:	0f 90       	pop	r0
 1a8:	df 91       	pop	r29
 1aa:	cf 91       	pop	r28
 1ac:	08 95       	ret

000001ae <TimerOn>:
 1ae:	cf 93       	push	r28
 1b0:	df 93       	push	r29
 1b2:	cd b7       	in	r28, 0x3d	; 61
 1b4:	de b7       	in	r29, 0x3e	; 62
 1b6:	81 e8       	ldi	r24, 0x81	; 129
 1b8:	90 e0       	ldi	r25, 0x00	; 0
 1ba:	2b e0       	ldi	r18, 0x0B	; 11
 1bc:	fc 01       	movw	r30, r24
 1be:	20 83       	st	Z, r18
 1c0:	88 e8       	ldi	r24, 0x88	; 136
 1c2:	90 e0       	ldi	r25, 0x00	; 0
 1c4:	2d e7       	ldi	r18, 0x7D	; 125
 1c6:	30 e0       	ldi	r19, 0x00	; 0
 1c8:	fc 01       	movw	r30, r24
 1ca:	31 83       	std	Z+1, r19	; 0x01
 1cc:	20 83       	st	Z, r18
 1ce:	8f e6       	ldi	r24, 0x6F	; 111
 1d0:	90 e0       	ldi	r25, 0x00	; 0
 1d2:	22 e0       	ldi	r18, 0x02	; 2
 1d4:	fc 01       	movw	r30, r24
 1d6:	20 83       	st	Z, r18
 1d8:	84 e8       	ldi	r24, 0x84	; 132
 1da:	90 e0       	ldi	r25, 0x00	; 0
 1dc:	fc 01       	movw	r30, r24
 1de:	11 82       	std	Z+1, r1	; 0x01
 1e0:	10 82       	st	Z, r1
 1e2:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 1e6:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
 1ea:	a0 91 02 01 	lds	r26, 0x0102	; 0x800102 <__data_start+0x2>
 1ee:	b0 91 03 01 	lds	r27, 0x0103	; 0x800103 <__data_start+0x3>
 1f2:	80 93 27 01 	sts	0x0127, r24	; 0x800127 <_avr_timer_cntcurr>
 1f6:	90 93 28 01 	sts	0x0128, r25	; 0x800128 <_avr_timer_cntcurr+0x1>
 1fa:	a0 93 29 01 	sts	0x0129, r26	; 0x800129 <_avr_timer_cntcurr+0x2>
 1fe:	b0 93 2a 01 	sts	0x012A, r27	; 0x80012a <_avr_timer_cntcurr+0x3>
 202:	8f e5       	ldi	r24, 0x5F	; 95
 204:	90 e0       	ldi	r25, 0x00	; 0
 206:	2f e5       	ldi	r18, 0x5F	; 95
 208:	30 e0       	ldi	r19, 0x00	; 0
 20a:	f9 01       	movw	r30, r18
 20c:	20 81       	ld	r18, Z
 20e:	20 68       	ori	r18, 0x80	; 128
 210:	fc 01       	movw	r30, r24
 212:	20 83       	st	Z, r18
 214:	00 00       	nop
 216:	df 91       	pop	r29
 218:	cf 91       	pop	r28
 21a:	08 95       	ret

0000021c <TimerISR>:

void TimerISR() {
 21c:	cf 93       	push	r28
 21e:	df 93       	push	r29
 220:	cd b7       	in	r28, 0x3d	; 61
 222:	de b7       	in	r29, 0x3e	; 62
	TimerFlag = 1;
 224:	81 e0       	ldi	r24, 0x01	; 1
 226:	80 93 26 01 	sts	0x0126, r24	; 0x800126 <__data_end>
}
 22a:	00 00       	nop
 22c:	df 91       	pop	r29
 22e:	cf 91       	pop	r28
 230:	08 95       	ret

00000232 <__vector_13>:

// In our approach, the C programmer does not touch this ISR, but rather TimerISR()
ISR(TIMER1_COMPA_vect)
{
 232:	1f 92       	push	r1
 234:	0f 92       	push	r0
 236:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
 23a:	0f 92       	push	r0
 23c:	11 24       	eor	r1, r1
 23e:	00 90 5b 00 	lds	r0, 0x005B	; 0x80005b <__TEXT_REGION_LENGTH__+0x7e005b>
 242:	0f 92       	push	r0
 244:	2f 93       	push	r18
 246:	3f 93       	push	r19
 248:	4f 93       	push	r20
 24a:	5f 93       	push	r21
 24c:	6f 93       	push	r22
 24e:	7f 93       	push	r23
 250:	8f 93       	push	r24
 252:	9f 93       	push	r25
 254:	af 93       	push	r26
 256:	bf 93       	push	r27
 258:	ef 93       	push	r30
 25a:	ff 93       	push	r31
 25c:	cf 93       	push	r28
 25e:	df 93       	push	r29
 260:	cd b7       	in	r28, 0x3d	; 61
 262:	de b7       	in	r29, 0x3e	; 62
	// CPU automatically calls when TCNT0 == OCR0 (every 1 ms per TimerOn settings)
	_avr_timer_cntcurr--; 			// Count down to 0 rather than up to TOP
 264:	80 91 27 01 	lds	r24, 0x0127	; 0x800127 <_avr_timer_cntcurr>
 268:	90 91 28 01 	lds	r25, 0x0128	; 0x800128 <_avr_timer_cntcurr+0x1>
 26c:	a0 91 29 01 	lds	r26, 0x0129	; 0x800129 <_avr_timer_cntcurr+0x2>
 270:	b0 91 2a 01 	lds	r27, 0x012A	; 0x80012a <_avr_timer_cntcurr+0x3>
 274:	01 97       	sbiw	r24, 0x01	; 1
 276:	a1 09       	sbc	r26, r1
 278:	b1 09       	sbc	r27, r1
 27a:	80 93 27 01 	sts	0x0127, r24	; 0x800127 <_avr_timer_cntcurr>
 27e:	90 93 28 01 	sts	0x0128, r25	; 0x800128 <_avr_timer_cntcurr+0x1>
 282:	a0 93 29 01 	sts	0x0129, r26	; 0x800129 <_avr_timer_cntcurr+0x2>
 286:	b0 93 2a 01 	sts	0x012A, r27	; 0x80012a <_avr_timer_cntcurr+0x3>
	if (_avr_timer_cntcurr == 0) { 	// results in a more efficient compare
 28a:	80 91 27 01 	lds	r24, 0x0127	; 0x800127 <_avr_timer_cntcurr>
 28e:	90 91 28 01 	lds	r25, 0x0128	; 0x800128 <_avr_timer_cntcurr+0x1>
 292:	a0 91 29 01 	lds	r26, 0x0129	; 0x800129 <_avr_timer_cntcurr+0x2>
 296:	b0 91 2a 01 	lds	r27, 0x012A	; 0x80012a <_avr_timer_cntcurr+0x3>
 29a:	89 2b       	or	r24, r25
 29c:	8a 2b       	or	r24, r26
 29e:	8b 2b       	or	r24, r27
		TimerISR(); 				// Call the ISR that the user uses
 2a0:	89 f4       	brne	.+34     	; 0x2c4 <__vector_13+0x92>
		_avr_timer_cntcurr = _avr_timer_M;
 2a2:	bc df       	rcall	.-136    	; 0x21c <TimerISR>
 2a4:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 2a8:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
 2ac:	a0 91 02 01 	lds	r26, 0x0102	; 0x800102 <__data_start+0x2>
 2b0:	b0 91 03 01 	lds	r27, 0x0103	; 0x800103 <__data_start+0x3>
 2b4:	80 93 27 01 	sts	0x0127, r24	; 0x800127 <_avr_timer_cntcurr>
 2b8:	90 93 28 01 	sts	0x0128, r25	; 0x800128 <_avr_timer_cntcurr+0x1>
 2bc:	a0 93 29 01 	sts	0x0129, r26	; 0x800129 <_avr_timer_cntcurr+0x2>
 2c0:	b0 93 2a 01 	sts	0x012A, r27	; 0x80012a <_avr_timer_cntcurr+0x3>
	}
}
 2c4:	00 00       	nop
 2c6:	df 91       	pop	r29
 2c8:	cf 91       	pop	r28
 2ca:	ff 91       	pop	r31
 2cc:	ef 91       	pop	r30
 2ce:	bf 91       	pop	r27
 2d0:	af 91       	pop	r26
 2d2:	9f 91       	pop	r25
 2d4:	8f 91       	pop	r24
 2d6:	7f 91       	pop	r23
 2d8:	6f 91       	pop	r22
 2da:	5f 91       	pop	r21
 2dc:	4f 91       	pop	r20
 2de:	3f 91       	pop	r19
 2e0:	2f 91       	pop	r18
 2e2:	0f 90       	pop	r0
 2e4:	00 92 5b 00 	sts	0x005B, r0	; 0x80005b <__TEXT_REGION_LENGTH__+0x7e005b>
 2e8:	0f 90       	pop	r0
 2ea:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
 2ee:	0f 90       	pop	r0
 2f0:	1f 90       	pop	r1
 2f2:	18 95       	reti

000002f4 <findGCD>:
////////////////////////////////////////////////////////////////////////////////
//Functionality - finds the greatest common divisor of two values
//Parameter: Two long int's to find their GCD
//Returns: GCD else 0
unsigned long int findGCD(unsigned long int a, unsigned long int b)
{
 2f4:	cf 93       	push	r28
 2f6:	df 93       	push	r29
 2f8:	cd b7       	in	r28, 0x3d	; 61
 2fa:	de b7       	in	r29, 0x3e	; 62
 2fc:	2c 97       	sbiw	r28, 0x0c	; 12
 2fe:	0f b6       	in	r0, 0x3f	; 63
 300:	f8 94       	cli
 302:	de bf       	out	0x3e, r29	; 62
 304:	0f be       	out	0x3f, r0	; 63
 306:	cd bf       	out	0x3d, r28	; 61
 308:	6d 83       	std	Y+5, r22	; 0x05
 30a:	7e 83       	std	Y+6, r23	; 0x06
 30c:	8f 83       	std	Y+7, r24	; 0x07
 30e:	98 87       	std	Y+8, r25	; 0x08
 310:	29 87       	std	Y+9, r18	; 0x09
 312:	3a 87       	std	Y+10, r19	; 0x0a
 314:	4b 87       	std	Y+11, r20	; 0x0b
 316:	5c 87       	std	Y+12, r21	; 0x0c
	unsigned long int c;
	while(1){
		c = a % b;
 318:	8d 81       	ldd	r24, Y+5	; 0x05
 31a:	9e 81       	ldd	r25, Y+6	; 0x06
 31c:	af 81       	ldd	r26, Y+7	; 0x07
 31e:	b8 85       	ldd	r27, Y+8	; 0x08
 320:	29 85       	ldd	r18, Y+9	; 0x09
 322:	3a 85       	ldd	r19, Y+10	; 0x0a
 324:	4b 85       	ldd	r20, Y+11	; 0x0b
 326:	5c 85       	ldd	r21, Y+12	; 0x0c
 328:	bc 01       	movw	r22, r24
 32a:	cd 01       	movw	r24, r26
 32c:	aa d5       	rcall	.+2900   	; 0xe82 <__udivmodsi4>
 32e:	dc 01       	movw	r26, r24
 330:	cb 01       	movw	r24, r22
 332:	89 83       	std	Y+1, r24	; 0x01
 334:	9a 83       	std	Y+2, r25	; 0x02
 336:	ab 83       	std	Y+3, r26	; 0x03
 338:	bc 83       	std	Y+4, r27	; 0x04
		if( c == 0 ) { return b; }
 33a:	89 81       	ldd	r24, Y+1	; 0x01
 33c:	9a 81       	ldd	r25, Y+2	; 0x02
 33e:	ab 81       	ldd	r26, Y+3	; 0x03
 340:	bc 81       	ldd	r27, Y+4	; 0x04
 342:	89 2b       	or	r24, r25
 344:	8a 2b       	or	r24, r26
 346:	8b 2b       	or	r24, r27
 348:	29 f4       	brne	.+10     	; 0x354 <findGCD+0x60>
 34a:	89 85       	ldd	r24, Y+9	; 0x09
 34c:	9a 85       	ldd	r25, Y+10	; 0x0a
 34e:	ab 85       	ldd	r26, Y+11	; 0x0b
 350:	bc 85       	ldd	r27, Y+12	; 0x0c
 352:	11 c0       	rjmp	.+34     	; 0x376 <findGCD+0x82>
		a = b;
 354:	89 85       	ldd	r24, Y+9	; 0x09
 356:	9a 85       	ldd	r25, Y+10	; 0x0a
 358:	ab 85       	ldd	r26, Y+11	; 0x0b
 35a:	bc 85       	ldd	r27, Y+12	; 0x0c
 35c:	8d 83       	std	Y+5, r24	; 0x05
 35e:	9e 83       	std	Y+6, r25	; 0x06
 360:	af 83       	std	Y+7, r26	; 0x07
 362:	b8 87       	std	Y+8, r27	; 0x08
		b = c;
 364:	89 81       	ldd	r24, Y+1	; 0x01
 366:	9a 81       	ldd	r25, Y+2	; 0x02
 368:	ab 81       	ldd	r26, Y+3	; 0x03
 36a:	bc 81       	ldd	r27, Y+4	; 0x04
 36c:	89 87       	std	Y+9, r24	; 0x09
 36e:	9a 87       	std	Y+10, r25	; 0x0a
 370:	ab 87       	std	Y+11, r26	; 0x0b
 372:	bc 87       	std	Y+12, r27	; 0x0c
	}
 374:	d1 cf       	rjmp	.-94     	; 0x318 <findGCD+0x24>
	return 0;
}
 376:	bc 01       	movw	r22, r24
 378:	cd 01       	movw	r24, r26
 37a:	2c 96       	adiw	r28, 0x0c	; 12
 37c:	0f b6       	in	r0, 0x3f	; 63
 37e:	f8 94       	cli
 380:	de bf       	out	0x3e, r29	; 62
 382:	0f be       	out	0x3f, r0	; 63
 384:	cd bf       	out	0x3d, r28	; 61
 386:	df 91       	pop	r29
 388:	cf 91       	pop	r28
 38a:	08 95       	ret

0000038c <SetBit>:
////////////////////////////////////////////////////////////////////////////////
//Functionality - Sets bit on a PORTx
//Parameter: Takes in a uChar for a PORTx, the pin number and the binary value 
//Returns: The new value of the PORTx
unsigned char SetBit(unsigned char pin, unsigned char number, unsigned char bin_value) 
{
 38c:	cf 93       	push	r28
 38e:	df 93       	push	r29
 390:	00 d0       	rcall	.+0      	; 0x392 <SetBit+0x6>
 392:	1f 92       	push	r1
 394:	cd b7       	in	r28, 0x3d	; 61
 396:	de b7       	in	r29, 0x3e	; 62
 398:	89 83       	std	Y+1, r24	; 0x01
 39a:	6a 83       	std	Y+2, r22	; 0x02
 39c:	4b 83       	std	Y+3, r20	; 0x03
	return (bin_value ? pin | (0x01 << number) : pin & ~(0x01 << number));
 39e:	8b 81       	ldd	r24, Y+3	; 0x03
 3a0:	88 23       	and	r24, r24
 3a2:	71 f0       	breq	.+28     	; 0x3c0 <SetBit+0x34>
 3a4:	8a 81       	ldd	r24, Y+2	; 0x02
 3a6:	28 2f       	mov	r18, r24
 3a8:	30 e0       	ldi	r19, 0x00	; 0
 3aa:	81 e0       	ldi	r24, 0x01	; 1
 3ac:	90 e0       	ldi	r25, 0x00	; 0
 3ae:	02 c0       	rjmp	.+4      	; 0x3b4 <SetBit+0x28>
 3b0:	88 0f       	add	r24, r24
 3b2:	99 1f       	adc	r25, r25
 3b4:	2a 95       	dec	r18
 3b6:	e2 f7       	brpl	.-8      	; 0x3b0 <SetBit+0x24>
 3b8:	98 2f       	mov	r25, r24
 3ba:	89 81       	ldd	r24, Y+1	; 0x01
 3bc:	89 2b       	or	r24, r25
 3be:	0e c0       	rjmp	.+28     	; 0x3dc <SetBit+0x50>
 3c0:	8a 81       	ldd	r24, Y+2	; 0x02
 3c2:	28 2f       	mov	r18, r24
 3c4:	30 e0       	ldi	r19, 0x00	; 0
 3c6:	81 e0       	ldi	r24, 0x01	; 1
 3c8:	90 e0       	ldi	r25, 0x00	; 0
 3ca:	02 c0       	rjmp	.+4      	; 0x3d0 <SetBit+0x44>
 3cc:	88 0f       	add	r24, r24
 3ce:	99 1f       	adc	r25, r25
 3d0:	2a 95       	dec	r18
 3d2:	e2 f7       	brpl	.-8      	; 0x3cc <SetBit+0x40>
 3d4:	98 2f       	mov	r25, r24
 3d6:	90 95       	com	r25
 3d8:	89 81       	ldd	r24, Y+1	; 0x01
 3da:	89 23       	and	r24, r25
}
 3dc:	0f 90       	pop	r0
 3de:	0f 90       	pop	r0
 3e0:	0f 90       	pop	r0
 3e2:	df 91       	pop	r29
 3e4:	cf 91       	pop	r28
 3e6:	08 95       	ret

000003e8 <GetBit>:
////////////////////////////////////////////////////////////////////////////////
//Functionality - Gets bit from a PINx
//Parameter: Takes in a uChar for a PINx and the pin number
//Returns: The value of the PINx
unsigned char GetBit(unsigned char port, unsigned char number) 
{
 3e8:	cf 93       	push	r28
 3ea:	df 93       	push	r29
 3ec:	00 d0       	rcall	.+0      	; 0x3ee <GetBit+0x6>
 3ee:	cd b7       	in	r28, 0x3d	; 61
 3f0:	de b7       	in	r29, 0x3e	; 62
 3f2:	89 83       	std	Y+1, r24	; 0x01
 3f4:	6a 83       	std	Y+2, r22	; 0x02
	return ( port & (0x01 << number) );
 3f6:	8a 81       	ldd	r24, Y+2	; 0x02
 3f8:	28 2f       	mov	r18, r24
 3fa:	30 e0       	ldi	r19, 0x00	; 0
 3fc:	81 e0       	ldi	r24, 0x01	; 1
 3fe:	90 e0       	ldi	r25, 0x00	; 0
 400:	02 c0       	rjmp	.+4      	; 0x406 <__LOCK_REGION_LENGTH__+0x6>
 402:	88 0f       	add	r24, r24
 404:	99 1f       	adc	r25, r25
 406:	2a 95       	dec	r18
 408:	e2 f7       	brpl	.-8      	; 0x402 <__LOCK_REGION_LENGTH__+0x2>
 40a:	98 2f       	mov	r25, r24
 40c:	89 81       	ldd	r24, Y+1	; 0x01
 40e:	89 23       	and	r24, r25
}
 410:	0f 90       	pop	r0
 412:	0f 90       	pop	r0
 414:	df 91       	pop	r29
 416:	cf 91       	pop	r28
 418:	08 95       	ret

0000041a <GetKeypadKey>:

////////////////////////////////////////////////////////////////////////////////
//Functionality - Gets input from a keypad via time-multiplexing
//Parameter: None
//Returns: A keypad button press else '\0'
unsigned char GetKeypadKey() {
 41a:	0f 93       	push	r16
 41c:	1f 93       	push	r17
 41e:	cf 93       	push	r28
 420:	df 93       	push	r29
 422:	cd b7       	in	r28, 0x3d	; 61
 424:	de b7       	in	r29, 0x3e	; 62

	// Check keys in col 1
	KEYPADPORT = SetBit(0xFF,COL1,0); // Set Px4 to 0; others 1
 426:	0b e2       	ldi	r16, 0x2B	; 43
 428:	10 e0       	ldi	r17, 0x00	; 0
 42a:	40 e0       	ldi	r20, 0x00	; 0
 42c:	64 e0       	ldi	r22, 0x04	; 4
 42e:	8f ef       	ldi	r24, 0xFF	; 255
 430:	ad df       	rcall	.-166    	; 0x38c <SetBit>
 432:	f8 01       	movw	r30, r16
 434:	80 83       	st	Z, r24
	asm("nop"); // add a delay to allow PORTx to stabilize before checking
 436:	00 00       	nop
	if ( GetBit(~KEYPADPIN,ROW1) ) { return '1'; }
 438:	89 e2       	ldi	r24, 0x29	; 41
 43a:	90 e0       	ldi	r25, 0x00	; 0
 43c:	fc 01       	movw	r30, r24
 43e:	80 81       	ld	r24, Z
 440:	80 95       	com	r24
 442:	60 e0       	ldi	r22, 0x00	; 0
 444:	d1 df       	rcall	.-94     	; 0x3e8 <GetBit>
 446:	88 23       	and	r24, r24
 448:	11 f0       	breq	.+4      	; 0x44e <GetKeypadKey+0x34>
 44a:	81 e3       	ldi	r24, 0x31	; 49
 44c:	c1 c0       	rjmp	.+386    	; 0x5d0 <GetKeypadKey+0x1b6>
	if ( GetBit(~KEYPADPIN,ROW2) ) { return '4'; }
 44e:	89 e2       	ldi	r24, 0x29	; 41
 450:	90 e0       	ldi	r25, 0x00	; 0
 452:	fc 01       	movw	r30, r24
 454:	80 81       	ld	r24, Z
 456:	80 95       	com	r24
 458:	61 e0       	ldi	r22, 0x01	; 1
 45a:	c6 df       	rcall	.-116    	; 0x3e8 <GetBit>
 45c:	88 23       	and	r24, r24
 45e:	11 f0       	breq	.+4      	; 0x464 <GetKeypadKey+0x4a>
 460:	84 e3       	ldi	r24, 0x34	; 52
 462:	b6 c0       	rjmp	.+364    	; 0x5d0 <GetKeypadKey+0x1b6>
	if ( GetBit(~KEYPADPIN,ROW3) ) { return '7'; }
 464:	89 e2       	ldi	r24, 0x29	; 41
 466:	90 e0       	ldi	r25, 0x00	; 0
 468:	fc 01       	movw	r30, r24
 46a:	80 81       	ld	r24, Z
 46c:	80 95       	com	r24
 46e:	62 e0       	ldi	r22, 0x02	; 2
 470:	bb df       	rcall	.-138    	; 0x3e8 <GetBit>
 472:	88 23       	and	r24, r24
 474:	11 f0       	breq	.+4      	; 0x47a <GetKeypadKey+0x60>
 476:	87 e3       	ldi	r24, 0x37	; 55
 478:	ab c0       	rjmp	.+342    	; 0x5d0 <GetKeypadKey+0x1b6>
	if ( GetBit(~KEYPADPIN,ROW4) ) { return '*'; }
 47a:	89 e2       	ldi	r24, 0x29	; 41
 47c:	90 e0       	ldi	r25, 0x00	; 0
 47e:	fc 01       	movw	r30, r24
 480:	80 81       	ld	r24, Z
 482:	80 95       	com	r24
 484:	63 e0       	ldi	r22, 0x03	; 3
 486:	b0 df       	rcall	.-160    	; 0x3e8 <GetBit>
 488:	88 23       	and	r24, r24
 48a:	11 f0       	breq	.+4      	; 0x490 <GetKeypadKey+0x76>
 48c:	8a e2       	ldi	r24, 0x2A	; 42

	// Check keys in col 2
	KEYPADPORT = SetBit(0xFF,COL2,0); // Set Px5 to 0; others 1
 48e:	a0 c0       	rjmp	.+320    	; 0x5d0 <GetKeypadKey+0x1b6>
 490:	0b e2       	ldi	r16, 0x2B	; 43
 492:	10 e0       	ldi	r17, 0x00	; 0
 494:	40 e0       	ldi	r20, 0x00	; 0
 496:	65 e0       	ldi	r22, 0x05	; 5
 498:	8f ef       	ldi	r24, 0xFF	; 255
 49a:	78 df       	rcall	.-272    	; 0x38c <SetBit>
 49c:	f8 01       	movw	r30, r16
	asm("nop"); // add a delay to allow PORTx to stabilize before checking
	if ( GetBit(~KEYPADPIN,ROW1) ) { return '2'; }
 49e:	80 83       	st	Z, r24
 4a0:	00 00       	nop
 4a2:	89 e2       	ldi	r24, 0x29	; 41
 4a4:	90 e0       	ldi	r25, 0x00	; 0
 4a6:	fc 01       	movw	r30, r24
 4a8:	80 81       	ld	r24, Z
 4aa:	80 95       	com	r24
 4ac:	60 e0       	ldi	r22, 0x00	; 0
 4ae:	9c df       	rcall	.-200    	; 0x3e8 <GetBit>
 4b0:	88 23       	and	r24, r24
	if ( GetBit(~KEYPADPIN,ROW2) ) { return '5'; }
 4b2:	11 f0       	breq	.+4      	; 0x4b8 <GetKeypadKey+0x9e>
 4b4:	82 e3       	ldi	r24, 0x32	; 50
 4b6:	8c c0       	rjmp	.+280    	; 0x5d0 <GetKeypadKey+0x1b6>
 4b8:	89 e2       	ldi	r24, 0x29	; 41
 4ba:	90 e0       	ldi	r25, 0x00	; 0
 4bc:	fc 01       	movw	r30, r24
 4be:	80 81       	ld	r24, Z
 4c0:	80 95       	com	r24
 4c2:	61 e0       	ldi	r22, 0x01	; 1
 4c4:	91 df       	rcall	.-222    	; 0x3e8 <GetBit>
	if ( GetBit(~KEYPADPIN,ROW3) ) { return '8'; }
 4c6:	88 23       	and	r24, r24
 4c8:	11 f0       	breq	.+4      	; 0x4ce <GetKeypadKey+0xb4>
 4ca:	85 e3       	ldi	r24, 0x35	; 53
 4cc:	81 c0       	rjmp	.+258    	; 0x5d0 <GetKeypadKey+0x1b6>
 4ce:	89 e2       	ldi	r24, 0x29	; 41
 4d0:	90 e0       	ldi	r25, 0x00	; 0
 4d2:	fc 01       	movw	r30, r24
 4d4:	80 81       	ld	r24, Z
 4d6:	80 95       	com	r24
 4d8:	62 e0       	ldi	r22, 0x02	; 2
 4da:	86 df       	rcall	.-244    	; 0x3e8 <GetBit>
	if ( GetBit(~KEYPADPIN,ROW4) ) { return '0'; }
 4dc:	88 23       	and	r24, r24
 4de:	11 f0       	breq	.+4      	; 0x4e4 <GetKeypadKey+0xca>
 4e0:	88 e3       	ldi	r24, 0x38	; 56
 4e2:	76 c0       	rjmp	.+236    	; 0x5d0 <GetKeypadKey+0x1b6>
 4e4:	89 e2       	ldi	r24, 0x29	; 41
 4e6:	90 e0       	ldi	r25, 0x00	; 0
 4e8:	fc 01       	movw	r30, r24
 4ea:	80 81       	ld	r24, Z
 4ec:	80 95       	com	r24
 4ee:	63 e0       	ldi	r22, 0x03	; 3
 4f0:	7b df       	rcall	.-266    	; 0x3e8 <GetBit>

	// Check keys in col 3
	KEYPADPORT = SetBit(0xFF,COL3,0); // Set Px6 to 0; others 1
 4f2:	88 23       	and	r24, r24
 4f4:	11 f0       	breq	.+4      	; 0x4fa <GetKeypadKey+0xe0>
 4f6:	80 e3       	ldi	r24, 0x30	; 48
 4f8:	6b c0       	rjmp	.+214    	; 0x5d0 <GetKeypadKey+0x1b6>
 4fa:	0b e2       	ldi	r16, 0x2B	; 43
 4fc:	10 e0       	ldi	r17, 0x00	; 0
 4fe:	40 e0       	ldi	r20, 0x00	; 0
 500:	66 e0       	ldi	r22, 0x06	; 6
	asm("nop"); // add a delay to allow PORTx to stabilize before checking
 502:	8f ef       	ldi	r24, 0xFF	; 255
	if ( GetBit(~KEYPADPIN,ROW1) ) { return '3'; }
 504:	43 df       	rcall	.-378    	; 0x38c <SetBit>
 506:	f8 01       	movw	r30, r16
 508:	80 83       	st	Z, r24
 50a:	00 00       	nop
 50c:	89 e2       	ldi	r24, 0x29	; 41
 50e:	90 e0       	ldi	r25, 0x00	; 0
 510:	fc 01       	movw	r30, r24
 512:	80 81       	ld	r24, Z
 514:	80 95       	com	r24
 516:	60 e0       	ldi	r22, 0x00	; 0
 518:	67 df       	rcall	.-306    	; 0x3e8 <GetBit>
	if ( GetBit(~KEYPADPIN,ROW2) ) { return '6'; }
 51a:	88 23       	and	r24, r24
 51c:	11 f0       	breq	.+4      	; 0x522 <GetKeypadKey+0x108>
 51e:	83 e3       	ldi	r24, 0x33	; 51
 520:	57 c0       	rjmp	.+174    	; 0x5d0 <GetKeypadKey+0x1b6>
 522:	89 e2       	ldi	r24, 0x29	; 41
 524:	90 e0       	ldi	r25, 0x00	; 0
 526:	fc 01       	movw	r30, r24
 528:	80 81       	ld	r24, Z
 52a:	80 95       	com	r24
 52c:	61 e0       	ldi	r22, 0x01	; 1
 52e:	5c df       	rcall	.-328    	; 0x3e8 <GetBit>
	if ( GetBit(~KEYPADPIN,ROW3) ) { return '9'; }
 530:	88 23       	and	r24, r24
 532:	11 f0       	breq	.+4      	; 0x538 <GetKeypadKey+0x11e>
 534:	86 e3       	ldi	r24, 0x36	; 54
 536:	4c c0       	rjmp	.+152    	; 0x5d0 <GetKeypadKey+0x1b6>
 538:	89 e2       	ldi	r24, 0x29	; 41
 53a:	90 e0       	ldi	r25, 0x00	; 0
 53c:	fc 01       	movw	r30, r24
 53e:	80 81       	ld	r24, Z
 540:	80 95       	com	r24
 542:	62 e0       	ldi	r22, 0x02	; 2
 544:	51 df       	rcall	.-350    	; 0x3e8 <GetBit>
	if ( GetBit(~KEYPADPIN,ROW4) ) { return '#'; }
 546:	88 23       	and	r24, r24
 548:	11 f0       	breq	.+4      	; 0x54e <GetKeypadKey+0x134>
 54a:	89 e3       	ldi	r24, 0x39	; 57
 54c:	41 c0       	rjmp	.+130    	; 0x5d0 <GetKeypadKey+0x1b6>
 54e:	89 e2       	ldi	r24, 0x29	; 41
 550:	90 e0       	ldi	r25, 0x00	; 0
 552:	fc 01       	movw	r30, r24
 554:	80 81       	ld	r24, Z
 556:	80 95       	com	r24
 558:	63 e0       	ldi	r22, 0x03	; 3

	// Check keys in col 4
	KEYPADPORT = SetBit(0xFF,COL4,0); // Set Px7 to 0; others 1
 55a:	46 df       	rcall	.-372    	; 0x3e8 <GetBit>
 55c:	88 23       	and	r24, r24
 55e:	11 f0       	breq	.+4      	; 0x564 <GetKeypadKey+0x14a>
 560:	83 e2       	ldi	r24, 0x23	; 35
 562:	36 c0       	rjmp	.+108    	; 0x5d0 <GetKeypadKey+0x1b6>
 564:	0b e2       	ldi	r16, 0x2B	; 43
 566:	10 e0       	ldi	r17, 0x00	; 0
 568:	40 e0       	ldi	r20, 0x00	; 0
	asm("nop"); // add a delay to allow PORTx to stabilize before checking
 56a:	67 e0       	ldi	r22, 0x07	; 7
	if (GetBit(~KEYPADPIN,ROW1) ) { return 'A'; }
 56c:	8f ef       	ldi	r24, 0xFF	; 255
 56e:	0e df       	rcall	.-484    	; 0x38c <SetBit>
 570:	f8 01       	movw	r30, r16
 572:	80 83       	st	Z, r24
 574:	00 00       	nop
 576:	89 e2       	ldi	r24, 0x29	; 41
 578:	90 e0       	ldi	r25, 0x00	; 0
 57a:	fc 01       	movw	r30, r24
 57c:	80 81       	ld	r24, Z
 57e:	80 95       	com	r24
	if (GetBit(~KEYPADPIN,ROW2) ) { return 'B'; }
 580:	60 e0       	ldi	r22, 0x00	; 0
 582:	32 df       	rcall	.-412    	; 0x3e8 <GetBit>
 584:	88 23       	and	r24, r24
 586:	11 f0       	breq	.+4      	; 0x58c <GetKeypadKey+0x172>
 588:	81 e4       	ldi	r24, 0x41	; 65
 58a:	22 c0       	rjmp	.+68     	; 0x5d0 <GetKeypadKey+0x1b6>
 58c:	89 e2       	ldi	r24, 0x29	; 41
 58e:	90 e0       	ldi	r25, 0x00	; 0
 590:	fc 01       	movw	r30, r24
 592:	80 81       	ld	r24, Z
	if (GetBit(~KEYPADPIN,ROW3) ) { return 'C'; }
 594:	80 95       	com	r24
 596:	61 e0       	ldi	r22, 0x01	; 1
 598:	27 df       	rcall	.-434    	; 0x3e8 <GetBit>
 59a:	88 23       	and	r24, r24
 59c:	11 f0       	breq	.+4      	; 0x5a2 <GetKeypadKey+0x188>
 59e:	82 e4       	ldi	r24, 0x42	; 66
 5a0:	17 c0       	rjmp	.+46     	; 0x5d0 <GetKeypadKey+0x1b6>
 5a2:	89 e2       	ldi	r24, 0x29	; 41
 5a4:	90 e0       	ldi	r25, 0x00	; 0
 5a6:	fc 01       	movw	r30, r24
 5a8:	80 81       	ld	r24, Z
 5aa:	80 95       	com	r24
	if (GetBit(~KEYPADPIN,ROW4) ) { return 'D'; }
 5ac:	62 e0       	ldi	r22, 0x02	; 2
 5ae:	1c df       	rcall	.-456    	; 0x3e8 <GetBit>
 5b0:	88 23       	and	r24, r24
 5b2:	11 f0       	breq	.+4      	; 0x5b8 <GetKeypadKey+0x19e>
 5b4:	83 e4       	ldi	r24, 0x43	; 67
 5b6:	0c c0       	rjmp	.+24     	; 0x5d0 <GetKeypadKey+0x1b6>
 5b8:	89 e2       	ldi	r24, 0x29	; 41
 5ba:	90 e0       	ldi	r25, 0x00	; 0
 5bc:	fc 01       	movw	r30, r24
 5be:	80 81       	ld	r24, Z
 5c0:	80 95       	com	r24
 5c2:	63 e0       	ldi	r22, 0x03	; 3
	
	return '\0';
 5c4:	11 df       	rcall	.-478    	; 0x3e8 <GetBit>
}
 5c6:	88 23       	and	r24, r24
 5c8:	11 f0       	breq	.+4      	; 0x5ce <GetKeypadKey+0x1b4>
 5ca:	84 e4       	ldi	r24, 0x44	; 68
 5cc:	01 c0       	rjmp	.+2      	; 0x5d0 <GetKeypadKey+0x1b6>
 5ce:	80 e0       	ldi	r24, 0x00	; 0
 5d0:	df 91       	pop	r29
 5d2:	cf 91       	pop	r28
 5d4:	1f 91       	pop	r17
 5d6:	0f 91       	pop	r16
 5d8:	08 95       	ret

000005da <delay_ms>:
#define RS 6				// pin number of uC connected to pin 4 of LCD disp.
#define E 7					// pin number of uC connected to pin 6 of LCD disp.

/*-------------------------------------------------------------------------*/

void delay_ms(int miliSec) { //for 8 Mhz crystal
 5da:	cf 93       	push	r28
 5dc:	df 93       	push	r29
 5de:	00 d0       	rcall	.+0      	; 0x5e0 <delay_ms+0x6>
 5e0:	00 d0       	rcall	.+0      	; 0x5e2 <delay_ms+0x8>
 5e2:	00 d0       	rcall	.+0      	; 0x5e4 <delay_ms+0xa>
 5e4:	cd b7       	in	r28, 0x3d	; 61
 5e6:	de b7       	in	r29, 0x3e	; 62
 5e8:	9e 83       	std	Y+6, r25	; 0x06
 5ea:	8d 83       	std	Y+5, r24	; 0x05
	int i,j;
	for(i=0;i<miliSec;i++) {
 5ec:	1a 82       	std	Y+2, r1	; 0x02
 5ee:	19 82       	std	Y+1, r1	; 0x01
 5f0:	13 c0       	rjmp	.+38     	; 0x618 <delay_ms+0x3e>
		for(j=0;j<775;j++) {
 5f2:	1c 82       	std	Y+4, r1	; 0x04
 5f4:	1b 82       	std	Y+3, r1	; 0x03
 5f6:	06 c0       	rjmp	.+12     	; 0x604 <delay_ms+0x2a>
			asm("nop");
 5f8:	00 00       	nop
/*-------------------------------------------------------------------------*/

void delay_ms(int miliSec) { //for 8 Mhz crystal
	int i,j;
	for(i=0;i<miliSec;i++) {
		for(j=0;j<775;j++) {
 5fa:	8b 81       	ldd	r24, Y+3	; 0x03
 5fc:	9c 81       	ldd	r25, Y+4	; 0x04
 5fe:	01 96       	adiw	r24, 0x01	; 1
 600:	9c 83       	std	Y+4, r25	; 0x04
 602:	8b 83       	std	Y+3, r24	; 0x03
 604:	8b 81       	ldd	r24, Y+3	; 0x03
 606:	9c 81       	ldd	r25, Y+4	; 0x04
 608:	87 30       	cpi	r24, 0x07	; 7
 60a:	93 40       	sbci	r25, 0x03	; 3
 60c:	ac f3       	brlt	.-22     	; 0x5f8 <delay_ms+0x1e>

/*-------------------------------------------------------------------------*/

void delay_ms(int miliSec) { //for 8 Mhz crystal
	int i,j;
	for(i=0;i<miliSec;i++) {
 60e:	89 81       	ldd	r24, Y+1	; 0x01
 610:	9a 81       	ldd	r25, Y+2	; 0x02
 612:	01 96       	adiw	r24, 0x01	; 1
 614:	9a 83       	std	Y+2, r25	; 0x02
 616:	89 83       	std	Y+1, r24	; 0x01
 618:	29 81       	ldd	r18, Y+1	; 0x01
 61a:	3a 81       	ldd	r19, Y+2	; 0x02
 61c:	8d 81       	ldd	r24, Y+5	; 0x05
 61e:	9e 81       	ldd	r25, Y+6	; 0x06
 620:	28 17       	cp	r18, r24
 622:	39 07       	cpc	r19, r25
 624:	34 f3       	brlt	.-52     	; 0x5f2 <delay_ms+0x18>
		for(j=0;j<775;j++) {
			asm("nop");
		}
	}
}
 626:	00 00       	nop
 628:	26 96       	adiw	r28, 0x06	; 6
 62a:	0f b6       	in	r0, 0x3f	; 63
 62c:	f8 94       	cli
 62e:	de bf       	out	0x3e, r29	; 62
 630:	0f be       	out	0x3f, r0	; 63
 632:	cd bf       	out	0x3d, r28	; 61
 634:	df 91       	pop	r29
 636:	cf 91       	pop	r28
 638:	08 95       	ret

0000063a <LCD_WriteCommand>:

/*-------------------------------------------------------------------------*/

void LCD_WriteCommand (unsigned char Command) {
 63a:	cf 93       	push	r28
 63c:	df 93       	push	r29
 63e:	1f 92       	push	r1
 640:	cd b7       	in	r28, 0x3d	; 61
 642:	de b7       	in	r29, 0x3e	; 62
 644:	89 83       	std	Y+1, r24	; 0x01
	CLR_BIT(CONTROL_BUS,RS);
 646:	88 e2       	ldi	r24, 0x28	; 40
 648:	90 e0       	ldi	r25, 0x00	; 0
 64a:	28 e2       	ldi	r18, 0x28	; 40
 64c:	30 e0       	ldi	r19, 0x00	; 0
 64e:	f9 01       	movw	r30, r18
 650:	20 81       	ld	r18, Z
 652:	2f 7b       	andi	r18, 0xBF	; 191
 654:	fc 01       	movw	r30, r24
 656:	20 83       	st	Z, r18
	DATA_BUS = Command;
 658:	82 e2       	ldi	r24, 0x22	; 34
 65a:	90 e0       	ldi	r25, 0x00	; 0
 65c:	29 81       	ldd	r18, Y+1	; 0x01
 65e:	fc 01       	movw	r30, r24
 660:	20 83       	st	Z, r18
	SET_BIT(CONTROL_BUS,E);
 662:	88 e2       	ldi	r24, 0x28	; 40
 664:	90 e0       	ldi	r25, 0x00	; 0
 666:	28 e2       	ldi	r18, 0x28	; 40
 668:	30 e0       	ldi	r19, 0x00	; 0
 66a:	f9 01       	movw	r30, r18
 66c:	20 81       	ld	r18, Z
 66e:	20 68       	ori	r18, 0x80	; 128
 670:	fc 01       	movw	r30, r24
 672:	20 83       	st	Z, r18
	asm("nop");
 674:	00 00       	nop
	CLR_BIT(CONTROL_BUS,E);
 676:	88 e2       	ldi	r24, 0x28	; 40
 678:	90 e0       	ldi	r25, 0x00	; 0
 67a:	28 e2       	ldi	r18, 0x28	; 40
 67c:	30 e0       	ldi	r19, 0x00	; 0
 67e:	f9 01       	movw	r30, r18
 680:	20 81       	ld	r18, Z
 682:	2f 77       	andi	r18, 0x7F	; 127
 684:	fc 01       	movw	r30, r24
 686:	20 83       	st	Z, r18
	delay_ms(2); // ClearScreen requires 1.52ms to execute
 688:	82 e0       	ldi	r24, 0x02	; 2
 68a:	90 e0       	ldi	r25, 0x00	; 0
 68c:	a6 df       	rcall	.-180    	; 0x5da <delay_ms>
}
 68e:	00 00       	nop
 690:	0f 90       	pop	r0
 692:	df 91       	pop	r29
 694:	cf 91       	pop	r28
 696:	08 95       	ret

00000698 <LCD_ClearScreen>:

void LCD_ClearScreen(void) {
 698:	cf 93       	push	r28
 69a:	df 93       	push	r29
 69c:	cd b7       	in	r28, 0x3d	; 61
 69e:	de b7       	in	r29, 0x3e	; 62
	LCD_WriteCommand(0x01);
 6a0:	81 e0       	ldi	r24, 0x01	; 1
 6a2:	cb df       	rcall	.-106    	; 0x63a <LCD_WriteCommand>
}
 6a4:	00 00       	nop
 6a6:	df 91       	pop	r29
 6a8:	cf 91       	pop	r28
 6aa:	08 95       	ret

000006ac <LCD_init>:

void LCD_init(void) {
 6ac:	cf 93       	push	r28
 6ae:	df 93       	push	r29
 6b0:	cd b7       	in	r28, 0x3d	; 61
 6b2:	de b7       	in	r29, 0x3e	; 62
	delay_ms(100); //wait for 100 ms for LCD to power up
 6b4:	84 e6       	ldi	r24, 0x64	; 100
 6b6:	90 e0       	ldi	r25, 0x00	; 0
	LCD_WriteCommand(0x38);
 6b8:	90 df       	rcall	.-224    	; 0x5da <delay_ms>
	LCD_WriteCommand(0x06);
 6ba:	88 e3       	ldi	r24, 0x38	; 56
	LCD_WriteCommand(0x0f);
 6bc:	be df       	rcall	.-132    	; 0x63a <LCD_WriteCommand>
	LCD_WriteCommand(0x01);
 6be:	86 e0       	ldi	r24, 0x06	; 6
 6c0:	bc df       	rcall	.-136    	; 0x63a <LCD_WriteCommand>
	delay_ms(10);						 
 6c2:	8f e0       	ldi	r24, 0x0F	; 15
 6c4:	ba df       	rcall	.-140    	; 0x63a <LCD_WriteCommand>
 6c6:	81 e0       	ldi	r24, 0x01	; 1
 6c8:	b8 df       	rcall	.-144    	; 0x63a <LCD_WriteCommand>
}
 6ca:	8a e0       	ldi	r24, 0x0A	; 10
 6cc:	90 e0       	ldi	r25, 0x00	; 0
 6ce:	85 df       	rcall	.-246    	; 0x5da <delay_ms>
 6d0:	00 00       	nop
 6d2:	df 91       	pop	r29
 6d4:	cf 91       	pop	r28
 6d6:	08 95       	ret

000006d8 <LCD_WriteData>:

void LCD_WriteData(unsigned char Data) {
 6d8:	cf 93       	push	r28
 6da:	df 93       	push	r29
 6dc:	1f 92       	push	r1
 6de:	cd b7       	in	r28, 0x3d	; 61
 6e0:	de b7       	in	r29, 0x3e	; 62
 6e2:	89 83       	std	Y+1, r24	; 0x01
	SET_BIT(CONTROL_BUS,RS);
 6e4:	88 e2       	ldi	r24, 0x28	; 40
 6e6:	90 e0       	ldi	r25, 0x00	; 0
 6e8:	28 e2       	ldi	r18, 0x28	; 40
 6ea:	30 e0       	ldi	r19, 0x00	; 0
 6ec:	f9 01       	movw	r30, r18
 6ee:	20 81       	ld	r18, Z
 6f0:	20 64       	ori	r18, 0x40	; 64
 6f2:	fc 01       	movw	r30, r24
 6f4:	20 83       	st	Z, r18
	DATA_BUS = Data;
 6f6:	82 e2       	ldi	r24, 0x22	; 34
 6f8:	90 e0       	ldi	r25, 0x00	; 0
 6fa:	29 81       	ldd	r18, Y+1	; 0x01
 6fc:	fc 01       	movw	r30, r24
 6fe:	20 83       	st	Z, r18
	SET_BIT(CONTROL_BUS,E);
 700:	88 e2       	ldi	r24, 0x28	; 40
 702:	90 e0       	ldi	r25, 0x00	; 0
 704:	28 e2       	ldi	r18, 0x28	; 40
 706:	30 e0       	ldi	r19, 0x00	; 0
 708:	f9 01       	movw	r30, r18
 70a:	20 81       	ld	r18, Z
 70c:	20 68       	ori	r18, 0x80	; 128
 70e:	fc 01       	movw	r30, r24
 710:	20 83       	st	Z, r18
	asm("nop");
 712:	00 00       	nop
	CLR_BIT(CONTROL_BUS,E);
 714:	88 e2       	ldi	r24, 0x28	; 40
 716:	90 e0       	ldi	r25, 0x00	; 0
 718:	28 e2       	ldi	r18, 0x28	; 40
 71a:	30 e0       	ldi	r19, 0x00	; 0
 71c:	f9 01       	movw	r30, r18
 71e:	20 81       	ld	r18, Z
 720:	2f 77       	andi	r18, 0x7F	; 127
 722:	fc 01       	movw	r30, r24
 724:	20 83       	st	Z, r18
	delay_ms(1);
 726:	81 e0       	ldi	r24, 0x01	; 1
 728:	90 e0       	ldi	r25, 0x00	; 0
 72a:	57 df       	rcall	.-338    	; 0x5da <delay_ms>
}
 72c:	00 00       	nop
 72e:	0f 90       	pop	r0
 730:	df 91       	pop	r29
 732:	cf 91       	pop	r28
 734:	08 95       	ret

00000736 <LCD_Cursor>:

void LCD_Cursor(unsigned char column) {
 736:	cf 93       	push	r28
 738:	df 93       	push	r29
 73a:	1f 92       	push	r1
 73c:	cd b7       	in	r28, 0x3d	; 61
 73e:	de b7       	in	r29, 0x3e	; 62
 740:	89 83       	std	Y+1, r24	; 0x01
	if ( column < 17 ) { // 16x2 LCD: column < 17; 16x1 LCD: column < 9
 742:	89 81       	ldd	r24, Y+1	; 0x01
 744:	81 31       	cpi	r24, 0x11	; 17
 746:	20 f4       	brcc	.+8      	; 0x750 <LCD_Cursor+0x1a>
		LCD_WriteCommand(0x80 + column - 1);
 748:	89 81       	ldd	r24, Y+1	; 0x01
 74a:	81 58       	subi	r24, 0x81	; 129
 74c:	76 df       	rcall	.-276    	; 0x63a <LCD_WriteCommand>
		} else { // 6x2 LCD: column - 9; 16x1 LCD: column - 1
		LCD_WriteCommand(0xB8 + column - 9);
	}
}
 74e:	03 c0       	rjmp	.+6      	; 0x756 <LCD_Cursor+0x20>

void LCD_Cursor(unsigned char column) {
	if ( column < 17 ) { // 16x2 LCD: column < 17; 16x1 LCD: column < 9
		LCD_WriteCommand(0x80 + column - 1);
		} else { // 6x2 LCD: column - 9; 16x1 LCD: column - 1
		LCD_WriteCommand(0xB8 + column - 9);
 750:	89 81       	ldd	r24, Y+1	; 0x01
 752:	81 55       	subi	r24, 0x51	; 81
 754:	72 df       	rcall	.-284    	; 0x63a <LCD_WriteCommand>
	}
}
 756:	00 00       	nop
 758:	0f 90       	pop	r0
 75a:	df 91       	pop	r29
 75c:	cf 91       	pop	r28
 75e:	08 95       	ret

00000760 <LCD_DisplayString>:

void LCD_DisplayString( unsigned char column, const unsigned char* string) {
 760:	cf 93       	push	r28
 762:	df 93       	push	r29
 764:	00 d0       	rcall	.+0      	; 0x766 <LCD_DisplayString+0x6>
 766:	00 d0       	rcall	.+0      	; 0x768 <LCD_DisplayString+0x8>
 768:	cd b7       	in	r28, 0x3d	; 61
 76a:	de b7       	in	r29, 0x3e	; 62
 76c:	8a 83       	std	Y+2, r24	; 0x02
 76e:	7c 83       	std	Y+4, r23	; 0x04
	LCD_ClearScreen();
 770:	6b 83       	std	Y+3, r22	; 0x03
	unsigned char c = column;
 772:	92 df       	rcall	.-220    	; 0x698 <LCD_ClearScreen>
 774:	8a 81       	ldd	r24, Y+2	; 0x02
	while(*string) {
 776:	89 83       	std	Y+1, r24	; 0x01
		LCD_Cursor(c++);
 778:	0f c0       	rjmp	.+30     	; 0x798 <LCD_DisplayString+0x38>
 77a:	89 81       	ldd	r24, Y+1	; 0x01
 77c:	91 e0       	ldi	r25, 0x01	; 1
 77e:	98 0f       	add	r25, r24
 780:	99 83       	std	Y+1, r25	; 0x01
		LCD_WriteData(*string++);
 782:	d9 df       	rcall	.-78     	; 0x736 <LCD_Cursor>
 784:	8b 81       	ldd	r24, Y+3	; 0x03
 786:	9c 81       	ldd	r25, Y+4	; 0x04
 788:	9c 01       	movw	r18, r24
 78a:	2f 5f       	subi	r18, 0xFF	; 255
 78c:	3f 4f       	sbci	r19, 0xFF	; 255
 78e:	3c 83       	std	Y+4, r19	; 0x04
 790:	2b 83       	std	Y+3, r18	; 0x03
 792:	fc 01       	movw	r30, r24
 794:	80 81       	ld	r24, Z
}

void LCD_DisplayString( unsigned char column, const unsigned char* string) {
	LCD_ClearScreen();
	unsigned char c = column;
	while(*string) {
 796:	a0 df       	rcall	.-192    	; 0x6d8 <LCD_WriteData>
 798:	8b 81       	ldd	r24, Y+3	; 0x03
 79a:	9c 81       	ldd	r25, Y+4	; 0x04
 79c:	fc 01       	movw	r30, r24
 79e:	80 81       	ld	r24, Z
 7a0:	88 23       	and	r24, r24
		LCD_Cursor(c++);
		LCD_WriteData(*string++);
	}
}
 7a2:	59 f7       	brne	.-42     	; 0x77a <LCD_DisplayString+0x1a>
 7a4:	00 00       	nop
 7a6:	0f 90       	pop	r0
 7a8:	0f 90       	pop	r0
 7aa:	0f 90       	pop	r0
 7ac:	0f 90       	pop	r0
 7ae:	df 91       	pop	r29
 7b0:	cf 91       	pop	r28
 7b2:	08 95       	ret

000007b4 <SPI_MasterInit>:
#define DD_MISO     PB6
#define DD_SCK      PB7
#define DDR_SPI		DDRB

// Master code
void SPI_MasterInit(void) {
 7b4:	cf 93       	push	r28
 7b6:	df 93       	push	r29
 7b8:	cd b7       	in	r28, 0x3d	; 61
 7ba:	de b7       	in	r29, 0x3e	; 62
	// Make sure global interrupts are enabled on SREG register (pg. 9)

	//PORTB = 0xBF;
	//DDRB = 0x40;

	DDRB = 0xBF;
 7bc:	84 e2       	ldi	r24, 0x24	; 36
 7be:	90 e0       	ldi	r25, 0x00	; 0
 7c0:	2f eb       	ldi	r18, 0xBF	; 191
 7c2:	fc 01       	movw	r30, r24
 7c4:	20 83       	st	Z, r18
	PORTB = 0x40;
 7c6:	85 e2       	ldi	r24, 0x25	; 37
 7c8:	90 e0       	ldi	r25, 0x00	; 0
 7ca:	20 e4       	ldi	r18, 0x40	; 64
 7cc:	fc 01       	movw	r30, r24
 7ce:	20 83       	st	Z, r18
	SPCR |= (1<<SPE) | (1<<MSTR) | (1<<SPR0);
 7d0:	8c e4       	ldi	r24, 0x4C	; 76
 7d2:	90 e0       	ldi	r25, 0x00	; 0
 7d4:	2c e4       	ldi	r18, 0x4C	; 76
 7d6:	30 e0       	ldi	r19, 0x00	; 0
 7d8:	f9 01       	movw	r30, r18
 7da:	20 81       	ld	r18, Z
 7dc:	21 65       	ori	r18, 0x51	; 81
 7de:	fc 01       	movw	r30, r24
 7e0:	20 83       	st	Z, r18
	SREG = 0x80;
 7e2:	8f e5       	ldi	r24, 0x5F	; 95
 7e4:	90 e0       	ldi	r25, 0x00	; 0
 7e6:	20 e8       	ldi	r18, 0x80	; 128
 7e8:	fc 01       	movw	r30, r24
 7ea:	20 83       	st	Z, r18
}
 7ec:	00 00       	nop
 7ee:	df 91       	pop	r29
 7f0:	cf 91       	pop	r28
 7f2:	08 95       	ret

000007f4 <SPI_MasterTransmit>:

void SPI_MasterTransmit(unsigned char cData) {
 7f4:	cf 93       	push	r28
 7f6:	df 93       	push	r29
 7f8:	1f 92       	push	r1
 7fa:	cd b7       	in	r28, 0x3d	; 61
 7fc:	de b7       	in	r29, 0x3e	; 62
 7fe:	89 83       	std	Y+1, r24	; 0x01
	// data in SPDR will be transmitted, e.g. SPDR = cData;
	SPDR = cData;
 800:	8e e4       	ldi	r24, 0x4E	; 78
 802:	90 e0       	ldi	r25, 0x00	; 0
 804:	29 81       	ldd	r18, Y+1	; 0x01
 806:	fc 01       	movw	r30, r24
 808:	20 83       	st	Z, r18
	// set SS low
	SetBit(PORTB, 4, 0);
 80a:	85 e2       	ldi	r24, 0x25	; 37
 80c:	90 e0       	ldi	r25, 0x00	; 0
 80e:	fc 01       	movw	r30, r24
 810:	80 81       	ld	r24, Z
 812:	40 e0       	ldi	r20, 0x00	; 0
 814:	64 e0       	ldi	r22, 0x04	; 4
 816:	ba dd       	rcall	.-1164   	; 0x38c <SetBit>

	while(!(SPSR & (1<<SPIF))) { // wait for transmission to complete
 818:	00 00       	nop
 81a:	8d e4       	ldi	r24, 0x4D	; 77
 81c:	90 e0       	ldi	r25, 0x00	; 0
 81e:	fc 01       	movw	r30, r24
 820:	80 81       	ld	r24, Z
 822:	88 23       	and	r24, r24
 824:	d4 f7       	brge	.-12     	; 0x81a <SPI_MasterTransmit+0x26>
		;
	}
	// set SS high
	SetBit(PORTB, 4, 1);
 826:	85 e2       	ldi	r24, 0x25	; 37
 828:	90 e0       	ldi	r25, 0x00	; 0
 82a:	fc 01       	movw	r30, r24
 82c:	80 81       	ld	r24, Z
 82e:	41 e0       	ldi	r20, 0x01	; 1
 830:	64 e0       	ldi	r22, 0x04	; 4
 832:	ac dd       	rcall	.-1192   	; 0x38c <SetBit>
}
 834:	00 00       	nop
 836:	0f 90       	pop	r0
 838:	df 91       	pop	r29
 83a:	cf 91       	pop	r28
 83c:	08 95       	ret

0000083e <SMTick1>:
//--------End Shared Variables------------------------------------------------

//--------User defined FSMs---------------------------------------------------
enum SM1_States { SM1_wait, SM1_press, SM1_release };
//Enumeration of states.
int SMTick1(int state) {
 83e:	cf 93       	push	r28
 840:	df 93       	push	r29
 842:	cd b7       	in	r28, 0x3d	; 61
 844:	de b7       	in	r29, 0x3e	; 62
 846:	cb 55       	subi	r28, 0x5B	; 91
 848:	d1 09       	sbc	r29, r1
 84a:	0f b6       	in	r0, 0x3f	; 63
 84c:	f8 94       	cli
 84e:	de bf       	out	0x3e, r29	; 62
 850:	0f be       	out	0x3f, r0	; 63
 852:	cd bf       	out	0x3d, r28	; 61
 854:	9e 01       	movw	r18, r28
 856:	26 5a       	subi	r18, 0xA6	; 166
 858:	3f 4f       	sbci	r19, 0xFF	; 255
 85a:	f9 01       	movw	r30, r18
 85c:	91 83       	std	Z+1, r25	; 0x01
	// Local Variables
	x = GetKeypadKey();
 85e:	80 83       	st	Z, r24
 860:	dc dd       	rcall	.-1096   	; 0x41a <GetKeypadKey>
 862:	80 93 2b 01 	sts	0x012B, r24	; 0x80012b <x>
	unsigned char press = '\0';	//State machine transitions
	switch (state) {
 866:	19 82       	std	Y+1, r1	; 0x01
 868:	ce 01       	movw	r24, r28
 86a:	86 5a       	subi	r24, 0xA6	; 166
 86c:	9f 4f       	sbci	r25, 0xFF	; 255
 86e:	fc 01       	movw	r30, r24
 870:	80 81       	ld	r24, Z
 872:	91 81       	ldd	r25, Z+1	; 0x01
 874:	00 97       	sbiw	r24, 0x00	; 0
 876:	19 f0       	breq	.+6      	; 0x87e <SMTick1+0x40>
 878:	02 97       	sbiw	r24, 0x02	; 2
 87a:	71 f0       	breq	.+28     	; 0x898 <SMTick1+0x5a>
		case SM1_wait:
		if(x != '\0')
 87c:	20 c0       	rjmp	.+64     	; 0x8be <SMTick1+0x80>
 87e:	80 91 2b 01 	lds	r24, 0x012B	; 0x80012b <x>
 882:	88 23       	and	r24, r24
		{
			state = SM1_press;
 884:	19 f1       	breq	.+70     	; 0x8cc <SMTick1+0x8e>
 886:	ce 01       	movw	r24, r28
 888:	86 5a       	subi	r24, 0xA6	; 166
 88a:	9f 4f       	sbci	r25, 0xFF	; 255
 88c:	21 e0       	ldi	r18, 0x01	; 1
 88e:	30 e0       	ldi	r19, 0x00	; 0
 890:	fc 01       	movw	r30, r24
 892:	31 83       	std	Z+1, r19	; 0x01

		}
		break;
 894:	20 83       	st	Z, r18
		SM1_press:
		state = SM1_release;
		break;

		case SM1_release:
		if (press == '\0') {	// Wait for button release
 896:	1a c0       	rjmp	.+52     	; 0x8cc <SMTick1+0x8e>
 898:	89 81       	ldd	r24, Y+1	; 0x01
 89a:	88 23       	and	r24, r24
			state = SM1_wait;
 89c:	39 f4       	brne	.+14     	; 0x8ac <SMTick1+0x6e>
 89e:	ce 01       	movw	r24, r28
 8a0:	86 5a       	subi	r24, 0xA6	; 166
 8a2:	9f 4f       	sbci	r25, 0xFF	; 255
 8a4:	fc 01       	movw	r30, r24
 8a6:	11 82       	std	Z+1, r1	; 0x01
		}
		else{
			state = SM1_release;
		}
		break;
 8a8:	10 82       	st	Z, r1
		case SM1_release:
		if (press == '\0') {	// Wait for button release
			state = SM1_wait;
		}
		else{
			state = SM1_release;
 8aa:	11 c0       	rjmp	.+34     	; 0x8ce <SMTick1+0x90>
 8ac:	ce 01       	movw	r24, r28
 8ae:	86 5a       	subi	r24, 0xA6	; 166
 8b0:	9f 4f       	sbci	r25, 0xFF	; 255
 8b2:	22 e0       	ldi	r18, 0x02	; 2
 8b4:	30 e0       	ldi	r19, 0x00	; 0
 8b6:	fc 01       	movw	r30, r24
 8b8:	31 83       	std	Z+1, r19	; 0x01
		}
		break;
 8ba:	20 83       	st	Z, r18

		default:
		state = SM1_wait; // default: Initial state
 8bc:	08 c0       	rjmp	.+16     	; 0x8ce <SMTick1+0x90>
 8be:	ce 01       	movw	r24, r28
 8c0:	86 5a       	subi	r24, 0xA6	; 166
 8c2:	9f 4f       	sbci	r25, 0xFF	; 255
 8c4:	fc 01       	movw	r30, r24
 8c6:	11 82       	std	Z+1, r1	; 0x01
		break;
 8c8:	10 82       	st	Z, r1
		if(x != '\0')
		{
			state = SM1_press;

		}
		break;
 8ca:	01 c0       	rjmp	.+2      	; 0x8ce <SMTick1+0x90>
		state = SM1_wait; // default: Initial state
		break;
	}

	//State machine actions
	switch(state) {
 8cc:	00 00       	nop
 8ce:	ce 01       	movw	r24, r28
 8d0:	86 5a       	subi	r24, 0xA6	; 166
 8d2:	9f 4f       	sbci	r25, 0xFF	; 255
 8d4:	fc 01       	movw	r30, r24
 8d6:	80 81       	ld	r24, Z
 8d8:	91 81       	ldd	r25, Z+1	; 0x01
 8da:	81 30       	cpi	r24, 0x01	; 1
 8dc:	91 05       	cpc	r25, r1
 8de:	41 f0       	breq	.+16     	; 0x8f0 <SMTick1+0xb2>
 8e0:	82 30       	cpi	r24, 0x02	; 2
 8e2:	91 05       	cpc	r25, r1
 8e4:	09 f4       	brne	.+2      	; 0x8e8 <SMTick1+0xaa>
 8e6:	d5 c0       	rjmp	.+426    	; 0xa92 <SMTick1+0x254>
 8e8:	89 2b       	or	r24, r25
 8ea:	09 f4       	brne	.+2      	; 0x8ee <SMTick1+0xb0>
 8ec:	d4 c0       	rjmp	.+424    	; 0xa96 <SMTick1+0x258>
		case SM1_wait:
		break;

		case SM1_press:
		switch (x) {
 8ee:	ca c0       	rjmp	.+404    	; 0xa84 <SMTick1+0x246>
 8f0:	80 91 2b 01 	lds	r24, 0x012B	; 0x80012b <x>
 8f4:	88 2f       	mov	r24, r24
 8f6:	90 e0       	ldi	r25, 0x00	; 0
 8f8:	09 2e       	mov	r0, r25
 8fa:	00 0c       	add	r0, r0
 8fc:	aa 0b       	sbc	r26, r26
 8fe:	bb 0b       	sbc	r27, r27
 900:	40 e0       	ldi	r20, 0x00	; 0
 902:	50 e0       	ldi	r21, 0x00	; 0
 904:	24 e4       	ldi	r18, 0x44	; 68
 906:	30 e0       	ldi	r19, 0x00	; 0
 908:	84 1b       	sub	r24, r20
 90a:	95 0b       	sbc	r25, r21
 90c:	28 17       	cp	r18, r24
 90e:	39 07       	cpc	r19, r25
 910:	08 f4       	brcc	.+2      	; 0x914 <SMTick1+0xd6>
 912:	45 c0       	rjmp	.+138    	; 0x99e <SMTick1+0x160>
 914:	8a 5b       	subi	r24, 0xBA	; 186
 916:	9f 4f       	sbci	r25, 0xFF	; 255
			case '\0': break;
			case '1': LCD_ClearScreen(); speed = 1; break; // hex equivalent
 918:	fc 01       	movw	r30, r24
 91a:	d5 c2       	rjmp	.+1450   	; 0xec6 <__tablejump2__>
 91c:	bd de       	rcall	.-646    	; 0x698 <LCD_ClearScreen>
 91e:	81 e0       	ldi	r24, 0x01	; 1
 920:	80 93 05 01 	sts	0x0105, r24	; 0x800105 <speed>
			case '2': LCD_ClearScreen(); speed = 2; break;
 924:	3d c0       	rjmp	.+122    	; 0x9a0 <SMTick1+0x162>
 926:	b8 de       	rcall	.-656    	; 0x698 <LCD_ClearScreen>
 928:	82 e0       	ldi	r24, 0x02	; 2
 92a:	80 93 05 01 	sts	0x0105, r24	; 0x800105 <speed>
			case '3': LCD_ClearScreen(); speed = 3; break;
 92e:	38 c0       	rjmp	.+112    	; 0x9a0 <SMTick1+0x162>
 930:	b3 de       	rcall	.-666    	; 0x698 <LCD_ClearScreen>
 932:	83 e0       	ldi	r24, 0x03	; 3
			case '4': LCD_ClearScreen(); speed = 4; break;
 934:	80 93 05 01 	sts	0x0105, r24	; 0x800105 <speed>
 938:	33 c0       	rjmp	.+102    	; 0x9a0 <SMTick1+0x162>
 93a:	ae de       	rcall	.-676    	; 0x698 <LCD_ClearScreen>
			case '5': LCD_ClearScreen(); speed = 5; break;
 93c:	84 e0       	ldi	r24, 0x04	; 4
 93e:	80 93 05 01 	sts	0x0105, r24	; 0x800105 <speed>
 942:	2e c0       	rjmp	.+92     	; 0x9a0 <SMTick1+0x162>
 944:	a9 de       	rcall	.-686    	; 0x698 <LCD_ClearScreen>
			case '6': LCD_ClearScreen(); speed = 6; break;
 946:	85 e0       	ldi	r24, 0x05	; 5
 948:	80 93 05 01 	sts	0x0105, r24	; 0x800105 <speed>
 94c:	29 c0       	rjmp	.+82     	; 0x9a0 <SMTick1+0x162>
 94e:	a4 de       	rcall	.-696    	; 0x698 <LCD_ClearScreen>
			case '7': LCD_ClearScreen(); uC = 1; break;
 950:	86 e0       	ldi	r24, 0x06	; 6
 952:	80 93 05 01 	sts	0x0105, r24	; 0x800105 <speed>
 956:	24 c0       	rjmp	.+72     	; 0x9a0 <SMTick1+0x162>
 958:	9f de       	rcall	.-706    	; 0x698 <LCD_ClearScreen>
			case '8': LCD_ClearScreen(); uC = 2; break;
 95a:	81 e0       	ldi	r24, 0x01	; 1
 95c:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <uC>
 960:	1f c0       	rjmp	.+62     	; 0x9a0 <SMTick1+0x162>
			case '9': LCD_ClearScreen(); uC = 3; break;
 962:	9a de       	rcall	.-716    	; 0x698 <LCD_ClearScreen>
 964:	82 e0       	ldi	r24, 0x02	; 2
 966:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <uC>
			case 'A': LCD_ClearScreen(); pattern = 1; break;
 96a:	1a c0       	rjmp	.+52     	; 0x9a0 <SMTick1+0x162>
 96c:	95 de       	rcall	.-726    	; 0x698 <LCD_ClearScreen>
 96e:	83 e0       	ldi	r24, 0x03	; 3
 970:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <uC>
			case 'B': LCD_ClearScreen(); pattern = 2; break;
 974:	15 c0       	rjmp	.+42     	; 0x9a0 <SMTick1+0x162>
 976:	90 de       	rcall	.-736    	; 0x698 <LCD_ClearScreen>
 978:	81 e0       	ldi	r24, 0x01	; 1
 97a:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <pattern>
 97e:	10 c0       	rjmp	.+32     	; 0x9a0 <SMTick1+0x162>
			case 'C': LCD_ClearScreen(); pattern = 3; break;
 980:	8b de       	rcall	.-746    	; 0x698 <LCD_ClearScreen>
 982:	82 e0       	ldi	r24, 0x02	; 2
 984:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <pattern>
 988:	0b c0       	rjmp	.+22     	; 0x9a0 <SMTick1+0x162>
 98a:	86 de       	rcall	.-756    	; 0x698 <LCD_ClearScreen>
			case 'D': LCD_ClearScreen(); pattern = 4; break;
 98c:	83 e0       	ldi	r24, 0x03	; 3
 98e:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <pattern>
 992:	06 c0       	rjmp	.+12     	; 0x9a0 <SMTick1+0x162>
 994:	81 de       	rcall	.-766    	; 0x698 <LCD_ClearScreen>
 996:	84 e0       	ldi	r24, 0x04	; 4
			//case '*': LCD_ClearScreen(); LCD_DisplayString(1, "*"); break;
			//case '0': LCD_ClearScreen(); LCD_DisplayString(1, "0"); break;
			//case '#': LCD_ClearScreen(); LCD_DisplayString(1, "#"); break;
			default: break; // Should never occur. Middle LED off.
 998:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <pattern>
		}
		
		string = "Ptrn: ";
 99c:	01 c0       	rjmp	.+2      	; 0x9a0 <SMTick1+0x162>
 99e:	00 00       	nop
 9a0:	8e e0       	ldi	r24, 0x0E	; 14
 9a2:	91 e0       	ldi	r25, 0x01	; 1
 9a4:	90 93 08 01 	sts	0x0108, r25	; 0x800108 <string+0x1>
		string2 = " Spd: ";
 9a8:	80 93 07 01 	sts	0x0107, r24	; 0x800107 <string>
 9ac:	85 e1       	ldi	r24, 0x15	; 21
 9ae:	91 e0       	ldi	r25, 0x01	; 1
		unsigned char* string3 = "  uC: ";
 9b0:	90 93 0a 01 	sts	0x010A, r25	; 0x80010a <string2+0x1>
 9b4:	80 93 09 01 	sts	0x0109, r24	; 0x800109 <string2>
		char str[80];
		char ptrn[2];
		itoa(pattern, ptrn, 10);
 9b8:	8c e1       	ldi	r24, 0x1C	; 28
 9ba:	91 e0       	ldi	r25, 0x01	; 1
 9bc:	9b 83       	std	Y+3, r25	; 0x03
 9be:	8a 83       	std	Y+2, r24	; 0x02
 9c0:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <pattern>
 9c4:	88 2f       	mov	r24, r24
 9c6:	90 e0       	ldi	r25, 0x00	; 0
 9c8:	9e 01       	movw	r18, r28
 9ca:	2c 5f       	subi	r18, 0xFC	; 252
 9cc:	3f 4f       	sbci	r19, 0xFF	; 255
		char spd[2];
		itoa(speed, spd, 10);
 9ce:	4a e0       	ldi	r20, 0x0A	; 10
 9d0:	50 e0       	ldi	r21, 0x00	; 0
 9d2:	b9 01       	movw	r22, r18
 9d4:	93 d2       	rcall	.+1318   	; 0xefc <itoa>
 9d6:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <speed>
 9da:	88 2f       	mov	r24, r24
 9dc:	90 e0       	ldi	r25, 0x00	; 0
 9de:	9e 01       	movw	r18, r28
 9e0:	2a 5f       	subi	r18, 0xFA	; 250
 9e2:	3f 4f       	sbci	r19, 0xFF	; 255
		char uCtemp[2];
		itoa(uC, uCtemp, 10);
 9e4:	4a e0       	ldi	r20, 0x0A	; 10
 9e6:	50 e0       	ldi	r21, 0x00	; 0
 9e8:	b9 01       	movw	r22, r18
 9ea:	88 d2       	rcall	.+1296   	; 0xefc <itoa>
 9ec:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <uC>
 9f0:	88 2f       	mov	r24, r24
 9f2:	90 e0       	ldi	r25, 0x00	; 0
 9f4:	9e 01       	movw	r18, r28
 9f6:	28 5f       	subi	r18, 0xF8	; 248
		strcpy(str, string);
 9f8:	3f 4f       	sbci	r19, 0xFF	; 255
 9fa:	4a e0       	ldi	r20, 0x0A	; 10
 9fc:	50 e0       	ldi	r21, 0x00	; 0
 9fe:	b9 01       	movw	r22, r18
 a00:	7d d2       	rcall	.+1274   	; 0xefc <itoa>
 a02:	20 91 07 01 	lds	r18, 0x0107	; 0x800107 <string>
 a06:	30 91 08 01 	lds	r19, 0x0108	; 0x800108 <string+0x1>
		strcat(str, ptrn);
 a0a:	ce 01       	movw	r24, r28
 a0c:	0a 96       	adiw	r24, 0x0a	; 10
 a0e:	b9 01       	movw	r22, r18
 a10:	6e d2       	rcall	.+1244   	; 0xeee <strcpy>
 a12:	9e 01       	movw	r18, r28
		strcat(str, string2);
 a14:	2c 5f       	subi	r18, 0xFC	; 252
 a16:	3f 4f       	sbci	r19, 0xFF	; 255
 a18:	ce 01       	movw	r24, r28
 a1a:	0a 96       	adiw	r24, 0x0a	; 10
 a1c:	b9 01       	movw	r22, r18
 a1e:	5c d2       	rcall	.+1208   	; 0xed8 <strcat>
 a20:	20 91 09 01 	lds	r18, 0x0109	; 0x800109 <string2>
		strcat(str, spd);
 a24:	30 91 0a 01 	lds	r19, 0x010A	; 0x80010a <string2+0x1>
 a28:	ce 01       	movw	r24, r28
 a2a:	0a 96       	adiw	r24, 0x0a	; 10
 a2c:	b9 01       	movw	r22, r18
 a2e:	54 d2       	rcall	.+1192   	; 0xed8 <strcat>
		strcat(str, string3);
 a30:	9e 01       	movw	r18, r28
 a32:	2a 5f       	subi	r18, 0xFA	; 250
 a34:	3f 4f       	sbci	r19, 0xFF	; 255
 a36:	ce 01       	movw	r24, r28
 a38:	0a 96       	adiw	r24, 0x0a	; 10
 a3a:	b9 01       	movw	r22, r18
 a3c:	4d d2       	rcall	.+1178   	; 0xed8 <strcat>
		strcat(str, uCtemp);
 a3e:	2a 81       	ldd	r18, Y+2	; 0x02
 a40:	3b 81       	ldd	r19, Y+3	; 0x03
 a42:	ce 01       	movw	r24, r28
 a44:	0a 96       	adiw	r24, 0x0a	; 10
 a46:	b9 01       	movw	r22, r18
 a48:	47 d2       	rcall	.+1166   	; 0xed8 <strcat>
 a4a:	9e 01       	movw	r18, r28
		LCD_DisplayString(1, str);
 a4c:	28 5f       	subi	r18, 0xF8	; 248
 a4e:	3f 4f       	sbci	r19, 0xFF	; 255
 a50:	ce 01       	movw	r24, r28
 a52:	0a 96       	adiw	r24, 0x0a	; 10
 a54:	b9 01       	movw	r22, r18
 a56:	40 d2       	rcall	.+1152   	; 0xed8 <strcat>
		sendData = (0xFF & pattern)<<4;
 a58:	ce 01       	movw	r24, r28
 a5a:	0a 96       	adiw	r24, 0x0a	; 10
 a5c:	bc 01       	movw	r22, r24
 a5e:	81 e0       	ldi	r24, 0x01	; 1
 a60:	7f de       	rcall	.-770    	; 0x760 <LCD_DisplayString>
 a62:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <pattern>
		sendData = sendData | (0xFF & speed);
 a66:	82 95       	swap	r24
 a68:	80 7f       	andi	r24, 0xF0	; 240
 a6a:	80 93 0b 01 	sts	0x010B, r24	; 0x80010b <sendData>
 a6e:	90 91 0b 01 	lds	r25, 0x010B	; 0x80010b <sendData>
		SPI_MasterTransmit(sendData);
 a72:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <speed>
 a76:	89 2b       	or	r24, r25
 a78:	80 93 0b 01 	sts	0x010B, r24	; 0x80010b <sendData>
		
		
		break;

		default:
		state = SM1_wait;
 a7c:	80 91 0b 01 	lds	r24, 0x010B	; 0x80010b <sendData>
 a80:	b9 de       	rcall	.-654    	; 0x7f4 <SPI_MasterTransmit>
 a82:	0a c0       	rjmp	.+20     	; 0xa98 <SMTick1+0x25a>
 a84:	ce 01       	movw	r24, r28
 a86:	86 5a       	subi	r24, 0xA6	; 166
		break;
 a88:	9f 4f       	sbci	r25, 0xFF	; 255

		case SM1_release:
		
		
		
		break;
 a8a:	fc 01       	movw	r30, r24
 a8c:	11 82       	std	Z+1, r1	; 0x01
	}

	//State machine actions
	switch(state) {
		case SM1_wait:
		break;
 a8e:	10 82       	st	Z, r1
		default:
		state = SM1_wait;
		break;
	}
	
	return state;
 a90:	03 c0       	rjmp	.+6      	; 0xa98 <SMTick1+0x25a>
 a92:	00 00       	nop
 a94:	01 c0       	rjmp	.+2      	; 0xa98 <SMTick1+0x25a>
 a96:	00 00       	nop
 a98:	ce 01       	movw	r24, r28
 a9a:	86 5a       	subi	r24, 0xA6	; 166
	}
 a9c:	9f 4f       	sbci	r25, 0xFF	; 255
 a9e:	fc 01       	movw	r30, r24
 aa0:	80 81       	ld	r24, Z
 aa2:	91 81       	ldd	r25, Z+1	; 0x01
 aa4:	c5 5a       	subi	r28, 0xA5	; 165
 aa6:	df 4f       	sbci	r29, 0xFF	; 255
 aa8:	0f b6       	in	r0, 0x3f	; 63
 aaa:	f8 94       	cli
 aac:	de bf       	out	0x3e, r29	; 62
 aae:	0f be       	out	0x3f, r0	; 63
 ab0:	cd bf       	out	0x3d, r28	; 61
 ab2:	df 91       	pop	r29
 ab4:	cf 91       	pop	r28
 ab6:	08 95       	ret

00000ab8 <main>:
// --------END User defined FSMs-----------------------------------------------

int main(void)
{
 ab8:	0f 93       	push	r16
 aba:	1f 93       	push	r17
 abc:	cf 93       	push	r28
 abe:	df 93       	push	r29
 ac0:	cd b7       	in	r28, 0x3d	; 61
 ac2:	de b7       	in	r29, 0x3e	; 62
 ac4:	c0 58       	subi	r28, 0x80	; 128
 ac6:	d1 09       	sbc	r29, r1
 ac8:	0f b6       	in	r0, 0x3f	; 63
 aca:	f8 94       	cli
 acc:	de bf       	out	0x3e, r29	; 62
 ace:	0f be       	out	0x3f, r0	; 63
 ad0:	cd bf       	out	0x3d, r28	; 61
	MCUCR = (1<<JTD);
 ad2:	85 e5       	ldi	r24, 0x55	; 85
 ad4:	90 e0       	ldi	r25, 0x00	; 0
 ad6:	20 e8       	ldi	r18, 0x80	; 128
 ad8:	fc 01       	movw	r30, r24
 ada:	20 83       	st	Z, r18
	MCUCR = (1<<JTD);
 adc:	85 e5       	ldi	r24, 0x55	; 85
 ade:	90 e0       	ldi	r25, 0x00	; 0
 ae0:	20 e8       	ldi	r18, 0x80	; 128
 ae2:	fc 01       	movw	r30, r24
 ae4:	20 83       	st	Z, r18
	DDRD = 0xF0; PORTC = 0x0F;
 ae6:	8a e2       	ldi	r24, 0x2A	; 42
 ae8:	90 e0       	ldi	r25, 0x00	; 0
 aea:	20 ef       	ldi	r18, 0xF0	; 240
 aec:	fc 01       	movw	r30, r24
 aee:	20 83       	st	Z, r18
 af0:	88 e2       	ldi	r24, 0x28	; 40
 af2:	90 e0       	ldi	r25, 0x00	; 0
 af4:	2f e0       	ldi	r18, 0x0F	; 15
 af6:	fc 01       	movw	r30, r24
 af8:	20 83       	st	Z, r18
	DDRA = 0xFF; PORTA = 0x00; // LCD data lines
 afa:	81 e2       	ldi	r24, 0x21	; 33
 afc:	90 e0       	ldi	r25, 0x00	; 0
 afe:	2f ef       	ldi	r18, 0xFF	; 255
 b00:	fc 01       	movw	r30, r24
 b02:	20 83       	st	Z, r18
 b04:	82 e2       	ldi	r24, 0x22	; 34
 b06:	90 e0       	ldi	r25, 0x00	; 0
 b08:	fc 01       	movw	r30, r24
 b0a:	10 82       	st	Z, r1
	DDRC = 0xFF; PORTC = 0x00; // LCD control lines
 b0c:	87 e2       	ldi	r24, 0x27	; 39
 b0e:	90 e0       	ldi	r25, 0x00	; 0
 b10:	2f ef       	ldi	r18, 0xFF	; 255
 b12:	fc 01       	movw	r30, r24
 b14:	20 83       	st	Z, r18
 b16:	88 e2       	ldi	r24, 0x28	; 40
 b18:	90 e0       	ldi	r25, 0x00	; 0
 b1a:	fc 01       	movw	r30, r24
 b1c:	10 82       	st	Z, r1


	// Period for the tasks
	unsigned long int SMTick1_calc = 150;
 b1e:	86 e9       	ldi	r24, 0x96	; 150
 b20:	90 e0       	ldi	r25, 0x00	; 0
 b22:	a0 e0       	ldi	r26, 0x00	; 0
 b24:	b0 e0       	ldi	r27, 0x00	; 0
 b26:	8b 83       	std	Y+3, r24	; 0x03
 b28:	9c 83       	std	Y+4, r25	; 0x04
 b2a:	ad 83       	std	Y+5, r26	; 0x05
 b2c:	be 83       	std	Y+6, r27	; 0x06
	unsigned long int SMTick2_calc = 150;
 b2e:	86 e9       	ldi	r24, 0x96	; 150
 b30:	90 e0       	ldi	r25, 0x00	; 0
 b32:	a0 e0       	ldi	r26, 0x00	; 0
 b34:	b0 e0       	ldi	r27, 0x00	; 0
 b36:	8f 83       	std	Y+7, r24	; 0x07
 b38:	98 87       	std	Y+8, r25	; 0x08
 b3a:	a9 87       	std	Y+9, r26	; 0x09
 b3c:	ba 87       	std	Y+10, r27	; 0x0a
	unsigned long int SMTick3_calc = 150;
 b3e:	86 e9       	ldi	r24, 0x96	; 150
 b40:	90 e0       	ldi	r25, 0x00	; 0
 b42:	a0 e0       	ldi	r26, 0x00	; 0
 b44:	b0 e0       	ldi	r27, 0x00	; 0
 b46:	8b 87       	std	Y+11, r24	; 0x0b
 b48:	9c 87       	std	Y+12, r25	; 0x0c
 b4a:	ad 87       	std	Y+13, r26	; 0x0d
 b4c:	be 87       	std	Y+14, r27	; 0x0e

	//Calculating GCD
	unsigned long int tmpGCD = 1;
 b4e:	81 e0       	ldi	r24, 0x01	; 1
 b50:	90 e0       	ldi	r25, 0x00	; 0
 b52:	a0 e0       	ldi	r26, 0x00	; 0
 b54:	b0 e0       	ldi	r27, 0x00	; 0
 b56:	8f 87       	std	Y+15, r24	; 0x0f
 b58:	98 8b       	std	Y+16, r25	; 0x10
 b5a:	a9 8b       	std	Y+17, r26	; 0x11
 b5c:	ba 8b       	std	Y+18, r27	; 0x12
	tmpGCD = findGCD(SMTick1_calc, SMTick1_calc);
 b5e:	2b 81       	ldd	r18, Y+3	; 0x03
 b60:	3c 81       	ldd	r19, Y+4	; 0x04
 b62:	4d 81       	ldd	r20, Y+5	; 0x05
 b64:	5e 81       	ldd	r21, Y+6	; 0x06
 b66:	8b 81       	ldd	r24, Y+3	; 0x03
 b68:	9c 81       	ldd	r25, Y+4	; 0x04
 b6a:	ad 81       	ldd	r26, Y+5	; 0x05
 b6c:	be 81       	ldd	r27, Y+6	; 0x06
 b6e:	bc 01       	movw	r22, r24
 b70:	cd 01       	movw	r24, r26
 b72:	c0 db       	rcall	.-2176   	; 0x2f4 <findGCD>
 b74:	dc 01       	movw	r26, r24
 b76:	cb 01       	movw	r24, r22
 b78:	8f 87       	std	Y+15, r24	; 0x0f
 b7a:	98 8b       	std	Y+16, r25	; 0x10
 b7c:	a9 8b       	std	Y+17, r26	; 0x11
 b7e:	ba 8b       	std	Y+18, r27	; 0x12
	//tmpGCD = findGCD(tmpGCD, SMTick3_calc);

	//Greatest common divisor for all tasks or smallest time unit for tasks.
	unsigned long int GCD = tmpGCD;
 b80:	8f 85       	ldd	r24, Y+15	; 0x0f
 b82:	98 89       	ldd	r25, Y+16	; 0x10
 b84:	a9 89       	ldd	r26, Y+17	; 0x11
 b86:	ba 89       	ldd	r27, Y+18	; 0x12
 b88:	8b 8b       	std	Y+19, r24	; 0x13
 b8a:	9c 8b       	std	Y+20, r25	; 0x14
 b8c:	ad 8b       	std	Y+21, r26	; 0x15
 b8e:	be 8b       	std	Y+22, r27	; 0x16

	//Recalculate GCD periods for scheduler
	unsigned long int SMTick1_period = SMTick1_calc/GCD;
 b90:	8b 81       	ldd	r24, Y+3	; 0x03
 b92:	9c 81       	ldd	r25, Y+4	; 0x04
 b94:	ad 81       	ldd	r26, Y+5	; 0x05
 b96:	be 81       	ldd	r27, Y+6	; 0x06
 b98:	2b 89       	ldd	r18, Y+19	; 0x13
 b9a:	3c 89       	ldd	r19, Y+20	; 0x14
 b9c:	4d 89       	ldd	r20, Y+21	; 0x15
 b9e:	5e 89       	ldd	r21, Y+22	; 0x16
 ba0:	bc 01       	movw	r22, r24
 ba2:	cd 01       	movw	r24, r26
 ba4:	6e d1       	rcall	.+732    	; 0xe82 <__udivmodsi4>
 ba6:	da 01       	movw	r26, r20
 ba8:	c9 01       	movw	r24, r18
 baa:	8f 8b       	std	Y+23, r24	; 0x17
 bac:	98 8f       	std	Y+24, r25	; 0x18
 bae:	a9 8f       	std	Y+25, r26	; 0x19
 bb0:	ba 8f       	std	Y+26, r27	; 0x1a
	unsigned long int SMTick2_period = SMTick2_calc/GCD;
 bb2:	8f 81       	ldd	r24, Y+7	; 0x07
 bb4:	98 85       	ldd	r25, Y+8	; 0x08
 bb6:	a9 85       	ldd	r26, Y+9	; 0x09
 bb8:	ba 85       	ldd	r27, Y+10	; 0x0a
 bba:	2b 89       	ldd	r18, Y+19	; 0x13
 bbc:	3c 89       	ldd	r19, Y+20	; 0x14
 bbe:	4d 89       	ldd	r20, Y+21	; 0x15
 bc0:	5e 89       	ldd	r21, Y+22	; 0x16
 bc2:	bc 01       	movw	r22, r24
 bc4:	cd 01       	movw	r24, r26
 bc6:	5d d1       	rcall	.+698    	; 0xe82 <__udivmodsi4>
 bc8:	da 01       	movw	r26, r20
 bca:	c9 01       	movw	r24, r18
 bcc:	8b 8f       	std	Y+27, r24	; 0x1b
 bce:	9c 8f       	std	Y+28, r25	; 0x1c
 bd0:	ad 8f       	std	Y+29, r26	; 0x1d
 bd2:	be 8f       	std	Y+30, r27	; 0x1e
	unsigned long int SMTick3_period = SMTick3_calc/GCD;
 bd4:	8b 85       	ldd	r24, Y+11	; 0x0b
 bd6:	9c 85       	ldd	r25, Y+12	; 0x0c
 bd8:	ad 85       	ldd	r26, Y+13	; 0x0d
 bda:	be 85       	ldd	r27, Y+14	; 0x0e
 bdc:	2b 89       	ldd	r18, Y+19	; 0x13
 bde:	3c 89       	ldd	r19, Y+20	; 0x14
 be0:	4d 89       	ldd	r20, Y+21	; 0x15
 be2:	5e 89       	ldd	r21, Y+22	; 0x16
 be4:	bc 01       	movw	r22, r24
 be6:	cd 01       	movw	r24, r26
 be8:	4c d1       	rcall	.+664    	; 0xe82 <__udivmodsi4>
 bea:	da 01       	movw	r26, r20
 bec:	c9 01       	movw	r24, r18
 bee:	8f 8f       	std	Y+31, r24	; 0x1f
 bf0:	98 a3       	std	Y+32, r25	; 0x20
 bf2:	a9 a3       	std	Y+33, r26	; 0x21
 bf4:	ba a3       	std	Y+34, r27	; 0x22
		
	//Declare an array of tasks
	static task task1;
	task *tasks[] = { &task1 };
 bf6:	8c e2       	ldi	r24, 0x2C	; 44
 bf8:	91 e0       	ldi	r25, 0x01	; 1
 bfa:	9a a7       	std	Y+42, r25	; 0x2a
 bfc:	89 a7       	std	Y+41, r24	; 0x29
	const unsigned short numTasks = sizeof(tasks)/sizeof(task*);
 bfe:	81 e0       	ldi	r24, 0x01	; 1
 c00:	90 e0       	ldi	r25, 0x00	; 0
 c02:	9c a3       	std	Y+36, r25	; 0x24
 c04:	8b a3       	std	Y+35, r24	; 0x23

	// Task 1
	task1.state = SM1_wait;//Task initial state.
 c06:	10 92 2c 01 	sts	0x012C, r1	; 0x80012c <task1.2118>
	task1.period = SMTick1_period;//Task Period.
 c0a:	8f 89       	ldd	r24, Y+23	; 0x17
 c0c:	98 8d       	ldd	r25, Y+24	; 0x18
 c0e:	a9 8d       	ldd	r26, Y+25	; 0x19
 c10:	ba 8d       	ldd	r27, Y+26	; 0x1a
 c12:	80 93 2d 01 	sts	0x012D, r24	; 0x80012d <task1.2118+0x1>
 c16:	90 93 2e 01 	sts	0x012E, r25	; 0x80012e <task1.2118+0x2>
 c1a:	a0 93 2f 01 	sts	0x012F, r26	; 0x80012f <task1.2118+0x3>
 c1e:	b0 93 30 01 	sts	0x0130, r27	; 0x800130 <task1.2118+0x4>
	task1.elapsedTime = SMTick1_period;//Task current elapsed time.
 c22:	8f 89       	ldd	r24, Y+23	; 0x17
 c24:	98 8d       	ldd	r25, Y+24	; 0x18
 c26:	a9 8d       	ldd	r26, Y+25	; 0x19
 c28:	ba 8d       	ldd	r27, Y+26	; 0x1a
 c2a:	80 93 31 01 	sts	0x0131, r24	; 0x800131 <task1.2118+0x5>
 c2e:	90 93 32 01 	sts	0x0132, r25	; 0x800132 <task1.2118+0x6>
 c32:	a0 93 33 01 	sts	0x0133, r26	; 0x800133 <task1.2118+0x7>
 c36:	b0 93 34 01 	sts	0x0134, r27	; 0x800134 <task1.2118+0x8>
	task1.TickFct = &SMTick1;//Function pointer for the tick.
 c3a:	8f e1       	ldi	r24, 0x1F	; 31
 c3c:	94 e0       	ldi	r25, 0x04	; 4
 c3e:	90 93 36 01 	sts	0x0136, r25	; 0x800136 <task1.2118+0xa>
 c42:	80 93 35 01 	sts	0x0135, r24	; 0x800135 <task1.2118+0x9>

	// Set the timer and turn it on
	TimerSet(GCD);
 c46:	8b 89       	ldd	r24, Y+19	; 0x13
 c48:	9c 89       	ldd	r25, Y+20	; 0x14
 c4a:	ad 89       	ldd	r26, Y+21	; 0x15
	TimerOn();
 c4c:	be 89       	ldd	r27, Y+22	; 0x16
 c4e:	bc 01       	movw	r22, r24

	LCD_init();
 c50:	cd 01       	movw	r24, r26
 c52:	7f da       	rcall	.-2818   	; 0x152 <TimerSet>
	LCD_ClearScreen(); 
 c54:	ac da       	rcall	.-2728   	; 0x1ae <TimerOn>
 c56:	2a dd       	rcall	.-1452   	; 0x6ac <LCD_init>
	SPI_MasterInit();
 c58:	1f dd       	rcall	.-1474   	; 0x698 <LCD_ClearScreen>
 c5a:	ac dd       	rcall	.-1192   	; 0x7b4 <SPI_MasterInit>

	//LCD_DisplayString(1, "1");

	unsigned short i; // Scheduler for-loop iterator
	const unsigned char* temp = "1";
 c5c:	83 e2       	ldi	r24, 0x23	; 35
 c5e:	91 e0       	ldi	r25, 0x01	; 1
 c60:	9e a3       	std	Y+38, r25	; 0x26
 c62:	8d a3       	std	Y+37, r24	; 0x25
	
			string = "Ptrn: ";
 c64:	8e e0       	ldi	r24, 0x0E	; 14
 c66:	91 e0       	ldi	r25, 0x01	; 1
 c68:	90 93 08 01 	sts	0x0108, r25	; 0x800108 <string+0x1>
 c6c:	80 93 07 01 	sts	0x0107, r24	; 0x800107 <string>
			string2 = " Spd: ";
 c70:	85 e1       	ldi	r24, 0x15	; 21
 c72:	91 e0       	ldi	r25, 0x01	; 1
 c74:	90 93 0a 01 	sts	0x010A, r25	; 0x80010a <string2+0x1>
 c78:	80 93 09 01 	sts	0x0109, r24	; 0x800109 <string2>
			unsigned char* string3 = "  uC: ";
 c7c:	8c e1       	ldi	r24, 0x1C	; 28
 c7e:	91 e0       	ldi	r25, 0x01	; 1
 c80:	98 a7       	std	Y+40, r25	; 0x28
 c82:	8f a3       	std	Y+39, r24	; 0x27
			char str[80];
			char ptrn[2];
			itoa(pattern, ptrn, 10);
 c84:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <pattern>
 c88:	88 2f       	mov	r24, r24
 c8a:	90 e0       	ldi	r25, 0x00	; 0
 c8c:	9e 01       	movw	r18, r28
 c8e:	25 58       	subi	r18, 0x85	; 133
 c90:	3f 4f       	sbci	r19, 0xFF	; 255
 c92:	4a e0       	ldi	r20, 0x0A	; 10
 c94:	50 e0       	ldi	r21, 0x00	; 0
 c96:	b9 01       	movw	r22, r18
			char spd[2];
			itoa(speed, spd, 10);
 c98:	31 d1       	rcall	.+610    	; 0xefc <itoa>
 c9a:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <speed>
 c9e:	88 2f       	mov	r24, r24
 ca0:	90 e0       	ldi	r25, 0x00	; 0
 ca2:	9e 01       	movw	r18, r28
 ca4:	23 58       	subi	r18, 0x83	; 131
 ca6:	3f 4f       	sbci	r19, 0xFF	; 255
 ca8:	4a e0       	ldi	r20, 0x0A	; 10
 caa:	50 e0       	ldi	r21, 0x00	; 0
			char uCtemp[2];
			itoa(uC, uCtemp, 10);
 cac:	b9 01       	movw	r22, r18
 cae:	26 d1       	rcall	.+588    	; 0xefc <itoa>
 cb0:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <uC>
 cb4:	88 2f       	mov	r24, r24
 cb6:	90 e0       	ldi	r25, 0x00	; 0
 cb8:	9e 01       	movw	r18, r28
 cba:	21 58       	subi	r18, 0x81	; 129
 cbc:	3f 4f       	sbci	r19, 0xFF	; 255
 cbe:	4a e0       	ldi	r20, 0x0A	; 10
 cc0:	50 e0       	ldi	r21, 0x00	; 0
			strcpy(str, string);
 cc2:	b9 01       	movw	r22, r18
 cc4:	1b d1       	rcall	.+566    	; 0xefc <itoa>
 cc6:	20 91 07 01 	lds	r18, 0x0107	; 0x800107 <string>
 cca:	30 91 08 01 	lds	r19, 0x0108	; 0x800108 <string+0x1>
 cce:	ce 01       	movw	r24, r28
 cd0:	8b 96       	adiw	r24, 0x2b	; 43
			strcat(str, ptrn);
 cd2:	b9 01       	movw	r22, r18
 cd4:	0c d1       	rcall	.+536    	; 0xeee <strcpy>
 cd6:	9e 01       	movw	r18, r28
 cd8:	25 58       	subi	r18, 0x85	; 133
 cda:	3f 4f       	sbci	r19, 0xFF	; 255
 cdc:	ce 01       	movw	r24, r28
			strcat(str, string2);
 cde:	8b 96       	adiw	r24, 0x2b	; 43
 ce0:	b9 01       	movw	r22, r18
 ce2:	fa d0       	rcall	.+500    	; 0xed8 <strcat>
 ce4:	20 91 09 01 	lds	r18, 0x0109	; 0x800109 <string2>
 ce8:	30 91 0a 01 	lds	r19, 0x010A	; 0x80010a <string2+0x1>
			strcat(str, spd);
 cec:	ce 01       	movw	r24, r28
 cee:	8b 96       	adiw	r24, 0x2b	; 43
 cf0:	b9 01       	movw	r22, r18
 cf2:	f2 d0       	rcall	.+484    	; 0xed8 <strcat>
 cf4:	9e 01       	movw	r18, r28
 cf6:	23 58       	subi	r18, 0x83	; 131
 cf8:	3f 4f       	sbci	r19, 0xFF	; 255
			strcat(str, string3);
 cfa:	ce 01       	movw	r24, r28
 cfc:	8b 96       	adiw	r24, 0x2b	; 43
 cfe:	b9 01       	movw	r22, r18
 d00:	eb d0       	rcall	.+470    	; 0xed8 <strcat>
 d02:	2f a1       	ldd	r18, Y+39	; 0x27
 d04:	38 a5       	ldd	r19, Y+40	; 0x28
			strcat(str, uCtemp);
 d06:	ce 01       	movw	r24, r28
 d08:	8b 96       	adiw	r24, 0x2b	; 43
 d0a:	b9 01       	movw	r22, r18
 d0c:	e5 d0       	rcall	.+458    	; 0xed8 <strcat>
 d0e:	9e 01       	movw	r18, r28
 d10:	21 58       	subi	r18, 0x81	; 129
 d12:	3f 4f       	sbci	r19, 0xFF	; 255
 d14:	ce 01       	movw	r24, r28
			LCD_DisplayString(1, str);
 d16:	8b 96       	adiw	r24, 0x2b	; 43
 d18:	b9 01       	movw	r22, r18
 d1a:	de d0       	rcall	.+444    	; 0xed8 <strcat>
 d1c:	ce 01       	movw	r24, r28
 d1e:	8b 96       	adiw	r24, 0x2b	; 43
 d20:	bc 01       	movw	r22, r24
	
    while (1) 
    {

		
		for ( i = 0; i < numTasks; i++ ) {
 d22:	81 e0       	ldi	r24, 0x01	; 1
 d24:	1d dd       	rcall	.-1478   	; 0x760 <LCD_DisplayString>
 d26:	1a 82       	std	Y+2, r1	; 0x02
			// Task is ready to tick
			if ( tasks[i]->elapsedTime == tasks[i]->period ) {
 d28:	19 82       	std	Y+1, r1	; 0x01
 d2a:	9b c0       	rjmp	.+310    	; 0xe62 <main+0x3aa>
 d2c:	89 81       	ldd	r24, Y+1	; 0x01
 d2e:	9a 81       	ldd	r25, Y+2	; 0x02
 d30:	88 0f       	add	r24, r24
 d32:	99 1f       	adc	r25, r25
 d34:	9e 01       	movw	r18, r28
 d36:	2f 5f       	subi	r18, 0xFF	; 255
 d38:	3f 4f       	sbci	r19, 0xFF	; 255
 d3a:	82 0f       	add	r24, r18
 d3c:	93 1f       	adc	r25, r19
 d3e:	88 96       	adiw	r24, 0x28	; 40
 d40:	fc 01       	movw	r30, r24
 d42:	80 81       	ld	r24, Z
 d44:	91 81       	ldd	r25, Z+1	; 0x01
 d46:	fc 01       	movw	r30, r24
 d48:	25 81       	ldd	r18, Z+5	; 0x05
 d4a:	36 81       	ldd	r19, Z+6	; 0x06
 d4c:	47 81       	ldd	r20, Z+7	; 0x07
 d4e:	50 85       	ldd	r21, Z+8	; 0x08
 d50:	89 81       	ldd	r24, Y+1	; 0x01
 d52:	9a 81       	ldd	r25, Y+2	; 0x02
 d54:	88 0f       	add	r24, r24
 d56:	99 1f       	adc	r25, r25
 d58:	be 01       	movw	r22, r28
 d5a:	6f 5f       	subi	r22, 0xFF	; 255
 d5c:	7f 4f       	sbci	r23, 0xFF	; 255
 d5e:	86 0f       	add	r24, r22
 d60:	97 1f       	adc	r25, r23
 d62:	88 96       	adiw	r24, 0x28	; 40
 d64:	fc 01       	movw	r30, r24
 d66:	80 81       	ld	r24, Z
 d68:	91 81       	ldd	r25, Z+1	; 0x01
 d6a:	fc 01       	movw	r30, r24
 d6c:	81 81       	ldd	r24, Z+1	; 0x01
 d6e:	92 81       	ldd	r25, Z+2	; 0x02
 d70:	a3 81       	ldd	r26, Z+3	; 0x03
 d72:	b4 81       	ldd	r27, Z+4	; 0x04
 d74:	28 17       	cp	r18, r24
 d76:	39 07       	cpc	r19, r25
 d78:	4a 07       	cpc	r20, r26
 d7a:	5b 07       	cpc	r21, r27
				// Setting next state for task
				tasks[i]->state = tasks[i]->TickFct(tasks[i]->state);
 d7c:	09 f0       	breq	.+2      	; 0xd80 <main+0x2c8>
 d7e:	45 c0       	rjmp	.+138    	; 0xe0a <main+0x352>
 d80:	89 81       	ldd	r24, Y+1	; 0x01
 d82:	9a 81       	ldd	r25, Y+2	; 0x02
 d84:	88 0f       	add	r24, r24
 d86:	99 1f       	adc	r25, r25
 d88:	9e 01       	movw	r18, r28
 d8a:	2f 5f       	subi	r18, 0xFF	; 255
 d8c:	3f 4f       	sbci	r19, 0xFF	; 255
 d8e:	82 0f       	add	r24, r18
 d90:	93 1f       	adc	r25, r19
 d92:	88 96       	adiw	r24, 0x28	; 40
 d94:	fc 01       	movw	r30, r24
 d96:	00 81       	ld	r16, Z
 d98:	11 81       	ldd	r17, Z+1	; 0x01
 d9a:	89 81       	ldd	r24, Y+1	; 0x01
 d9c:	9a 81       	ldd	r25, Y+2	; 0x02
 d9e:	88 0f       	add	r24, r24
 da0:	99 1f       	adc	r25, r25
 da2:	9e 01       	movw	r18, r28
 da4:	2f 5f       	subi	r18, 0xFF	; 255
 da6:	3f 4f       	sbci	r19, 0xFF	; 255
 da8:	82 0f       	add	r24, r18
 daa:	93 1f       	adc	r25, r19
 dac:	88 96       	adiw	r24, 0x28	; 40
 dae:	fc 01       	movw	r30, r24
 db0:	80 81       	ld	r24, Z
 db2:	91 81       	ldd	r25, Z+1	; 0x01
 db4:	fc 01       	movw	r30, r24
 db6:	21 85       	ldd	r18, Z+9	; 0x09
 db8:	32 85       	ldd	r19, Z+10	; 0x0a
 dba:	89 81       	ldd	r24, Y+1	; 0x01
 dbc:	9a 81       	ldd	r25, Y+2	; 0x02
 dbe:	88 0f       	add	r24, r24
 dc0:	99 1f       	adc	r25, r25
 dc2:	ae 01       	movw	r20, r28
 dc4:	4f 5f       	subi	r20, 0xFF	; 255
 dc6:	5f 4f       	sbci	r21, 0xFF	; 255
 dc8:	84 0f       	add	r24, r20
 dca:	95 1f       	adc	r25, r21
 dcc:	88 96       	adiw	r24, 0x28	; 40
 dce:	fc 01       	movw	r30, r24
 dd0:	80 81       	ld	r24, Z
 dd2:	91 81       	ldd	r25, Z+1	; 0x01
 dd4:	fc 01       	movw	r30, r24
 dd6:	80 81       	ld	r24, Z
 dd8:	08 2e       	mov	r0, r24
 dda:	00 0c       	add	r0, r0
 ddc:	99 0b       	sbc	r25, r25
 dde:	f9 01       	movw	r30, r18
 de0:	09 95       	icall
				// Reset the elapsed time for next tick.
				tasks[i]->elapsedTime = 0;
 de2:	f8 01       	movw	r30, r16
 de4:	80 83       	st	Z, r24
 de6:	89 81       	ldd	r24, Y+1	; 0x01
 de8:	9a 81       	ldd	r25, Y+2	; 0x02
 dea:	88 0f       	add	r24, r24
 dec:	99 1f       	adc	r25, r25
 dee:	9e 01       	movw	r18, r28
 df0:	2f 5f       	subi	r18, 0xFF	; 255
 df2:	3f 4f       	sbci	r19, 0xFF	; 255
 df4:	82 0f       	add	r24, r18
 df6:	93 1f       	adc	r25, r19
 df8:	88 96       	adiw	r24, 0x28	; 40
 dfa:	fc 01       	movw	r30, r24
 dfc:	80 81       	ld	r24, Z
 dfe:	91 81       	ldd	r25, Z+1	; 0x01
 e00:	fc 01       	movw	r30, r24
 e02:	15 82       	std	Z+5, r1	; 0x05
 e04:	16 82       	std	Z+6, r1	; 0x06
			}
			tasks[i]->elapsedTime += 1;
 e06:	17 82       	std	Z+7, r1	; 0x07
 e08:	10 86       	std	Z+8, r1	; 0x08
 e0a:	89 81       	ldd	r24, Y+1	; 0x01
 e0c:	9a 81       	ldd	r25, Y+2	; 0x02
 e0e:	88 0f       	add	r24, r24
 e10:	99 1f       	adc	r25, r25
 e12:	9e 01       	movw	r18, r28
 e14:	2f 5f       	subi	r18, 0xFF	; 255
 e16:	3f 4f       	sbci	r19, 0xFF	; 255
 e18:	82 0f       	add	r24, r18
 e1a:	93 1f       	adc	r25, r19
 e1c:	88 96       	adiw	r24, 0x28	; 40
 e1e:	fc 01       	movw	r30, r24
 e20:	20 81       	ld	r18, Z
 e22:	31 81       	ldd	r19, Z+1	; 0x01
 e24:	89 81       	ldd	r24, Y+1	; 0x01
 e26:	9a 81       	ldd	r25, Y+2	; 0x02
 e28:	88 0f       	add	r24, r24
 e2a:	99 1f       	adc	r25, r25
 e2c:	ae 01       	movw	r20, r28
 e2e:	4f 5f       	subi	r20, 0xFF	; 255
 e30:	5f 4f       	sbci	r21, 0xFF	; 255
 e32:	84 0f       	add	r24, r20
 e34:	95 1f       	adc	r25, r21
 e36:	88 96       	adiw	r24, 0x28	; 40
 e38:	fc 01       	movw	r30, r24
 e3a:	80 81       	ld	r24, Z
 e3c:	91 81       	ldd	r25, Z+1	; 0x01
 e3e:	fc 01       	movw	r30, r24
 e40:	85 81       	ldd	r24, Z+5	; 0x05
 e42:	96 81       	ldd	r25, Z+6	; 0x06
 e44:	a7 81       	ldd	r26, Z+7	; 0x07
 e46:	b0 85       	ldd	r27, Z+8	; 0x08
 e48:	01 96       	adiw	r24, 0x01	; 1
 e4a:	a1 1d       	adc	r26, r1
 e4c:	b1 1d       	adc	r27, r1
 e4e:	f9 01       	movw	r30, r18
 e50:	85 83       	std	Z+5, r24	; 0x05
 e52:	96 83       	std	Z+6, r25	; 0x06
	
    while (1) 
    {

		
		for ( i = 0; i < numTasks; i++ ) {
 e54:	a7 83       	std	Z+7, r26	; 0x07
 e56:	b0 87       	std	Z+8, r27	; 0x08
 e58:	89 81       	ldd	r24, Y+1	; 0x01
 e5a:	9a 81       	ldd	r25, Y+2	; 0x02
 e5c:	01 96       	adiw	r24, 0x01	; 1
 e5e:	9a 83       	std	Y+2, r25	; 0x02
 e60:	89 83       	std	Y+1, r24	; 0x01
 e62:	29 81       	ldd	r18, Y+1	; 0x01
 e64:	3a 81       	ldd	r19, Y+2	; 0x02
 e66:	8b a1       	ldd	r24, Y+35	; 0x23
 e68:	9c a1       	ldd	r25, Y+36	; 0x24
 e6a:	28 17       	cp	r18, r24
 e6c:	39 07       	cpc	r19, r25
				// Reset the elapsed time for next tick.
				tasks[i]->elapsedTime = 0;
			}
			tasks[i]->elapsedTime += 1;
		}
		while(!TimerFlag);
 e6e:	08 f4       	brcc	.+2      	; 0xe72 <main+0x3ba>
 e70:	5d cf       	rjmp	.-326    	; 0xd2c <main+0x274>
 e72:	00 00       	nop
 e74:	80 91 26 01 	lds	r24, 0x0126	; 0x800126 <__data_end>
		TimerFlag = 0;
 e78:	88 23       	and	r24, r24
 e7a:	e1 f3       	breq	.-8      	; 0xe74 <main+0x3bc>

	}
 e7c:	10 92 26 01 	sts	0x0126, r1	; 0x800126 <__data_end>
 e80:	52 cf       	rjmp	.-348    	; 0xd26 <main+0x26e>

00000e82 <__udivmodsi4>:
 e82:	a1 e2       	ldi	r26, 0x21	; 33
 e84:	1a 2e       	mov	r1, r26
 e86:	aa 1b       	sub	r26, r26
 e88:	bb 1b       	sub	r27, r27
 e8a:	fd 01       	movw	r30, r26
 e8c:	0d c0       	rjmp	.+26     	; 0xea8 <__udivmodsi4_ep>

00000e8e <__udivmodsi4_loop>:
 e8e:	aa 1f       	adc	r26, r26
 e90:	bb 1f       	adc	r27, r27
 e92:	ee 1f       	adc	r30, r30
 e94:	ff 1f       	adc	r31, r31
 e96:	a2 17       	cp	r26, r18
 e98:	b3 07       	cpc	r27, r19
 e9a:	e4 07       	cpc	r30, r20
 e9c:	f5 07       	cpc	r31, r21
 e9e:	20 f0       	brcs	.+8      	; 0xea8 <__udivmodsi4_ep>
 ea0:	a2 1b       	sub	r26, r18
 ea2:	b3 0b       	sbc	r27, r19
 ea4:	e4 0b       	sbc	r30, r20
 ea6:	f5 0b       	sbc	r31, r21

00000ea8 <__udivmodsi4_ep>:
 ea8:	66 1f       	adc	r22, r22
 eaa:	77 1f       	adc	r23, r23
 eac:	88 1f       	adc	r24, r24
 eae:	99 1f       	adc	r25, r25
 eb0:	1a 94       	dec	r1
 eb2:	69 f7       	brne	.-38     	; 0xe8e <__udivmodsi4_loop>
 eb4:	60 95       	com	r22
 eb6:	70 95       	com	r23
 eb8:	80 95       	com	r24
 eba:	90 95       	com	r25
 ebc:	9b 01       	movw	r18, r22
 ebe:	ac 01       	movw	r20, r24
 ec0:	bd 01       	movw	r22, r26
 ec2:	cf 01       	movw	r24, r30
 ec4:	08 95       	ret

00000ec6 <__tablejump2__>:
 ec6:	ee 0f       	add	r30, r30
 ec8:	ff 1f       	adc	r31, r31
 eca:	00 24       	eor	r0, r0
 ecc:	00 1c       	adc	r0, r0
 ece:	0b be       	out	0x3b, r0	; 59
 ed0:	07 90       	elpm	r0, Z+
 ed2:	f6 91       	elpm	r31, Z
 ed4:	e0 2d       	mov	r30, r0
 ed6:	09 94       	ijmp

00000ed8 <strcat>:
 ed8:	fb 01       	movw	r30, r22
 eda:	dc 01       	movw	r26, r24
 edc:	0d 90       	ld	r0, X+
 ede:	00 20       	and	r0, r0
 ee0:	e9 f7       	brne	.-6      	; 0xedc <strcat+0x4>
 ee2:	11 97       	sbiw	r26, 0x01	; 1
 ee4:	01 90       	ld	r0, Z+
 ee6:	0d 92       	st	X+, r0
 ee8:	00 20       	and	r0, r0
 eea:	e1 f7       	brne	.-8      	; 0xee4 <strcat+0xc>
 eec:	08 95       	ret

00000eee <strcpy>:
 eee:	fb 01       	movw	r30, r22
 ef0:	dc 01       	movw	r26, r24
 ef2:	01 90       	ld	r0, Z+
 ef4:	0d 92       	st	X+, r0
 ef6:	00 20       	and	r0, r0
 ef8:	e1 f7       	brne	.-8      	; 0xef2 <strcpy+0x4>
 efa:	08 95       	ret

00000efc <itoa>:
 efc:	45 32       	cpi	r20, 0x25	; 37
 efe:	51 05       	cpc	r21, r1
 f00:	18 f4       	brcc	.+6      	; 0xf08 <itoa+0xc>
 f02:	42 30       	cpi	r20, 0x02	; 2
 f04:	08 f0       	brcs	.+2      	; 0xf08 <itoa+0xc>
 f06:	04 c0       	rjmp	.+8      	; 0xf10 <__itoa_ncheck>
 f08:	fb 01       	movw	r30, r22
 f0a:	10 82       	st	Z, r1
 f0c:	cb 01       	movw	r24, r22
 f0e:	08 95       	ret

00000f10 <__itoa_ncheck>:
 f10:	bb 27       	eor	r27, r27
 f12:	4a 30       	cpi	r20, 0x0A	; 10
 f14:	31 f4       	brne	.+12     	; 0xf22 <__itoa_ncheck+0x12>
 f16:	99 23       	and	r25, r25
 f18:	22 f4       	brpl	.+8      	; 0xf22 <__itoa_ncheck+0x12>
 f1a:	bd e2       	ldi	r27, 0x2D	; 45
 f1c:	90 95       	com	r25
 f1e:	81 95       	neg	r24
 f20:	9f 4f       	sbci	r25, 0xFF	; 255
 f22:	01 c0       	rjmp	.+2      	; 0xf26 <__utoa_common>

00000f24 <__utoa_ncheck>:
 f24:	bb 27       	eor	r27, r27

00000f26 <__utoa_common>:
 f26:	fb 01       	movw	r30, r22
 f28:	55 27       	eor	r21, r21
 f2a:	aa 27       	eor	r26, r26
 f2c:	88 0f       	add	r24, r24
 f2e:	99 1f       	adc	r25, r25
 f30:	aa 1f       	adc	r26, r26
 f32:	a4 17       	cp	r26, r20
 f34:	10 f0       	brcs	.+4      	; 0xf3a <__utoa_common+0x14>
 f36:	a4 1b       	sub	r26, r20
 f38:	83 95       	inc	r24
 f3a:	50 51       	subi	r21, 0x10	; 16
 f3c:	b9 f7       	brne	.-18     	; 0xf2c <__utoa_common+0x6>
 f3e:	a0 5d       	subi	r26, 0xD0	; 208
 f40:	aa 33       	cpi	r26, 0x3A	; 58
 f42:	08 f0       	brcs	.+2      	; 0xf46 <__utoa_common+0x20>
 f44:	a9 5d       	subi	r26, 0xD9	; 217
 f46:	a1 93       	st	Z+, r26
 f48:	00 97       	sbiw	r24, 0x00	; 0
 f4a:	79 f7       	brne	.-34     	; 0xf2a <__utoa_common+0x4>
 f4c:	b1 11       	cpse	r27, r1
 f4e:	b1 93       	st	Z+, r27
 f50:	11 92       	st	Z+, r1
 f52:	cb 01       	movw	r24, r22
 f54:	00 c0       	rjmp	.+0      	; 0xf56 <strrev>

00000f56 <strrev>:
 f56:	dc 01       	movw	r26, r24
 f58:	fc 01       	movw	r30, r24
 f5a:	67 2f       	mov	r22, r23
 f5c:	71 91       	ld	r23, Z+
 f5e:	77 23       	and	r23, r23
 f60:	e1 f7       	brne	.-8      	; 0xf5a <strrev+0x4>
 f62:	32 97       	sbiw	r30, 0x02	; 2
 f64:	04 c0       	rjmp	.+8      	; 0xf6e <strrev+0x18>
 f66:	7c 91       	ld	r23, X
 f68:	6d 93       	st	X+, r22
 f6a:	70 83       	st	Z, r23
 f6c:	62 91       	ld	r22, -Z
 f6e:	ae 17       	cp	r26, r30
 f70:	bf 07       	cpc	r27, r31
 f72:	c8 f3       	brcs	.-14     	; 0xf66 <strrev+0x10>
 f74:	08 95       	ret

00000f76 <_exit>:
 f76:	f8 94       	cli

00000f78 <__stop_program>:
 f78:	ff cf       	rjmp	.-2      	; 0xf78 <__stop_program>
